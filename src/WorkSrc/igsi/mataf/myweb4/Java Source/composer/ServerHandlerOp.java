package composer;

import java.io.IOException;

import com.ibm.dse.base.*;

/**
 * @author odedn
 *
 * To change this generated comment edit the template variable "typecomment":
 * Window>Preferences>Java>Templates.
 * To enable and disable the creation of type comments go to
 * Window>Preferences>Java>Code Generation.
 */
public class ServerHandlerOp extends DSEServerOperation implements Handler{

	/**
	 * Constructor for ServerHandlerOp.
	 */
	public ServerHandlerOp() {
		super();
	}

	/**
	 * Constructor for ServerHandlerOp.
	 * @param arg0
	 * @throws IOException
	 */
	public ServerHandlerOp(String arg0) throws IOException {
		super(arg0);
	}

	/**
	 * Constructor for ServerHandlerOp.
	 * @param arg0
	 * @param arg1
	 * @throws IOException
	 * @throws DSEInvalidRequestException
	 */
	public ServerHandlerOp(String arg0, Context arg1)
		throws IOException, DSEInvalidRequestException {
		super(arg0, arg1);
	}

	/**
	 * Constructor for ServerHandlerOp.
	 * @param arg0
	 * @param arg1
	 * @throws IOException
	 * @throws DSEInvalidRequestException
	 * @throws DSEObjectNotFoundException
	 */
	public ServerHandlerOp(String arg0, String arg1)
		throws IOException, DSEInvalidRequestException, DSEObjectNotFoundException {
		super(arg0, arg1);
	}
	public void execute() throws Exception 
	{
		System.out.println("in ServerHandlerOp execute");				
		MyNotifier notifier = new MyNotifier();
		getContext().addNotifier(notifier,"MyNotifier","cs");	
		
		handleEvent("allEvents","MyNotifier",getContext());
		for(int i=0; i < 5; ++i) {
			notifier.sendEvent("Some fucking event");
		}
	}
	
	public Handler dispatchEvent(DSEEventObject event)
	{
		System.out.println("got event: " + event.toString());
		return(null);	
	}
	
	/**
	 * Calls the EventManager class that will care of registering the handler to the local notifier if
	 * it is defined or to add it to its own list of handlers if the notifier is remote.
	 * <P>This method throws a <B>DSEInvalidArgumentException</B> generated by the EventManager addHandler method. 
	 */
	public void handleEvent(String anEventName, String aNotifierName, Context aContext) throws DSEInvalidArgumentException {
		EventManager.addHandler(this, anEventName, aNotifierName, aContext);
	}
	/**
	 * Calls the EventManager class that will care of registering the handler to the local notifier if
	 * it is defined or to add it to its own list of handlers if the notifier is remote.
	 * <P><I>aTID</I>  is used when the application has session with different remote workstations; it can be a TID
	 * <P>This method throws a <B>DSEInvalidArgumentException</B> generated by the EventManager addHandler method. 
	 */
	public void handleEvent(String anEventName, String aNotifierName,Context aContext, String aTID) throws DSEInvalidArgumentException {
		EventManager.addHandler(this, anEventName, aNotifierName,aContext, aTID);
	}

	/**
	 * Allows the Handler to stop receiving a specific event it was registered for previously.
	 * <P>The notifier will remove the handler from its handlers list for that specific event. If the event
	 * name is "allEvents" any reference to the handler in the list of handlers for that notifier will be deleted.
	 * <P>The method must invoke an EventManager method that will check whether the notifier is local or remote. In the
	 * first case, it will call the notifier to remove the handler from its list of handlers for that specific event;
	 * in the second case, the EventManager will itself remove the handler from its list of handlers.
	 * <P>This method throws a <B>DSEInvalidArgumentException</B> and a <B>DSEHandlerNotFoundException</B>
	 * generated by the EventManager removeHandler method. 
	 */
	public void stopHandlingEvent(String anEventName, String aNotifierName, Context aContext) throws DSEInvalidArgumentException, DSEHandlerNotFoundException {
		EventManager.removeHandler(this, anEventName, aNotifierName, aContext);
	}
	/**
	 * Allows the Handler to stop receiving a specific event it was registered for previously.
	 * <P>The notifier will remove the handler from its handlers list for that specific event. If the event
	 * name is "allEvents" any reference to the handler in the list of handlers for that notifier will be deleted.
	 * <P>The method must invoke an EventManager method that will check whether the notifier is local or remote. In the
	 * first case, it will call the notifier to remove the handler from its list of handlers for that specific event;
	 * in the second case, the EventManager will itself remove the handler from its list of handlers and will
	 * call the remote EventManager to deregister interest in a remote event if no more handlers in that workstation
	 * are waiting for the event. From <I>aContext</I> and <I>anServerName</I>, the EventManager knows the C/S
	 * mechanism instance to use to communicate with the server workstation. 
	 * <P>This method throws a <B>DSEInvalidArgumentException</B> and a <B>DSEHandlerNotFoundException</B>
	 * generated by the EventManager removeHandler method. 
	 */
	public void stopHandlingEvent(String anEventName, String aNotifierName, Context aContext, String aTID) throws DSEInvalidArgumentException, DSEHandlerNotFoundException {
		EventManager.removeHandler(this, anEventName, aNotifierName, aContext, aTID);
	}	

}
