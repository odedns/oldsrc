package com.ibm.dse.gui;

/*_
 * Licensed Materials - Property of IBM
 * Restricted Materials of IBM
 * 5648-D89
 * (C) Copyright IBM Corp. 2000
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp
 */
import java.awt.Component;
import java.util.Enumeration;

import com.ibm.dse.base.Context;
import com.ibm.dse.base.DSEClientOperation;
import com.ibm.dse.base.DSEObjectNotFoundException;
import com.ibm.dse.base.DataElement;
import com.ibm.dse.base.KeyedCollection;
import com.ibm.dse.base.Trace;
/**
* The DSEPanel class represents the external panel that should be used in views. 
* It can contain the visual components as SpTextField, SpLabel,... and also the
* embedded panels. 
* The Context property is used to link the view with the model. 
* @copyright (c)Copyright IBM Corporation 2000
**/
public class DSEPanel extends DSECoordinatedPanel {
	
	private com.ibm.dse.base.Context fieldContext = null;
	private java.lang.String fieldContextName = new String();
	private boolean fieldInstanceContext = true;
/**
 * This constructor creates a DSEPanel object. 
 */
public DSEPanel() {
	super();
	initialize();
}
/**
 * This constructor creates a DSEPanel object. 
 * @param layout java.awt.LayoutManager
 */
public DSEPanel(java.awt.LayoutManager layout) {
	super(layout);
}
/**
 * This constructor creates a DSEPanel object. 
 * @param layout java.awt.LayoutManager
 * @param isDoubleBuffered boolean
 */
public DSEPanel(java.awt.LayoutManager layout, boolean isDoubleBuffered) {
	super(layout, isDoubleBuffered);
}
/**
 * This constructor creates a DSEPanel object. 
 * @param Ctx com.ibm.dse.base.Context
 */
public DSEPanel(Context Ctx) {
	super();
	setLayout(null);	
	setContext(Ctx);
	initialize();
}
/**
 * This constructor creates a DSEPanel object. 
 * @param isDoubleBuffered boolean
 */
public DSEPanel(boolean isDoubleBuffered) {
	super(isDoubleBuffered);
}
/**
 * Sets the receiving context as a child of <I>aContext</I> and as the new current child. 
 * Refer to the Context class chainTo method for an example of implementing this method. 
 * <P>This method throws a <B>DSEInvalidRequestException</B>.  
 */
public void chainTo(com.ibm.dse.base.Context aContext) throws com.ibm.dse.base.DSEInvalidRequestException {
	if (getContext()!=null) {
		getContext().chainTo(aContext);
	}
}
/**
 * Sets the context as a child of the context named <I>aContextName</I> in the hierarchy. 
 * The receiving context is set as the new curent child. If there is more than one context 
 * with this name, one of them is choosen at random. 
 * Refer to the Context class chainToContextNamed method for an example of implementing this method. 
 * <P>This method throws a <B>DSEInvalidRequestException</B> generated by the chainTo method and  
 * throws a <B>DSEObjectNotFoundException</B> if context parent is not found.  
 */
public void chainToContextNamed(String aContextName) throws com.ibm.dse.base.DSEInvalidRequestException, com.ibm.dse.base.DSEObjectNotFoundException {
	if (getContext()!=null) {
		getContext().chainToContextNamed(aContextName);
	}
}
/**
 * close default operation and fires a DSECoordinationEvent (type ViewClosed)
 */
protected void close(DSECoordinationEvent event) {
	try {
		if (getOperation()!=null)
			getOperation().close();
	}
	catch (com.ibm.dse.base.DSEInvalidRequestException ir) {
		try {
			if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
				Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
					"Error - DSEInvalidRequestException in operation close method");
			}
		} catch (java.lang.Throwable t) {}
	}
	catch (com.ibm.dse.base.DSEObjectNotFoundException nf) {
		try {
			if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
				Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
					"Error - DSEObjectNotFoundException in operation close method");
			}
		} catch (java.lang.Throwable t) {}
	}
	disposePanel(this);
	DSECoordinationEvent newEvent = event.copy(this,event.getName());
	newEvent.setRefresh(false);
	newEvent.setViewName(getViewName());
	newEvent.setViewSource("");
	newEvent.setEventSourceType(DSECoordinationEvent.EVENT_SOURCETYPE_VIEW_CLOSED);
	newEvent.setEventType(DSECoordinationEvent.EVENT_EVENTYPE_NAVIGATION);
	fireCoordinationEvent(newEvent);
}
/**
 * close default operation and fires a DSECoordinationEvent (type ViewClosed)
 * @param unchainContext boolean, if true context will be unchainded from the hierarchy
 */
public void close(boolean unchainContext) {
	try {
		if (getOperation()!=null)
			getOperation().close();
			
		if ((unchainContext)&&(getContext()!=null))
			getContext().unchain();
	}
	catch (com.ibm.dse.base.DSEInvalidRequestException ir) {
		try {
			if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
				Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
					"Error - DSEInvalidRequestException in operation close method");
			}
		} catch (java.lang.Throwable t) {}
	}
	catch (com.ibm.dse.base.DSEObjectNotFoundException nf) {
		try {
			if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
				Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
					"Error - DSEObjectNotFoundException in operation close method");
			}
		} catch (java.lang.Throwable t) {}
	}
	disposePanel(this);
	DSECoordinationEvent newEvent = new DSECoordinationEvent(this);
	newEvent.setRefresh(false);
	newEvent.setViewName(getViewName());
	newEvent.setViewSource("");
	newEvent.setEventType(DSECoordinationEvent.EVENT_EVENTYPE_NAVIGATION);
	newEvent.setEventSourceType(DSECoordinationEvent.EVENT_SOURCETYPE_VIEW_CLOSED);
	newEvent.setEventName(getName()+".viewClosed");
	fireCoordinationEvent(newEvent);
}
/**
 * Manages the appropriate actions when a DSECoordinationEvent has been sent and refesh property is true.
 * @param dce com.ibm.dse.gui.DSECoordinationEvent
 */
public void dataChanged(DSECoordinationEvent dce) {
	DataExchanger de = (DataExchanger)dce.getSource();
	// if ((de is an outsider) ||
	//     (de is a component && (component is in DSECoordinatedPanel || component is in EmbeddedPanel with nesting)))
	if (!(de instanceof Component)
		||((de instanceof Component) 
			&&((SpPanel.getSpPanel((Component)de) instanceof DSECoordinatedPanel)  
				||((SpPanel.getSpPanel((Component)de) instanceof EmbeddedPanel)&& 
					((((EmbeddedPanel)(SpPanel.getSpPanel((Component)de)))).getNesting(this)))))) {
						
			SpPanel tempSpPanel = null;
			if (dce.getSource() instanceof Outsider) tempSpPanel = ((Outsider)dce.getSource()).getSpPanel();
			else tempSpPanel = SpPanel.getSpPanel((Component) dce.getSource());
			if ((this==tempSpPanel)||((tempSpPanel instanceof EmbeddedPanel)&&(((EmbeddedPanel)tempSpPanel).getNesting(this)))) {
				if (de.isRequired()) {
					if (de.getDataValue()!=null) 
						removeFromRequiredNotFilledList(de);
					else
					{ 	addToRequiredNotFilledList(de);
			  			if (get_OkButton()!=null) {
			  				get_OkButton().getModel().setArmed(false);
							get_OkButton().getModel().setPressed(false);
							get_OkButton().getModel().setArmed(true);
			  			}
					}
				}
				else removeFromRequiredNotFilledList(de);
				if (de.isInError()) {
					addToChildrenInErrorList(de);
					if (get_OkButton()!=null) {
						get_OkButton().getModel().setArmed(false);
						get_OkButton().getModel().setPressed(false);
						get_OkButton().getModel().setArmed(true);
					}
				}
				else { 
					removeFromChildrenInErrorList(de);
				//	if ((de instanceof Component)&&(SpPanel.getSpPanel((Component)de)!=null)&&((SpPanel.getSpPanel((Component)de)).getErrorLabel()!=null))
				//    	{((SpPanel.getSpPanel((Component)de)).getErrorLabel()).setText("");}
				}
			}
	}
	String aName = de.getDataName();
	if ((getContext()!=null)&&(!refreshing)&&(aName!=null)&&(aName.length()>0))  {
		try 
		{
		  if ( ( ((de.getDataDirection()).equals(Settings.INPUT_DIRECTION)) ||
			     ((de.getDataDirection()).equals(Settings.BOTH_DIRECTION)) ) ) {// &&
//		  	   ( !(de instanceof SpTable) ) ){
				  if ((de.isKeyedValue())&&(de.getDataValue()==null)) {
					KeyedCollection nullKeyed = new KeyedCollection();
				  	getContext().setValueAt(de.getDataName(),nullKeyed.getValue());
				  }
				  else
	 			    getContext().setValueAt(de.getDataName(),de.getDataValue());
		  }
		}
		catch (com.ibm.dse.base.DSEObjectNotFoundException e) {
			try {
				if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
					Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
						"Error - Data Element "+de.getDataName()+" not found in context");
				}
			} catch (java.lang.Throwable t) {}
		}
		catch (Exception e) {
			try {
				if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
					Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
						"Error - Writing a value "+de.getDataValue()+" for "+de.getDataName()+" in the context "+e.toString());
				}
			} catch (java.lang.Throwable t) {}
		}
	}

	if ((getContext()!=null)&&(de.hasAlternativeDataName()) ) { //&&(!(de instanceof SpTable))) {
		String altName = de.getAlternativeDataName();
		if (((aName==null)||(aName.length()==0))&&(altName!=null)&&(altName.length()>0)) {
			try {
				if (Trace.doTrace(Settings.COMPID,Trace.Low,Trace.Information)) {
					Trace.trace(Settings.COMPID,Trace.Low,Trace.Information,com.ibm.dse.base.Settings.getTID(),
						"Information - Alternative Data Element "+altName+" without Data Name defined in : "+((Component)(de)).getName());
				}
			} catch (java.lang.Throwable t) {}
		}
		if ((altName!=null)&&(altName.length()>0))  {
			try {
			   if ((de.isKeyedValue())&&(de.getDataValue()==null)) {
					KeyedCollection nullKeyed = new KeyedCollection();
				  	getContext().setValueAt(de.getDataName(),nullKeyed.getValue());
			   }
			   else
			   		getContext().setValueAt(de.getAlternativeDataName(),de.getDataValue());
			}
			catch (com.ibm.dse.base.DSEObjectNotFoundException e) {
				try {
					if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
						Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
							"Error - Data Element "+de.getAlternativeDataName()+" not found in context");
					}
				} catch (java.lang.Throwable t) {}
			}
			catch (Exception e) {
				try {
					if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
						Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
							"Error - Writing a value "+de.getDataValue()+" for "+de.getAlternativeDataName()+" in the context "+e.toString());
					}
				} catch (java.lang.Throwable t) {}
			}
		}
	}
	
	enableOkButton();
}
/**
 * Execute an Operation
 * @param java.lang.String operation, operation name to execute
 * @int chaining, operation context chains to contextName
 * @param String inputFormat, map format beetwen active context and Operation Context before execute operation.
 * @param String outputFormat, map format beetwen active context and Operation Context after execute operation.
 */
public void executeOper(String operation, int chaining, String inputFormat, String outputFormat) {
	DSEClientOperation oper = null;
//	if (isCorrectStatus()) {
		if (getDisableWhileOperationRunning()) {
			setEnabled(false); 
		}
		System.out.println("in executeOper.");	   
		if  (getCheckBoxesAndButtonGroupsInitialized()) { 
			for (Enumeration e = getListOfCheckBoxes().elements(); e.hasMoreElements(); ) { 
				DataExchanger de = (DataExchanger) e.nextElement();
				DSECoordinationEvent newEvent = new DSECoordinationEvent(this);
				newEvent.setRefresh(true);
				newEvent.setEventType(DSECoordinationEvent.EVENT_EVENTYPE_COORDINATION);
				newEvent.setEventSourceType(DSECoordinationEvent.EVENT_SOURCETYPE_DEFAULT);
				((SpCheckBox)de).fireCoordinationEvent(newEvent);
//		        ((SpCheckBox)de).fireCoordinationEvent(); 
		    }
	     
	        for (Enumeration e = getOutsiders().elements(); e.hasMoreElements(); ) { 
		        Outsider de = (Outsider) e.nextElement();
		        if (de instanceof SpButtonGroup) {
			        DSECoordinationEvent newEvent = new DSECoordinationEvent(this);
					newEvent.setRefresh(true);
					newEvent.setEventType(DSECoordinationEvent.EVENT_EVENTYPE_COORDINATION);
					newEvent.setEventSourceType(DSECoordinationEvent.EVENT_SOURCETYPE_DEFAULT);
					((SpButtonGroup)de).fireCoordinationEvent(newEvent);
		        }
		    }
	        setCheckBoxesAndButtonGroupsInitialized(true);
		}
		try {
			if ((operation!=null)&&((operation.trim()).length()>0)){
				oper = (DSEClientOperation)DSEClientOperation.readObject(operation);
			}
		} catch (Exception e)	{
			try {
				if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
					Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
						"Error - Error reading the operation"+operation+": "+e.toString());
				}
			} catch (java.lang.Throwable t) {}
			fireHandleExceptionInOperation(new ExceptionInOperationEvent(this, e));
			if (getDisableWhileOperationRunning()) { 
				setEnabled(true); 
				get_OkButton().setEnabled(true); 
				repaint();
			}
			return;
		}
		//Chaining Context 
		try {
			if (DSECoordinationEvent.CHAIN_ACTIVE_CONTEXT==chaining) {
//				Context ctx = getContext().getContextNamed(chaining);
				oper.getContext().chainTo(getContext());
			} else if (DSECoordinationEvent.CHAIN_PARENT_CONTEXT==chaining) {
//				Context ctx = getContext().getContextNamed(chaining);
				oper.getContext().chainTo(getContext().getParent());
			} else if (DSECoordinationEvent.CHAIN_ROOT_CONTEXT==chaining) {
//				Context ctx = getContext().getContextNamed(chaining);
				oper.getContext().chainTo(com.ibm.dse.base.Context.getRoot());
			}
		} catch (Exception e) {
			try {
				if (Trace.doTrace(Settings.COMPID,Trace.Low,Trace.Warning)) {
					Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
						"Warning - Exception chaining the operation context: "+e.toString());
				}
			} catch (java.lang.Throwable t) {}
		}
		//InputMapFormat
		try {
			if ((inputFormat!=null)&&(inputFormat.length()>0)){
				com.ibm.dse.base.DataMapperFormat mapper = (com.ibm.dse.base.DataMapperFormat) com.ibm.dse.base.FormatElement.readObject(inputFormat);
				mapper.mapContents(getContext(), oper.getContext());
			}
		}
		catch (java.lang.Throwable t) {
			try {
				if (Trace.doTrace(Settings.COMPID,Trace.Low,Trace.Warning)) {
					Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
						"Warning - Exception in Input Map Format: "+t.toString());
				}
			} catch (java.lang.Throwable t2) {}	
		}
		
		// Cross Validation
		String[] errorMessages=null;
		try {
			errorMessages=oper.xValidate();
		}
		catch (Throwable e) {
			try {
				if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
					Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
						"Error - Exception in the validation of the operation"+e.toString());
				}
			} catch (java.lang.Throwable t) {}
		}
		if ((errorMessages!=null)&&(errorMessages.length>0)) {
			if (getErrorBean()!=null)
				getErrorBean().setListText(errorMessages);
			if (getDisableWhileOperationRunning()) { 
				setEnabled(true); 
				get_OkButton().setEnabled(true); 
				repaint();
			}
			return;
		} else {
			if (getErrorBean()!=null)
				getErrorBean().setText("");
		}
		// End Cross Validation
		
		oper.addOperationRepliedListener(this);
		try {
			if ((outputFormat!=null)&&(outputFormat.length()>0)) {
				setReplyOperationName(operation);
				setReplyOutputFormatName(outputFormat);
			}
			oper.execute();
		} catch (Exception e)	{
			e.printStackTrace();
			try {
				if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
					Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
						"Error - Exception executing the operation"+e.toString());
				}
			} catch (java.lang.Throwable t) {}
			fireHandleExceptionInOperation(new ExceptionInOperationEvent(this, e));
			if (getDisableWhileOperationRunning()) { 
				setEnabled(true); 
				get_OkButton().setEnabled(true); 
				repaint();
			}
			if (getReplyOperationName().equals(operation)) {
				setReplyOperationName("");
				setReplyOutputFormatName("");
			}
		}
//	}
}
/**
 * Gets the context property (com.ibm.dse.base.Context) value.
 * @return The context property value.
 * @see #setContext
 */
public Context getContext() {
	return fieldContext;
}
/**
 * Gets the contextName property (java.lang.String) value.
 * @return The contextName property value.
 * @see #setContextName
 */
public java.lang.String getContextName() {

	if ((fieldContextName!=null)&&(fieldContextName.indexOf(",false")>0)){
		return fieldContextName.substring(0,fieldContextName.indexOf(",false"));
	}
	else if ((fieldContextName!=null)&&(fieldContextName.indexOf(",true")>0)) {
		return fieldContextName.substring(0,fieldContextName.indexOf(",true"));
	}

	return fieldContextName;
}
/**
 * Gets the instanceContext property (boolean) value.
 * @return The instanceContext property value.
 * @see #setInstanceContext
 */
public boolean getInstanceContext() {
	return fieldInstanceContext;
}
/**
 * Returns the value of the element of its working context,
 * or of the upper working contexts, which is located at 
 * @param aCompositeKey String, path name in context.
 */
public Object getValueAt(String aCompositeKey) throws DSEObjectNotFoundException {
	if (getContext()!=null) {
		return getContext().getValueAt(aCompositeKey);
	}
	return null;
}
/**
 * Contains the appropriate actions to be executed when DSECoordinationEvent has been triggered.
 * @param event DSECoordinationEvent
 */
public void handleDSECoordinationEvent(DSECoordinationEvent event) {
	super.handleDSECoordinationEvent(event);

	if (event.getEventSourceType()==DSECoordinationEvent.EVENT_SOURCETYPE_EXEC) {
		if ((event.getViewName()!=null)&&(event.getViewName().length()>0))
			executeNextView=event;
		else
			executeNextView=null;
		executeOper(event.getOperationName(),event.getChainContext(),event.getInputMapFormat(),event.getOutputMapFormat());
	}
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	 System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	 exception.printStackTrace(System.out);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DSEPanel");
		setSize(157, 116);
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * makes an instance (if is necessary) of the context
 */
public void instanceContextIfNecessary() {
	if (getInstanceContext()) {
		if (getContext()!=null) {
			if (getContextName().equals(getContext().getName())){
				return;
			}
		}
		try	{
			if ((getContextName()!=null)&&((getContextName().trim()).length()>0)) { 
				setContext((Context)Context.readObject(getContextName())); 
			}
		} catch (Exception e) {
			try {
				if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
					Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
						"Error - Error reading the context"+getContextName()+": "+e.toString());
				}
			} catch (java.lang.Throwable t) {}
		}
	}

}
/**
 * Returns true if the context is chained to the hierarchy. 
 */
public boolean isChained() {
	if (getContext()!=null) {
		return getContext().isChained();
	}
	return false;
}
/**
 * Decides if the panel is in a correct status or not.
 * An DSECoordinatedPanel is in a correct status when all of the required fields are filled with 
 * correct values. If there are validation methods, they are executed and must return true. 
 */
public boolean isCorrectStatus() {
	boolean correctStatus = false;
	if ((getChildrenInError()!=null)&&(getChildrenNotFilled()!=null))
		correctStatus=(getChildrenInError().size()==0)&&(getChildrenNotFilled().size()==0);
	if ((getErrorBean()!=null)&&((getErrorBean().getText()).equals(getValidationMethod().getErrorMessage())))
				{ getErrorBean().setText(""); }
	if ((correctStatus)) {
		if ((getValidationMethod()!=null)&&((getValidationMethod().getValidationClass()).length()!=0)) {
			try {
				Class c=Class.forName(getValidationMethod().getValidationClass());
				Class[] parametersClass = new Class[1];
				parametersClass[0]=Class.forName("com.ibm.dse.base.Context");

				Object[] o = new Object[1];
				o[0]=getContext();
				java.lang.reflect.Method m = c.getDeclaredMethod(getValidationMethod().getValidationMethod(),parametersClass);
	
				String res = ((String)m.invoke(this,o));
				if ((res==null)||(((String)res).length()==0)) {
					correctStatus = true;
					if (getErrorBean()!=null) getErrorBean().setText("");
				}
				else {
					correctStatus = false;
					if (getErrorBean()!=null) getErrorBean().setText((String)res);
						if (get_OkButton()!=null) {
					 		get_OkButton().getModel().setArmed(false);
							get_OkButton().getModel().setPressed(false);
							get_OkButton().getModel().setArmed(true);
					}
				}

			}
			catch (Exception exc) {
				if ((getValidationMethod()!=null)&&((getValidationMethod().getValidationClass()).length()!=0)) {
					try {
						Class c=Class.forName(getValidationMethod().getValidationClass());
						Class[] parametersClass = new Class[1];
						parametersClass[0]=Class.forName("com.ibm.dse.base.Context");
						Object[] o = new Object[1];
						o[0]=getContext();
						java.lang.reflect.Method m = c.getDeclaredMethod(getValidationMethod().getValidationMethod(),parametersClass);
						correctStatus = correctStatus && ((Boolean)m.invoke(this,o)).booleanValue();
						if (!correctStatus) {
							if (getErrorBean()!=null) getErrorBean().setText(getValidationMethod().getErrorMessage());
							if (get_OkButton()!=null) {
				 			 	get_OkButton().getModel().setArmed(false);
								get_OkButton().getModel().setPressed(false);
								get_OkButton().getModel().setArmed(true);
							}
						}
						
					}
					catch (ClassNotFoundException ex) {
						try {
							if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
								Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
									"Error - Validation class "+getValidationMethod().getValidationClass()+" not Found ");
							}
						} catch (java.lang.Throwable t) {}
					}
					catch (NoSuchMethodException exm1) {
						try {
							if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
								Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
									"Error - Method "+getValidationMethod().getValidationMethod()+" not found in Validation  class "+getValidationMethod().getValidationClass());
							}
						} catch (java.lang.Throwable t) {}
					}
					catch (Exception e) {
						try {
							if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
								Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
									"Error - Invoking method in validation class "+getValidationMethod().getValidationClass()+" "+e.toString());
							}
						} catch (java.lang.Throwable t) {}
					}
				}
			}
		}
	}
	return correctStatus;
}
/**
 * Updates the panel with the data exchangers context values.
 */
public void refreshDataExchangers() {
	refreshing = true;
	for (Enumeration e = getDataExchangers().elements(); e.hasMoreElements(); ) {
		DataExchanger de = (DataExchanger) e.nextElement();
		String aName = de.getDataName();
		if ((aName!=null)&&(aName.length()>0)&&
			( ((de.getDataDirection()).equals(Settings.OUTPUT_DIRECTION)) ||
			  ((de.getDataDirection()).equals(Settings.BOTH_DIRECTION)) )) {
			Object value = null;
			try {value = getContext().getValueAt(aName); }
			catch (Exception ex) {}
			try {
				de.setDataValue(value);
				DataElement dataElement = null;
				try {
					dataElement= getContext().getElementAt(aName);
				} catch (Exception ex) {}
				if (dataElement.getDescriptor()!=null) {
					java.util.Hashtable params = dataElement.getDescriptor().getParameters();
					if (dataElement.getState().isMandatory()) {
						de.setRequired(true);
					} else {
						de.setRequired(false);
					}
					Object hID = params.get("helpID");
					if (hID instanceof String) {
						de.setHelpID(hID.toString());
					}
				}
			}
			catch (Throwable t) {
				try {
					if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
						Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
							"Error - In setDataValue(object) for: "+aName+"  "+t.toString());
					}
				} catch (java.lang.Throwable th) {}
			}  // end catch
		}  // end if
		if (de instanceof DataExchangerWithList) {
			String listName=((DataExchangerWithList)de).getDataNameForList();
  		    if ((listName!=null)&&(listName.length()>0)) {
	  	    	try { Object listValue=getContext().getElementAt(listName);
		  	    	((DataExchangerWithList)de).setDataValueForList(listValue);
		  	    	if ((aName!=null)&&(aName.length()>0)&&
						( ((de.getDataDirection()).equals(Settings.OUTPUT_DIRECTION)) ||
			  			  ((de.getDataDirection()).equals(Settings.BOTH_DIRECTION)) )) {
				  			  if ((de.isKeyedValue())&&(de.getDataValue()==null)) {
								KeyedCollection nullKeyed = new KeyedCollection();
				  				getContext().setValueAt(aName,nullKeyed.getValue());
				  			  }
				  			  else
				  			    getContext().setValueAt(aName,de.getDataValue());
			  		}
		  	    }
	  	        catch (Exception e3) {
		  	        try {
			  	        if (Trace.doTrace(Settings.COMPID,Trace.High,Trace.Error)) {
							Trace.trace(Settings.COMPID,Trace.High,Trace.Error,com.ibm.dse.base.Settings.getTID(),
								"Error - In setDataValue For List for: "+aName+"  "+e3.toString());
						}
			  	    } catch (java.lang.Throwable th) {}
	  	        }
  	       }
		}
	}  // end for
	refreshing = false;
}
/**
 * Sets the context property (com.ibm.dse.base.Context) value.
 * @param context The new value for the property.
 * @see #getContext
 */
public void setContext(Context context) {
	fieldContext = context;
}
/**
 * Sets the contextName property (java.lang.String) value.
 * @param contextName The new value for the property.
 * @see #getContextName
 */
public void setContextName(java.lang.String contextName) {
	
	if (!fieldContextName.equals(contextName)) {
		fieldContextName = contextName;
		instanceContextIfNecessary();
	}

}
/**
 * Sets the contextName property (java.lang.String) value.
 * @param contextName String, the new value for the property
 * @param mInstance boolean, if true makes an instance of the context.
 */
public void setContextName(String contextName,boolean mInstance) {

	setContextName(contextName);
	setInstanceContext(mInstance);
	
}
/**
 * Sets the instanceContext property (boolean) value.
 * @param instanceContext The new value for the property.
 * @see #getInstanceContext
 */
public void setInstanceContext(boolean instanceContext) {
	fieldInstanceContext = instanceContext;
	instanceContextIfNecessary();
}
/**
 * Sets the value of the element of its context, or context parent,
 * which is located at <I>aCompositeKey</I> path. 
 */
public void setValueAt(String aCompositeKey, Object aDataValue) throws com.ibm.dse.base.DSEInvalidArgumentException,com.ibm.dse.base.DSEObjectNotFoundException {
	if (getContext()!=null) {
		getContext().setValueAt(aCompositeKey,aDataValue);
	}
}
/**
 * Removes the context from the context hierarchy. The parent attribute is set to null 
 * and the operation context is removed from the children list in the parent context. 
 * The receiving context cannot have children. 
 * Refer to the Context class unchain method for an example of implementing this method. 
 * <P>This method throws a <B>DSEInvalidRequestException</B> and throws
 * a <B>DSEObjectNotFoundException</B>.  
 */
public void unchain() throws com.ibm.dse.base.DSEInvalidRequestException, com.ibm.dse.base.DSEObjectNotFoundException {
	if (getContext()!=null) {
		getContext().unchain();
	}
}
}
