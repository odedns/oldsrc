/*
 * Created on: 15/10/2003
 * Author: yifat har-nof
 * @version $Id: Flow.java,v 1.5 2005/05/04 12:15:03 yifat Exp $
 */
package com.ness.fw.flower.core;

import com.ness.fw.common.exceptions.AuthorizationException;
import com.ness.fw.common.exceptions.FatalException;
import com.ness.fw.common.exceptions.ResourceException;
import com.ness.fw.flower.common.MenuItemList;
import com.ness.fw.flower.factory.FlowElementsFactoryException;
import com.ness.fw.flower.util.*;

import java.util.*;

/**
 * Provides abstraction for Flow processor. Keeps together the current state of flow and list of subflows.
 */
public interface Flow
{
	/**
	 * Called by parent flow or by <code>ControllerServlet</code> to initiate flow. By initializing flow moves to its
	 * initial state and performs initial state's entry actions
	 *
	 * @param parentFlow the initiator flow
	 * @param parentFlowContext the context of initiator flow
	 * @param flowPathString the flow path string of initiator flow concatenated with id generated by initiator flow specially for the flow.
	 * @return result event with reference to the flow and errors occured while initiating.
	 */
	public ResultEvent initiate(Flow parentFlow, Context parentFlowContext, String flowPathString, SubFlowData subFlowData, DynamicGlobals dynamicGlobals, boolean interactiveMode);

	/**
	 * Returns The flow path indicating the place of current flow in the flow hierarhy.
	 * Usually used by JSP form tag to fill appropriate form field needed for 
	 * event creating at the <code>ControllerServlet</code> 
	 * and after then used for navigating event back to the flow.
	 * @return String
	 */
	public String getFlowPathString();

	/**
	 * Returns the current flow state.
	 * Usually used by JSP form tag to fill appropriate form field needed for 
	 * event creating at the <code>ControllerServlet</code> 
	 * and after then used for navigating event back to the flow.
	 * @return FlowState
	 */
	public FlowState getCurrentState();

	/**
	 * Returns the context of the current state.
	 * Usually used by JSP to fill html data.
	 * @return Context 
	 */
	public Context getCurrentStateContext();

	/**
	 * Used to kill flow. Usually used by parent flow to interrupt the flow run
	 * @throws FormatterException thrown when there are some problems formating 
	 * flow context to parent flow context
	 */
	public void kill() throws FormatterException, ContextException, FatalException, AuthorizationException, FlowException;

	/**
	 * Returns the current flow definition object.
	 * May be used by JSP to retrieve some generic information about flow of this type.
	 */
	public FlowDefinition getFlowDefinition();

	/**
	 * Returns the page element (from the flow / current state), 
	 * contains the page & his authorizations.
	 * @return PageElementAuthLevel
	 */
	public PageElementAuthLevel getPageElement();
	
	/**
	 * Returns the flow page element, contains the page & his authorizations.
	 * @return PageElementAuthLevel
	 */
	public PageElementAuthLevel getFlowPageElement();

	/**
	 * Returns the current state page element, contains the page & his authorizations.
	 * @return PageElementAuthLevel
	 */
	public PageElementAuthLevel getCurrentStatePageElement();
	
	/**
	 * Used by parent flow or by <code>ControllerServlet</code> to pass event to flow.
	 * @param event
	 */
	public ResultEvent processEvent(Event event);

	/**
	 * Used to process event when the state is determined finally
	 * @param event
	 */
	public ResultEvent processEventForState(Event event) throws GuardException,  ActivityException, ValidationException, ActionException, FlowElementsFactoryException, FlowException, ValidationProcessException, ResourceException, ContextException, FormatterException, FatalException, AuthorizationException;

	/**
	 * Returns the name of the flow.
	 * @return String flow name
	 */
	public String getName();

	/**
	 * Used while building JSP page to retrieve subflow with specific name
	 *
	 */
	public Flow getSubflowByName(String name);

	/**
	 * Return the IDs of the sub flows in the hierarchy of the current flow, 
	 * without independent sub flows that was opened under the current flow.  
	 * @return Iterator An iterator over the sub flows IDs.
	 */
	public Iterator getHierarchySubFlowIdsIterator();

	/**
	 * Return the IDs of all the sub flows of the current flow.
	 * @return Iterator An iterator over the sub flows IDs.
	 */
	public Iterator getSubFlowIdsIterator();

	/**
	 * Return a subflow under the current flow with a specific id.
	 */
	Flow getSubFlowById(String id);

	/**
	 * indicates is the flow defined as independent. 
	 * (Topmost level of GUI presentation)
	 * @return boolean
	 */
	public boolean isIndependent();

	/**
	 * Indicates is the flow reached its final state
	 * 
	 */
	public boolean isFinished();
	
	/**
	 * Returns the authorization level determined for the flow.
	 */
	public int getFlowAuthLevel();

	/**
	 * Returns the authorization level determined for the current state in the flow.
	 */
	public int getAuthLevel();
	
	/**
	 * Returns a list of visible & authorized {@link FlowState}s. 
	 * @return FlowStatesList
	 * @throws ResourceException
	 */
	public FlowStatesList getVisibleFlowStatesList() throws ResourceException;
	
	/**
	 * clears the authorized events of the flow.
	 */
	public void clearAuthorizedEvents ();

	/**
	 * Add an event to the authorizedEvents list.
	 * @param clickEventName The event name to add.
	 * @param componentDescription The component that registers the event.
	 */
	public void addAuthorizedEvent(String eventName, String componentDescription);

	/**
	 * remove the event from the authorizedEvents list.
	 * @param eventName The event name to add.
	 */
	public void removeAuthorizedEvent(String eventName);
	
	/**
	 * Check if the event is authorized for the flow.
	 * @param clickEventName The event name to check.
	 * @return boolean True if the event is authorized.
	 */
	public boolean isEventAuthorized (String eventName);

	/**
	 * Check if the current state is of type complex & contains subflow to run.
	 * @return boolean
	 */
	public boolean isCurrentStateOfTypeSubFlow ();
	
	/**
	 * Check if the current state is of type complex & contains page to display.
	 * @return boolean
	 */
	public boolean isCurrentStateOfTypePage ();
	
	/**
	 * Indicates whether the flow contains page
	 * @return boolean
	 */
	public boolean isContainsPage();
	
	/**
	 * Indicates whether the current state is visible
	 * @return boolean
	 */
	public boolean isCurrentStateVisible();
	
	/**
	 * Returns the menuItems list related to the current state,  
	 * from the flow hierarchy above and from all the subflows.
	 * @return MenuItemList
	 * @throws FlowerException
	 */
	public MenuItemList getMenuItemList () throws FlowerException;
	
	/**
	 * Add the menu ids of the parent flow to the given list.
	 * add the menu ids of the current flow if argument "addCurrent" is set to true.
	 * @param menuList The menuList to add the menu items. 
	 * @param addCurrent Indicates whether to add the current flow menu ids or just 
	 * to call to the parent flow method.
	 */
	public void addParentMenuIds (MenuIdList menuList, boolean addCurrent);
	
	/**
	 * Add the menu ids of the sub flows to the given list.
	 * add the menu ids of the current flow if argument "addCurrent" is set to true.
	 * @param menuList The menuList to add the menu items 
	 * @param addCurrent Indicates whether to add the current flow menu ids or just 
	 * to call to the child sub flows method.
	 */
	public void addChildrenMenuIds (MenuIdList menuList, boolean addCurrent);


	/**
	 * Creates the ButtonExtraDataList with the buttons of the current state and the states above & under in the hierarchy.
	 * @param groupId
	 * @throws FlowException
	 */
	public ButtonExtraDataList getButtonExtraDataList (String groupId) throws FlowException;  

	public void addChildrenButtons (String groupId, ButtonExtraDataList buttonExtraDataList, boolean addCurrent);
	
	/**
	 * Returns the first flow in the hierarchy.
	 * @return Flow
	 */
	public Flow getFirstFlow();
	
	/**
	 * Indicates whether the type is menu.
	 * @return boolean
	 */
	public boolean isMenuFlow ();
	
	/**
	 * Returns the menu flow from the current flow hierarchy.
	 * @param flowPath
	 * @return Flow the menu flow
	 * @throws FlowerException
	 */
	public Flow getMenuFlow (FlowPath flowPath);
	
}
