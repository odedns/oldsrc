/*
 * Created on: 15/10/2003
 * Author: yifat har-nof
 * @version $Id: FlowDefinition.java,v 1.2 2005/03/29 14:57:08 yifat Exp $
 */
package com.ness.fw.flower.core;

import java.util.*;
import java.lang.reflect.*;

import com.ness.fw.util.StringFormatterUtil;

/**
 * Concentrates all specific flow configuration according to configuration source (such as XML)
 *
 */
public class FlowDefinition
{
	/**
	 * Name of flow
	 */
	private String name;

	/**
	 * Name of context defined for the flow
	 */
	private String contextName;

	/**
	 * Validator defined for the flow
	 */
	private Validator validator;

	/**
	 * Map for states of flow
	 */
	private HashMap states;

	/**
	 * Name of state that is defined as initial
	 */
	private String initialStateName;

	/**
	 * List of flow states
	 */
	private FlowStatesList flowStatesList;
	
	/**
	 * List of visible flow states
	 */
	private FlowStatesList visibleFlowStatesList;

	/**
	 * Page that is defined for the flow
	 */
	private String page;

	/**
	 * Indicates taht page generated by the flow should be shown separately in the window or inside of page of parent flow (if true - separately)
	 */
	private boolean independent;
	
	/**
	 * The authorization id to determined the authorization level of the flow. 
	 */
	private String authId;

	/**
	 * The menu id's associated with the flow.
	 */
	private List menuIds;

	/**
	 * The flow constructor
	 */
	private Constructor flowConstructor;

	public FlowDefinition(Constructor flowConstructor, String name, String contextName, Validator validator, boolean independent, String menuIds, String authId)
	{
		states = new HashMap();
		flowStatesList = new FlowStatesList();
		visibleFlowStatesList = new FlowStatesList();

		this.flowConstructor = flowConstructor;
		this.contextName = contextName;
		this.name = name;
		this.validator = validator;
		this.independent = independent;
		this.menuIds = StringFormatterUtil.convertStringToList(menuIds, ',');
		this.authId = authId;
	}

	public void createDefaultInternalTransitions()
	{
		for (int i = 0; i < flowStatesList.getFlowStatesCount(); i++)
		{
			FlowState flowState = flowStatesList.getFlowState(i);
			if (flowState.getType() == FlowState.STATE_TYPE_COMPLEX 
				&& flowState.getDefaultTransition() == null)
			{
				flowState.getTransitions().addTransition(
					new Transition(null, null, flowState.getName(), false, true, null, true, false));//created as internal transition
//				new Transition(null, null, null, null, null, null, flowState.getName(), null, false, null, null, true, null, true, false));//created as internal transition
			}
		}
	}

	public FlowStatesList getFlowStates()
	{
		return flowStatesList;
	}

	public FlowStatesList getVisibleFlowStatesList()
	{
		return visibleFlowStatesList;
	}

	public void setInitialStateName(String initialStateName)
	{
		this.initialStateName = initialStateName;
	}

	public String getContextName()
	{
		return contextName;
	}

	public String getInitialStateName()
	{
		return initialStateName;
	}

	public String getName()
	{
		return name;
	}

	public Validator getValidator()
	{
		return validator;
	}

	public String getPage()
	{
		return page;
	}

	public boolean isContainsState(String flowStateName)
	{
		return states.get(flowStateName) != null;
	}

	public FlowState getFlowState(String flowStateName)
	{
		return (FlowState) states.get(flowStateName);
	}

	public void addFlowState(FlowState flowState)
	{
		states.put(flowState.getName(), flowState);
		flowStatesList.addFlowState(flowState);

		if(flowState.isVisible())
		{
			visibleFlowStatesList.addFlowState(flowState);
		}
	}

	public boolean isIndependent()
	{
		return independent;
	}

	/**
	 * Returns the menu id's associated with the flow.
	 * @return List
	 */
	public List getMenuIds()
	{
		return menuIds;
	}

	public Constructor getFlowConstructor()
	{
		return flowConstructor;
	}

	/**
	 * returns authorization id declared in the flow.
	 * @return String authId 
	 */
	public String getAuthId() 
	{
		return authId;
	}

	/**
	 * set authorization id declared in the flow.
	 * @param string
	 */
	public void setAuthId(String authId) 
	{
		this.authId = authId;
	}

	/**
	 * Returns the Page that is defined for the flow
	 * @param string
	 */
	public void setPage(String string)
	{
		page = string;
	}

}
