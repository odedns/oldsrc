<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root SYSTEM "flower.dtd">
<root>

	<!-- ============== -->
	<!-- External check -->
	<!-- ============== -->
	
	<!-- Execute external check from the given className and pass the parameter -->
	<validationCheckDefinition name="externalCheck" method="check" class="com.ness.fw.flower.util.validation.ExternalCheck">
		<checkParamDefinition name="className" type="string" multiplicity="1"/>
		<checkParamDefinition name="methodName" type="string" multiplicity="1"/>
		<checkParamDefinition name="param" type="string" multiplicity="*"/>
	</validationCheckDefinition>

	<!-- =============== -->
	<!-- Existance check -->
	<!-- =============== -->
	
	<!-- Check if the field contains value (for mandatory fields) -->
	<validationCheckDefinition name="fieldExistsCheck" method="isFieldExists" class="com.ness.fw.flower.util.validation.FieldChecks">
		<checkParamDefinition name="field" type="java.lang.Object" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- ============= -->
	<!-- String checks -->
	<!-- ============= -->
	
	<!-- Check if the string value is contained in the list of items -->
	<validationCheckDefinition name="isInStringListCheck" method="isInStringList" class="com.ness.fw.flower.util.validation.StringValidator">
		<checkParamDefinition name="value" type="string" multiplicity="1"/>
		<checkParamDefinition name="listItem" type="string" multiplicity="*"/>
	</validationCheckDefinition>

	<!-- Check if the length of the string value is in the length range -->
	<validationCheckDefinition name="stringLengthRange" method="checkLengthRange" class="com.ness.fw.flower.util.validation.StringValidator">
		<checkParamDefinition name="str" type="string" multiplicity="1"/>
		<checkParamDefinition name="minLength" type="integer" multiplicity="1"/>
		<checkParamDefinition name="maxLength" type="integer" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the length of the string value is not greater then the maxLength parameter -->
	<validationCheckDefinition name="stringMaxLength" method="checkMaxLength" class="com.ness.fw.flower.util.validation.StringValidator">
		<checkParamDefinition name="str" type="string" multiplicity="1"/>
		<checkParamDefinition name="maxLength" type="integer" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the length of the string value is not less then the minLength parameter -->
	<validationCheckDefinition name="stringMinLength" method="checkMinLength" class="com.ness.fw.flower.util.validation.StringValidator">
		<checkParamDefinition name="str" type="string" multiplicity="1"/>
		<checkParamDefinition name="minLength" type="integer" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the length of the string value is equals to the length parameter -->
	<validationCheckDefinition name="stringEqualLength" method="checkEqualLength" class="com.ness.fw.flower.util.validation.StringValidator">
		<checkParamDefinition name="str" type="string" multiplicity="1"/>
		<checkParamDefinition name="length" type="integer" multiplicity="1"/>
	</validationCheckDefinition>


	<!-- Check if the string value is numeric -->
	<validationCheckDefinition name="stringIsNumber" method="isNumeric" class="com.ness.fw.flower.util.validation.StringValidator">
		<checkParamDefinition name="str" type="string" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the string value contained in the contained parameter. -->
	<validationCheckDefinition name="stringContains" method="isStringContains" class="com.ness.fw.flower.util.validation.StringValidator">
		<checkParamDefinition name="container" type="string" multiplicity="1"/>
		<checkParamDefinition name="contained" type="string" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- ============= -->
	<!-- Number checks -->
	<!-- ============= -->
	
	<!-- Check if the numeric value is contained in the list of items -->
	<validationCheckDefinition name="isInNumberListCheck" method="isInNumberList" class="com.ness.fw.flower.util.validation.NumberValidator">
		<checkParamDefinition name="value" type="number" multiplicity="1" defaultType="integer"/>
		<checkParamDefinition name="listItem" type="number" multiplicity="*" defaultType="integer"/>
	</validationCheckDefinition>

	<!-- Check if the numeric value is in the range -->
	<validationCheckDefinition name="numberRange" method="isInRange" class="com.ness.fw.flower.util.validation.NumberValidator">
		<checkParamDefinition name="number" type="number" multiplicity="1" defaultType="integer"/>
		<checkParamDefinition name="minValue" type="number" multiplicity="1" defaultType="integer"/>
		<checkParamDefinition name="maxValue" type="number" multiplicity="1" defaultType="integer"/>
	</validationCheckDefinition>

	<!-- Check if the numeric value is not greater then the maxValue parameter -->
	<validationCheckDefinition name="numberLessThen" method="isNumberLessThen" class="com.ness.fw.flower.util.validation.NumberValidator">
		<checkParamDefinition name="number" type="number" multiplicity="1" defaultType="integer"/>
		<checkParamDefinition name="maxValue" type="number" multiplicity="1" defaultType="integer"/>
	</validationCheckDefinition>

	<!-- Check if the numeric value is not less then the minValue parameter -->
	<validationCheckDefinition name="numberGreaterThen" method="isNumberGreaterThen" class="com.ness.fw.flower.util.validation.NumberValidator">
		<checkParamDefinition name="number" type="number" multiplicity="1" defaultType="integer"/>
		<checkParamDefinition name="minValue" type="number" multiplicity="1" defaultType="integer"/>
	</validationCheckDefinition>


	<!-- Check if the length of the number value is not greater then the maxLength parameter -->
	<validationCheckDefinition name="numberMaxDigits" method="checkMaxDigits" class="com.ness.fw.flower.util.validation.NumberValidator">
		<checkParamDefinition name="number" type="integer" multiplicity="1" />
		<checkParamDefinition name="maxDigits" type="integer" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- ============= -->
	<!-- BigDecimal checks -->
	<!-- ============= -->
	
	<!-- Check if the numeric value is contained in the list of items -->
	<validationCheckDefinition name="isInBigDecimalListCheck" method="isInNumberList" class="com.ness.fw.flower.util.validation.BigDecimalValidator">
		<checkParamDefinition name="value" type="bigDecimal" multiplicity="1"/>
		<checkParamDefinition name="listItem" type="bigDecimal" multiplicity="*"/>
	</validationCheckDefinition>

	<!-- Check if the numeric value is in the range -->
	<validationCheckDefinition name="bigDecimalRange" method="isInRange" class="com.ness.fw.flower.util.validation.BigDecimalValidator">
		<checkParamDefinition name="number" type="bigDecimal" multiplicity="1"/>
		<checkParamDefinition name="minValue" type="bigDecimal" multiplicity="1"/>
		<checkParamDefinition name="maxValue" type="bigDecimal" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the numeric value is not greater then the maxValue parameter -->
	<validationCheckDefinition name="bigDecimalLessThen" method="isNumberLessThen" class="com.ness.fw.flower.util.validation.BigDecimalValidator">
		<checkParamDefinition name="number" type="bigDecimal" multiplicity="1"/>
		<checkParamDefinition name="maxValue" type="bigDecimal" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the numeric value is not less then the minValue parameter -->
	<validationCheckDefinition name="bigDecimalGreaterThen" method="isNumberGreaterThen" class="com.ness.fw.flower.util.validation.BigDecimalValidator">
		<checkParamDefinition name="number" type="bigDecimal" multiplicity="1"/>
		<checkParamDefinition name="minValue" type="bigDecimal" multiplicity="1"/>
	</validationCheckDefinition>


	<!-- Check if the length of the number value is not greater then the maxLength parameter -->
	<validationCheckDefinition name="bigDecimalMaxDigits" method="checkMaxDigits" class="com.ness.fw.flower.util.validation.BigDecimalValidator">
		<checkParamDefinition name="number" type="bigDecimal" multiplicity="1" />
		<checkParamDefinition name="maxScaleDigits" type="integer" multiplicity="1"/>
		<checkParamDefinition name="maxWholeDigits" type="integer" multiplicity="1"/>
	</validationCheckDefinition>



	<!-- =========== -->
	<!-- Date checks -->
	<!-- =========== -->
	
	<!-- Check if the value of date1 is before the value date2 -->
	<validationCheckDefinition name="dateIsBefore" method="dateIsBefore" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date1" type="date" multiplicity="1"/>
		<checkParamDefinition name="date2" type="date" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the value of date1 is before the value of date2, after constructing a date value using the date2Mask -->
	<validationCheckDefinition name="dateIsBeforeStr" method="strDateIsBefore" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date1" type="date" multiplicity="1"/>
		<checkParamDefinition name="date2" type="string" multiplicity="1"/>
		<checkParamDefinition name="date2Mask" type="string" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the value of date1 is before or equal the value of date2, after constructing a date value using the date2Mask -->
	<validationCheckDefinition name="dateIsBeforeOrEqual" method="dateIsBeforeOrEqual" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date1" type="date" multiplicity="1"/>
		<checkParamDefinition name="date2" type="date" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the value of date1 is before or equal the value of date2, after constructing a date value using the date2Mask -->
	<validationCheckDefinition name="dateIsBeforeOrEqualIgnoreTime" method="dateIsBeforeOrEqual" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date1" type="date" multiplicity="1"/>
		<checkParamDefinition name="date2" type="date" multiplicity="1"/>
		<checkParamDefinition name="ignoreTime" type="boolean" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the value of date1 is after or equal the value of date2, after constructing a date value using the date2Mask -->
	<validationCheckDefinition name="dateIsAfterOrEqualIgnoreTime" method="dateIsAfterOrEqual" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date1" type="date" multiplicity="1"/>
		<checkParamDefinition name="date2" type="date" multiplicity="1"/>
		<checkParamDefinition name="ignoreTime" type="boolean" multiplicity="1"/>
	</validationCheckDefinition>


	<!-- Check if the value of date1 is after the value date2 -->
	<validationCheckDefinition name="dateIsAfter" method="dateIsAfter" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date1" type="date" multiplicity="1"/>
		<checkParamDefinition name="date2" type="date" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the value of date1 is after the value of date2, after constructing a date value using the date2Mask -->
	<validationCheckDefinition name="dateIsAfterStr" method="strDateIsAfter" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date1" type="date" multiplicity="1"/>
		<checkParamDefinition name="date2" type="string" multiplicity="1"/>
		<checkParamDefinition name="date2Mask" type="string" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the value of date1 is equals to the value of date2 -->
	<validationCheckDefinition name="dateIsEquals" method="dateIsEquals" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date1" type="date" multiplicity="1"/>
		<checkParamDefinition name="date2" type="date" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the value of date1 is equals to the value of date2 -->
	<validationCheckDefinition name="dateIsEqualsIgnoreTime" method="dateIsEquals" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date1" type="date" multiplicity="1"/>
		<checkParamDefinition name="date2" type="date" multiplicity="1"/>
		<checkParamDefinition name="ignoreTime" type="boolean" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the value of date1 is equals to the value of date2, after constructing a date value using the date2Mask -->
	<validationCheckDefinition name="dateIsEqualsStr" method="strDateIsEquals" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date1" type="date" multiplicity="1"/>
		<checkParamDefinition name="date2" type="string" multiplicity="1"/>
		<checkParamDefinition name="date2Mask" type="string" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the value of date is between the values of date1 & date2 -->
	<validationCheckDefinition name="dateIsBetween" method="dateIsBetween" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date" type="date" multiplicity="1"/>
		<checkParamDefinition name="date1" type="date" multiplicity="1"/>
		<checkParamDefinition name="date2" type="date" multiplicity="1"/>
	</validationCheckDefinition>

	<!-- Check if the value of date is between the values of date1 & date2, after constructing a date values using the date masks -->
	<validationCheckDefinition name="dateIsBetweenStr" method="dateIsBetweenStrDates" class="com.ness.fw.flower.util.validation.DateValidator">
		<checkParamDefinition name="date" type="date" multiplicity="1"/>
		<checkParamDefinition name="date1" type="string" multiplicity="1"/>
		<checkParamDefinition name="date1Mask" type="string" multiplicity="1"/>
		<checkParamDefinition name="date2" type="string" multiplicity="1"/>
		<checkParamDefinition name="date2Mask" type="string" multiplicity="1"/>
	</validationCheckDefinition>
	
	<!-- Check that a date is older than now -->
    <validationCheckDefinition name="dateIsBeforeCurrent" method="dateIsBeforeCurrent" class="com.ness.fw.flower.util.validation.DateValidator">
    	<checkParamDefinition name="field" type="date" multiplicity="1"/>
    </validationCheckDefinition>

	<!-- ================ -->
	<!-- Languages checks -->
	<!-- ================ -->

    <validationCheckDefinition name="HebrewValidation" method="isHebrew" class="com.ness.fw.flower.util.validation.LanguageValidator">
    	<checkParamDefinition name="field" type="string" multiplicity="1"/>
    </validationCheckDefinition>

	<validationCheckDefinition name="LatinValidation" method="isLatin" class="com.ness.fw.flower.util.validation.LanguageValidator">
    	<checkParamDefinition name="field" type="string" multiplicity="1"/>
    </validationCheckDefinition>


	<!-- ================ -->
	<!-- RegularExpressions checks -->
	<!-- ================ -->

    <validationCheckDefinition name="isMatchRegularExpression" method="checkExpression" class="com.ness.fw.flower.util.validation.RegulerExpressionValidator">
    	<checkParamDefinition name="description" type="string" multiplicity="1"/>
    	<checkParamDefinition name="regExPattern" type="string" multiplicity="1"/>
    	<checkParamDefinition name="regExFlags" type="integer" multiplicity="1"/>
    </validationCheckDefinition>

</root>