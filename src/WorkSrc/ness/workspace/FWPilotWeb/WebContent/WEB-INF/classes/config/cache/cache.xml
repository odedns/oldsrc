<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root SYSTEM "cache.dtd">
<root>
	<!-- Cache definition 
		 Attributes:
		 	type: Cache type - single, distributed or central
		     		
		    distributionManagerType: jgroups
		    		Relevant only for distributed or central cache type

		 	impl: Class implements Cache interface

		 	location: Cache location - local or remote
	-->
	<CacheDefinition name="cacheDef1" 
					 type="distributed" 
					 distributionManagerType="jgroups" 
					 implClass="com.ness.fw.cache.implementation.FwCacheImpl" 
					 location="local"/>
	
	<!-- Caches -->
	<!-- cache to definition -->
	<cache name="cache1" def="cacheDef1"/>
	
	<!-- Entities -->
	<!-- entity name to entity properties -->
	<!-- one always exist - default -->
	<!-- Entity attributes:
			name: entity name

			cache: cache name contains this entity

			notification: notification type - invalidate or fullDistribution
			IMPORTANT!!! notification type must be the same in all instances.

			loadOnStart: if true entity cache will filled on initialization

			size: Entity cache size: 
					if -1 cache is unlimited
					if 0 then no data will stored in this cache, always need to fetch the data

			algorithm: cache algorithm - LRU or FIFO - used only if size is limited

		    Fetcher type:
					datasource - local or remote depending on cache location 
		     		distributed - fetches data from another cache. Relevant only for cache type distributed or cantral
		     		complex - datasource & distributed
		     		
		    itemsComparatorClass:
		    		used for sorting items into a cache entity container.
		    		
		    compareOn:
		    		getAll - the items will sorted when getAll called. 
		    				 This option is better because cache items container should not maintain an items list.
		    		put - the items will sorted when put called.
		    		
	-->


	<!-- Agreement code tables -->

	<entity name="type" 
			cache="cache1" 
			notification="invalidate" 
			loadOnStart="false" 
			size="-1">
		<!-- Data loader -->
		<loader class="fwpilot.agreement.dao.TypeDAO" 
				needConectionProvider="true" 
				findByIdMethod="findById" 
				findAllMethod="findAll"/>
	</entity>

	<entity name="status" 
			cache="cache1" 
			notification="invalidate" 
			loadOnStart="false" 
			size="-1">
		<!-- Data loader -->
		<loader class="fwpilot.agreement.dao.StatusDAO" 
				needConectionProvider="true" 
				findByIdMethod="findById" 
				findAllMethod="findAll"/>
	</entity>

	<entity name="characteristic" 
			cache="cache1" 
			notification="invalidate" 
			loadOnStart="false" 
			size="-1">
		<!-- Data loader -->
		<loader class="fwpilot.agreement.dao.CharacteristicDAO" 
				needConectionProvider="true" 
				findByIdMethod="findById" 
				findAllMethod="findAll"/>
	</entity>

	<!-- Customer code tables -->

	<entity name="sex" 
			cache="cache1" 
			notification="invalidate" 
			loadOnStart="false" 
			size="-1">
		<!-- Data loader -->
		<loader class="fwpilot.customer.dao.SexDAO" 
				needConectionProvider="true" 
				findByIdMethod="findById" 
				findAllMethod="findAll"/>
	</entity>

	<entity name="relatedType" 
			cache="cache1" 
			notification="invalidate" 
			loadOnStart="false" 
			size="-1">
		<!-- Data loader -->
		<loader class="fwpilot.customer.dao.RelatedTypeStatusDAO" 
				needConectionProvider="true" 
				findByIdMethod="findById" 
				findAllMethod="findAll"/>
	</entity>

	<entity name="familyMemberStatus" 
			cache="cache1" 
			notification="invalidate" 
			loadOnStart="false" 
			size="-1">
		<!-- Data loader -->
		<loader class="fwpilot.customer.dao.FamilyMemberStatusDAO" 
				needConectionProvider="true" 
				findByIdMethod="findById" 
				findAllMethod="findAll"/>
	</entity>
	
		<entity name="profession" 
			cache="cache1" 
			notification="invalidate" 
			loadOnStart="false" 
			size="-1">
		<!-- Data loader -->
		<loader class="fwpilot.customer.dao.ProfessionDAO" 
				needConectionProvider="true" 
				findByIdMethod="findById" 
				findAllMethod="findAll"/>
	</entity>
	
	

</root>
