#ifndef _OMG_SECURITYLEVEL2_IDL_
#define _OMG_SECURITYLEVEL2_IDL_

#pragma IT_SystemSpecification

#include <omg/SecurityLevel1.idl>

#pragma IT_BeginCBESpecific AllJava "@@\
@module SecurityLevel2=org.omg"

#pragma prefix "omg.org"

module SecurityLevel2 {

# pragma version SecurityLevel2 1.7

    // Forward declaration of interfaces
    interface PrincipalAuthenticator;
    interface Credentials;
    local interface Current;

    // Interface PrincipalAuthenticator
    interface PrincipalAuthenticator {  // Locality Constrained
    #   pragma version PrincipalAuthenticator 1.5
    
        Security::AuthenticationMethodList
        get_supported_authen_methods(
            in Security::MechanismType mechanism
        );

        Security::AuthenticationStatus authenticate (
            in Security::AuthenticationMethod method,
            in Security::MechanismType mechanism,
            in Security::SecurityName security_name,
            in any auth_data,
            in Security::AttributeList privileges,
            out Credentials creds,
            out any continuation_data,
            out any auth_specific_data
        );

        Security::AuthenticationStatus continue_authentication (
            in any response_data,
            in Credentials creds,
            out any continuation_data,
            out any auth_specific_data
        );
    };

    // Interface Credentials
    interface Credentials {     // Locality Constrained
    # pragma version Credentials 1.7

        Credentials copy ();

        void destroy();

        readonly attribute Security::InvocationCredentialsType credentials_type;
        readonly attribute Security::AuthenticationStatus authentication_state;
        readonly attribute Security::MechanismType mechanism;

        attribute Security::AssociationOptions accepting_options_supported;

        attribute Security::AssociationOptions accepting_options_required;

        attribute Security::AssociationOptions invocation_options_supported;

        attribute Security::AssociationOptions invocation_options_required;

        boolean get_security_feature(
            in Security::CommunicationDirection direction,
            in Security::SecurityFeature feature
        );

        boolean set_attributes (
            in Security::AttributeList requested_attributes,
            out Security::AttributeList actual_attributes
        );

        Security::AttributeList get_attributes (
            in Security::AttributeTypeList attributes
        );

        boolean is_valid (
            out Security::UtcT expiry_time
        );
    
        boolean refresh(
            in any refresh_data
        );
    };

    typedef sequence <Credentials> CredentialsList;

    interface ReceivedCredentials : Credentials { // Locality Constrained

        # pragma version ReceivedCredentials 1.5
        
        readonly attribute Credentials accepting_credentials;

        readonly attribute Security::AssociationOptions association_options_used;

        readonly attribute Security::DelegationState delegation_state;

        readonly attribute Security::DelegationMode delegation_mode;
    };

    interface TargetCredentials : Credentials { // Locality Constrained
        
        readonly attribute Credentials initiating_credentials;
        
        readonly attribute Security::AssociationOptions association_options_used;
    };

    // RequiredRights Interface

    interface RequiredRights{
        void get_required_rights(
            in Object obj,
            in CORBA::Identifier operation_name,
            in CORBA::RepositoryId interface_name,
            out Security::RightsList rights,
            out Security::RightsCombinator rights_combinator
        );

        void set_required_rights(
            in CORBA::Identifier operation_name,
            in CORBA::RepositoryId interface_name,
            in Security::RightsList rights,
            in Security::RightsCombinator rights_combinator
        );
    };

    // interface audit channel
    interface AuditChannel { // Locality Constrained

        void audit_write (
            in Security::AuditEventType event_type,
            in CredentialsList creds,
            in Security::UtcT time,
            in Security::SelectorValueList descriptors,
            in Security::Opaque event_specific_data
        );

        readonly attribute Security::AuditChannelId audit_channel_id;
    };

    // interface for Audit Decision

    interface AuditDecision { // Locality Constrained

        boolean audit_needed (
            in Security::AuditEventType event_type,
            in Security::SelectorValueList value_list
        );
        
        readonly attribute AuditChannel audit_channel;
    };

    interface AccessDecision { // Locality Constrained

        boolean access_allowed (
            in SecurityLevel2::CredentialsList cred_list,
            in Object target,
            in CORBA::Identifier operation_name,
            in CORBA::Identifier target_interface_name
        );
    };

    // Policy interfaces to control bindings

    interface QOPPolicy : CORBA::Policy { // Locality Constrained
        readonly attribute Security::QOP qop;
    };

    interface MechanismPolicy : CORBA::Policy {// Locality Constrained
        readonly attribute Security::MechanismTypeList mechanisms;
    };

    interface InvocationCredentialsPolicy : CORBA::Policy {
        // Locality Constrained
        readonly attribute CredentialsList creds;
    };

    interface EstablishTrustPolicy : CORBA::Policy { // Locality Constrained
        readonly attribute Security::EstablishTrust trust;
    };

    interface DelegationDirectivePolicy : CORBA::Policy {
        // Locality Constrained
        readonly attribute Security::DelegationDirective
        delegation_directive;
    };

    interface SecurityManager {
        // Process/Capsule/ORB Instance specific operations

        readonly attribute Security::MechandOptionsList supported_mechanisms;
    
        readonly attribute CredentialsList own_credentials;
    
        readonly attribute RequiredRights required_rights_object;

        readonly attribute PrincipalAuthenticator principal_authenticator;

        readonly attribute AccessDecision access_decision;

        readonly attribute AuditDecision audit_decision;

        TargetCredentials get_target_credentials (
            in Object obj_ref
        );

        void remove_own_credentials(
            in Credentials creds
        );

        CORBA::Policy get_security_policy (
            in CORBA::PolicyType policy_type
        );
    };


    // Interface Current derived from SecurityLevel1::Current providing
    // additional operations on Current at this security level.
    // This is implemented by the ORB

    local interface Current : SecurityLevel1::Current { // Locality Constrained
    # pragma version Current 1.7
        // Thread specific

        readonly attribute ReceivedCredentials received_credentials;
    };

};

#endif  /*!_OMG_SECURITYLEVEL2_IDL_*/
