#ifndef _OMG_MESSAGING_IDL_
#define _OMG_MESSAGING_IDL_

//
//	Copyright (c) 1999 IONA Technologies PLC. All Rights Reserved.
//
//   THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF IONA Technologies PLC
//	    The copyright notice above does not evidence any
//	    actual or intended publication of such source code.
//

#pragma IT_SystemSpecification

#include <omg/orb.idl>
#include <omg/TimeBase.idl>
#include <omg/IOP.idl>

// SunOS and Win32 #define TRANSPARENT in system header files.
//
#pragma IT_BeginCBESpecific Cplusplus	"@@\
@undef TRANSPARENT			@@\
"

#pragma IT_BeginCBESpecific AllJava                             "@@\
@module Messaging=org.omg"

#pragma prefix "omg.org"

module Messaging
{
    //
    // Messaging Quality of Service
    //

    typedef short RebindMode;

    const RebindMode TRANSPARENT = 0;
    const RebindMode NO_REBIND = 1;
    const RebindMode NO_RECONNECT = 2;


    typedef short SyncScope;

    const SyncScope SYNC_NONE = 0;
    const SyncScope SYNC_WITH_TRANSPORT = 1;
    const SyncScope SYNC_WITH_SERVER = 2;
    const SyncScope SYNC_WITH_TARGET = 3;

    typedef short RoutingType;

    const RoutingType ROUTE_NONE = 0;
    const RoutingType ROUTE_FORWARD = 1;
    const RoutingType ROUTE_STORE_AND_FORWARD = 2;

    struct RoutingTypeRange
    {
	RoutingType min;
	RoutingType max;
    };


    // See issue 2352
    // typedef TimeBase::TimeT Timeout;


    typedef short Priority;

    struct PriorityRange
    {
	Priority min;
	Priority max;
    };


    typedef unsigned short Ordering;

    const Ordering ORDER_ANY      = 0x01;
    const Ordering ORDER_TEMPORAL = 0x02;
    const Ordering ORDER_PRIORITY = 0x04;
    const Ordering ORDER_DEADLINE = 0x08;


    //
    // PolicyType constants
    //

    const CORBA::PolicyType REBIND_POLICY_TYPE               = 23;
    const CORBA::PolicyType SYNC_SCOPE_POLICY_TYPE           = 24;
    const CORBA::PolicyType REQUEST_PRIORITY_POLICY_TYPE     = 25;
    const CORBA::PolicyType REPLY_PRIORITY_POLICY_TYPE       = 26;
    const CORBA::PolicyType REQUEST_START_TIME_POLICY_TYPE   = 27;
    const CORBA::PolicyType REQUEST_END_TIME_POLICY_TYPE     = 28;
    const CORBA::PolicyType REPLY_START_TIME_POLICY_TYPE     = 29;
    const CORBA::PolicyType REPLY_END_TIME_POLICY_TYPE       = 30;
    const CORBA::PolicyType RELATIVE_REQ_TIMEOUT_POLICY_TYPE = 31;
    const CORBA::PolicyType RELATIVE_RT_TIMEOUT_POLICY_TYPE  = 32;
    const CORBA::PolicyType ROUTING_POLICY_TYPE              = 33;
    const CORBA::PolicyType MAX_HOPS_POLICY_TYPE             = 34;
    const CORBA::PolicyType QUEUE_ORDER_POLICY_TYPE          = 35;


    //
    // Locally-Constrained Policy Objects
    //

    // Rebind Policy (default = TRANSPARENT)

    local interface RebindPolicy : CORBA::Policy
    {
	readonly attribute RebindMode rebind_mode;
    };


    // Synchronization Policy (default = SYNC_WITH_TRANSPORT)

    local interface SyncScopePolicy : CORBA::Policy
    {
	readonly attribute SyncScope synchronization;
    };


    // Priority Policies

    local interface RequestPriorityPolicy : CORBA::Policy
    {
	readonly attribute PriorityRange priority_range;
    };

    local interface ReplyPriorityPolicy : CORBA::Policy
    {
	readonly attribute PriorityRange priority_range;
    };


    // Timeout Policies

    local interface RequestStartTimePolicy : CORBA::Policy
    {
	readonly attribute TimeBase::UtcT start_time;
    };

    local interface RequestEndTimePolicy : CORBA::Policy
    {
	readonly attribute TimeBase::UtcT end_time;
    };

    local interface ReplyStartTimePolicy : CORBA::Policy
    {
	readonly attribute TimeBase::UtcT start_time;
    };

    local interface ReplyEndTimePolicy : CORBA::Policy
    {
	readonly attribute TimeBase::UtcT end_time;
    };

    local interface RelativeRequestTimeoutPolicy : CORBA::Policy
    {
	readonly attribute TimeBase::TimeT relative_expiry;
    };

    local interface RelativeRoundtripTimeoutPolicy : CORBA::Policy
    {
	readonly attribute TimeBase::TimeT relative_expiry;
    };


    // Routing Policy

    local interface RoutingPolicy : CORBA::Policy
    {
	readonly attribute RoutingTypeRange routing_range;
    };


    // Max router hops Policy

    local interface MaxHopsPolicy : CORBA::Policy
    {
	readonly attribute unsigned short max_hops;
    };


    // Router Delivery-ordering Policy (default = ORDER_TEMPORAL)

    local interface QueueOrderPolicy : CORBA::Policy
    {
	readonly attribute Ordering allowed_orders;
    };

#pragma IT_BeginCBESpecific AllJava                                     "@@\
@switch +xHelpers +xHolders"

    //
    // Propagation of QoS Policies
    //

    struct PolicyValue
    {
	CORBA::PolicyType ptype;
	sequence<octet>   pvalue;
    };

    typedef sequence<PolicyValue> PolicyValueSeq;

    const IOP::ComponentId TAG_POLICIES        = 2;
    const IOP::ServiceId   INVOCATION_POLICIES = 2;


    //
    // Exception Delivery in the Callback Model
    //

    valuetype ExceptionHolder
    {
	private boolean         is_system_exception;
	private boolean         byte_order;
	private sequence<octet> marshaled_exception;

	any
	get_exception();

	any
	get_exception_with_list(
	    in CORBA::ExceptionList exc_list
	);
    };


    //
    // Base interface for the Callback model
    //

    interface ReplyHandler
    {};

#ifndef _JAVA_
    //
    // Base value for the Polling model
    //

    valuetype Poller supports CORBA::Pollable
    {
	readonly attribute Object  operation_target;
	readonly attribute string  operation_name;
	attribute ReplyHandler     associated_handler;
	readonly attribute boolean is_from_poller;
    };

#endif

};


#endif  /*!_OMG_MESSAGING_IDL_*/

