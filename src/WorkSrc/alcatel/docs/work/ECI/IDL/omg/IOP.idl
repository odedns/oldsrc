#ifndef _OMG_IOP_IDL_
#define _OMG_IOP_IDL_

//
//	Copyright (c) 1999 IONA Technologies PLC. All Rights Reserved.
//
//   THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF IONA Technologies PLC
//	    The copyright notice above does not evidence any
//	    actual or intended publication of such source code.
//

#pragma IT_SystemSpecification

#include <omg/orb.idl>

#pragma IT_BeginCBESpecific AllJava                             "@@\
@module IOP=org.omg"

#pragma prefix "omg.org"

module IOP
{
    // from CORBA V2.1 (Pre-release) June 1997, page  10-16 thru 10-22

    //
    // Standard Protocol Profile tag values
    //

    typedef unsigned long ProfileId;

    const ProfileId TAG_INTERNET_IOP = 0;
    const ProfileId TAG_MULTIPLE_COMPONENTS = 1;

    struct TaggedProfile
    {
	ProfileId tag;
	sequence <octet> profile_data;
    };

    //
    // an Interoperable Object Reference is a sequence of
    // object-specific protocol profiles, plus a type ID.
    //

    struct IOR 
    {
	string type_id;
	sequence <TaggedProfile> profiles;
    };

    //
    // Standard way of representing multicomponent profiles.
    // This would be encapsulated in a TaggedProfile.
    //

    typedef unsigned long ComponentId;

    struct TaggedComponent
    {
	ComponentId tag;
	sequence <octet> component_data;
    };

    typedef sequence <TaggedComponent> TaggedComponentSeq;
    typedef sequence <TaggedComponent> MultipleComponentProfile;

    //
    // Component tag IDs (as of CORBA 2.3.1)
    //

    const ComponentId TAG_ORB_TYPE                 = 0;
    const ComponentId TAG_CODE_SETS                = 1;
    const ComponentId TAG_POLICIES                 = 2;
    const ComponentId TAG_ALTERNATE_IIOP_ADDRESS   = 3;
    const ComponentId TAG_COMPLETE_OBJECT_KEY      = 5;
    const ComponentId TAG_ENDPOINT_ID_POSITION     = 6;
    const ComponentId TAG_OBJECT_KEY               = 10; // deprecated
    const ComponentId TAG_ENDPOINT_ID              = 11; // deprecated
    const ComponentId TAG_LOCATION_POLICY          = 12;
    const ComponentId TAG_ASSOCIATION_OPTIONS      = 13;
    const ComponentId TAG_SEC_NAME                 = 14;
    const ComponentId TAG_SPKM_1_SEC_MECH          = 15;
    const ComponentId TAG_SPKM_2_SEC_MECH          = 16;
    const ComponentId TAG_KerberosV5_SEC_MECH      = 17;
    const ComponentId TAG_CSI_ECMA_Secret_SEC_MECH = 18;
    const ComponentId TAG_CSI_ECMA_Hybrid_SEC_MECH = 19;
    const ComponentId TAG_SSL_SEC_TRANS            = 20;
    const ComponentId TAG_CSI_ECMA_Public_SEC_MECH = 21;
    const ComponentId TAG_GENERIC_SEC_MECH         = 22;
    const ComponentId TAG_JAVA_CODEBASE            = 25;

    // DCE ESIOP (as of CORBA 2.3.1)
    //
    const ComponentId TAG_DCE_STRING_BINDING       = 100;
    const ComponentId TAG_DCE_BINDING_NAME         = 101;
    const ComponentId TAG_DCE_NO_PIPES             = 102;
    const ComponentId TAG_DCE_SEC_MECH             = 103; // Security Service


    //
    // Service Contexts
    //

    typedef unsigned long ServiceId;

    struct ServiceContext
    {
	ServiceId context_id;
	sequence <octet> context_data;
    };

    typedef sequence <ServiceContext> ServiceContextList;

    // Service Context IDs (as of CORBA 2.3.1)
    //
    const ServiceId TransactionService = 0;
    const ServiceId CodeSets = 1;

    // DCOM bridge
    const ServiceId ChainBypassCheck = 2;
    const ServiceId ChainBypassInfo = 3;
    const ServiceId LogicalThreadId = 4;

    // Bi-directional IIOP
    const ServiceId BI_DIR_IIOP = 5;

    // Object by Value
    const ServiceId SendingContextRuntime = 6;

    // Messaging
    const ServiceId INVOCATION_POLICIES = 7;
    const ServiceId FORWARDED_IDENTITY = 8;

    // Java Language Throwable Service
    const ServiceId UnknownExceptionInfo = 9;

    const ServiceId RTCorbaPriority = 10;
    const ServiceId RTCorbaPriorityRange = 11;
    const ServiceId ExceptionDetailMessage = 14;

    // CSIV2 service
    const ServiceId SecurityAttributeService = 15;

    struct EndpointIdPositionComponent
    {
	unsigned short begin;
	unsigned short end;
    };


    // IDL does not support octet constants
    // #define LOCATE_NEVER = 0
    // #define LOCATE_OBJECT = 1
    // #define LOCATE_OPERATION = 2
    // #define LOCATE_ALWAYS = 3

    // From the Portable Interceptor Submission
    //
    local interface Codec 
    {
	exception InvalidTypeForEncoding {};
	exception FormatMismatch {};
	exception TypeMismatch {};

	CORBA::OctetSeq 
	encode(
	    in any data
	) raises (InvalidTypeForEncoding);

	any 
	decode(
	    in CORBA::OctetSeq data
	) raises (FormatMismatch);

	CORBA::OctetSeq 
	encode_value(
	    in any data
	) raises (InvalidTypeForEncoding);

	any 
        decode_value(
	    in CORBA::OctetSeq data,
	    in CORBA::TypeCode tc
	) raises (FormatMismatch, TypeMismatch);
    };

    typedef short EncodingFormat;
    const EncodingFormat ENCODING_CDR_ENCAPS = 0;

    struct Encoding 
    {
	EncodingFormat format;
	octet          major_version;
	octet          minor_version;
    };

    local interface CodecFactory 
    {
	exception UnknownEncoding {};

	Codec 
	create_codec(
	    in Encoding enc
	) raises (UnknownEncoding);
    };
};


#endif  /*!_OMG_IOP_IDL_*/

