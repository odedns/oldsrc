#ifndef _CORBA_POA_IDL_
#define _CORBA_POA_IDL_

//
//	Copyright (c) 1998 IONA Technologies PLC. All Rights Reserved.
//
//   THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF IONA Technologies PLC
//	    The copyright notice above does not evidence any
//	    actual or intened publication of such source code.
//

#pragma IT_SystemSpecification

#include <omg/orb.idl>

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch -xStreamables -xProxies -xDispatch -xAnyFuncs"

#pragma IT_BeginCBESpecific POACxx					"@@\
@switch -xStreamables -xProxies -xDispatch -xAnyFuncs -xPOAInterfaces"

#pragma IT_BeginCBESpecific AllJava                             "@@\
@module PortableServer=org.omg"

#pragma prefix "omg.org"

module PortableServer
{
    interface POA;
    local interface Current;

    typedef sequence<POA> POAList;

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch +xStreamables +xAnyFuncs"

    typedef sequence<octet> ObjectId;

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch -xStreamables -xAnyFuncs"

    native Servant;
#pragma IT_BeginNativeDecl Servant Java            "@@\
@declare org.omg.PortableServer.Servant"

#pragma IT_BeginNativeDecl Servant Cplusplus				"@@\
    class IT_POA_API ServantBase					@@\
    {									@@\
      public:								@@\
        virtual ~ServantBase();						@@\
									@@\
        virtual POA_ptr							@@\
	_default_POA();							@@\
									@@\
        ART_DECL_ABSTRACT_LOCAL_NARROW					@@\
									@@\
        typedef void (*_IT_DispatcherPtr)(				@@\
	    ServantBase*        servant,				@@\
	    CORBA::IT_ServerRequest_ptr request,			@@\
	    CORBA::CompletionStatus &status				@@\
	);								@@\
									@@\
        virtual void							@@\
	_dispatch(							@@\
	    CORBA::IT_ServerRequest_ptr request				@@\
	);								@@\
									@@\
        virtual _IT_DispatcherPtr					@@\
	_lookup_dispatcher(						@@\
            const char* operation                                       @@\
	);								@@\
									@@\
        virtual CORBA::InterfaceDef_ptr					@@\
        _get_interface();						@@\
									@@\
        virtual CORBA::Boolean						@@\
        _is_a(								@@\
            const char* id						@@\
        );								@@\
									@@\
        virtual CORBA::Boolean						@@\
        _it_is_a(							@@\
            const IT_FWString& id					@@\
        );								@@\
									@@\
        virtual CORBA::Boolean						@@\
        _non_existent();						@@\
									@@\
        static void							@@\
        _is_a_dispatch(							@@\
            PortableServer::ServantBase* _servant,			@@\
            CORBA::IT_ServerRequest_ptr _request,			@@\
            CORBA::CompletionStatus &_status				@@\
        );								@@\
									@@\
        virtual void							@@\
        _add_ref();                                                     @@\
									@@\
        virtual void							@@\
        _remove_ref();                                                  @@\
									@@\
        static void							@@\
        _non_existent_dispatch(						@@\
            PortableServer::ServantBase* _servant,			@@\
            CORBA::IT_ServerRequest_ptr _request,			@@\
            CORBA::CompletionStatus &_status				@@\
        );								@@\
									@@\
        static void							@@\
        _get_interface_dispatch(					@@\
            PortableServer::ServantBase* _servant,			@@\
            CORBA::IT_ServerRequest_ptr _request,			@@\
            CORBA::CompletionStatus &_status				@@\
        );								@@\
									@@\
        virtual CORBA::RepositoryId					@@\
        _primary_interface(						@@\
            const ObjectId& oid,					@@\
            POA_ptr         poa						@@\
        ) = 0;								@@\
									@@\
      protected:							@@\
        CORBA::Object_ptr						@@\
        _this_impl(							@@\
            const char* type_id						@@\
        );								@@\
									@@\
        ServantBase();							@@\
        ServantBase(							@@\
            const ServantBase&						@@\
        );								@@\
									@@\
        ServantBase&							@@\
	operator=(							@@\
	    const ServantBase&						@@\
	);								@@\
                                                                        @@\
      private:                                                          @@\
        IT_DUMMY_DATA_MEMBER                                            @@\
    };									@@\
    typedef ServantBase* Servant;					@@\
    typedef IT_Cxx_SimpleVarT<ServantBase> ServantBase_var;             @@\
									@@\
@in PortableServer::Servant						@@\
@inout PortableServer::Servant&						@@\
@out PortableServer::Servant&						@@\
@return PortableServer::Servant"

#pragma IT_BeginCBESpecific Cplusplus                                   "@@\
    class IT_POA_API RefCountServantBase : public virtual ServantBase   @@\
    {									@@\
      public:								@@\
	~RefCountServantBase();                                         @@\
									@@\
        virtual void							@@\
        _add_ref();                                                     @@\
									@@\
        virtual void							@@\
        _remove_ref();                                                  @@\
									@@\
      protected:							@@\
	RefCountServantBase();                                          @@\
	RefCountServantBase(                                            @@\
	    const RefCountServantBase&                                  @@\
	);                                                              @@\
									@@\
	RefCountServantBase&                                            @@\
	operator=(                                                      @@\
	    const RefCountServantBase&                                  @@\
	);                                                              @@\
									@@\
      private:								@@\
	CORBA::ULong m_ref_count;                                       @@\
    };"

#pragma IT_BeginCBESpecific Cplusplus                                   "@@\
    class IT_POA_API ValueRefCountBase :                                @@\
        public virtual CORBA::DefaultValueRefCountBase,                 @@\
        public virtual ServantBase                                      @@\
    {									@@\
      public:								@@\
	virtual void _add_ref();					@@\
	virtual void _remove_ref();					@@\
									@@\
      protected:							@@\
	ValueRefCountBase();					        @@\
	ValueRefCountBase(const ValueRefCountBase& vb);	                @@\
    };"

#pragma IT_BeginCBESpecific Cplusplus					"@@\
    class IT_POA_API DynamicImplementation : public virtual ServantBase @@\
    {									@@\
      public:								@@\
        CORBA::Object_ptr						@@\
        _this();							@@\
									@@\
        virtual void							@@\
        invoke(								@@\
            CORBA::ServerRequest_ptr request				@@\
        ) = 0;								@@\
									@@\
        virtual CORBA::RepositoryId					@@\
        _primary_interface(						@@\
            const ObjectId& oid,					@@\
            POA_ptr         poa						@@\
        ) = 0;								@@\
									@@\
      private:								@@\
									@@\
        void								@@\
        _dispatch(							@@\
            CORBA::IT_ServerRequest_ptr request				@@\
        );								@@\
									@@\
        _IT_DispatcherPtr						@@\
	_lookup_dispatcher(						@@\
            const char* operation                                       @@\
	);								@@\
									@@\
        virtual void*							@@\
        _local_narrow(							@@\
            const char * tag						@@\
        );								@@\
    };									@@\
									@@\
    IT_POA_API IT_NAMESPACE_STATIC char*				@@\
    ObjectId_to_string(							@@\
	const ObjectId&							@@\
    );									@@\
									@@\
    IT_POA_API IT_NAMESPACE_STATIC CORBA::WChar*			@@\
    ObjectId_to_wstring(						@@\
        const ObjectId&						        @@\
    );							  	        @@\
									@@\
    IT_POA_API IT_NAMESPACE_STATIC ObjectId*				@@\
    string_to_ObjectId(							@@\
	const char*							@@\
    );									@@\
									@@\
    IT_POA_API IT_NAMESPACE_STATIC ObjectId*				@@\
    wstring_to_ObjectId(						@@\
         const CORBA::WChar*						@@\
    );"

    //
    // ForwardRequest needs Streamable and AnyFunc generated
    //
#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch +xStreamables +xAnyFuncs"

    exception ForwardRequest
    {
        Object forward_reference;
    };

    //
    // Policy interfaces
    //

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch +xStreamables +xAnyFuncs"

    const CORBA::PolicyType THREAD_POLICY_ID = 16;

    enum ThreadPolicyValue
    {
        ORB_CTRL_MODEL,
        SINGLE_THREAD_MODEL
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch -xStreamables -xAnyFuncs"

    interface ThreadPolicy : CORBA::Policy
    {
        readonly attribute ThreadPolicyValue value;
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch +xStreamables +xAnyFuncs"

    const CORBA::PolicyType LIFESPAN_POLICY_ID = 17;

    enum LifespanPolicyValue
    {
        TRANSIENT,
        PERSISTENT
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch -xStreamables -xAnyFuncs"

    interface LifespanPolicy : CORBA::Policy
    {
        readonly attribute LifespanPolicyValue value;
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch +xStreamables +xAnyFuncs"

    const CORBA::PolicyType ID_UNIQUENESS_POLICY_ID = 18;

    enum IdUniquenessPolicyValue
    {
        UNIQUE_ID,
        MULTIPLE_ID
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch -xStreamables -xAnyFuncs"

    interface IdUniquenessPolicy : CORBA::Policy
    {
        readonly attribute IdUniquenessPolicyValue value;
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch +xStreamables +xAnyFuncs"

    const CORBA::PolicyType ID_ASSIGNMENT_POLICY_ID = 19;

    enum IdAssignmentPolicyValue
    {
        USER_ID,
        SYSTEM_ID
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch -xStreamables -xAnyFuncs"

    interface IdAssignmentPolicy : CORBA::Policy
    {
        readonly attribute IdAssignmentPolicyValue value;
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch +xStreamables +xAnyFuncs"

    const CORBA::PolicyType IMPLICIT_ACTIVATION_POLICY_ID = 20;

    enum ImplicitActivationPolicyValue
    {
        IMPLICIT_ACTIVATION,
        NO_IMPLICIT_ACTIVATION
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch -xStreamables -xAnyFuncs"

    interface ImplicitActivationPolicy : CORBA::Policy
    {
        readonly attribute ImplicitActivationPolicyValue value;
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch +xStreamables +xAnyFuncs"

    const CORBA::PolicyType SERVANT_RETENTION_POLICY_ID = 21;

    enum ServantRetentionPolicyValue
    {
        RETAIN,
        NON_RETAIN
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch -xStreamables -xAnyFuncs"

    interface ServantRetentionPolicy : CORBA::Policy
    {
        readonly attribute ServantRetentionPolicyValue value;
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch +xStreamables +xAnyFuncs"

    const CORBA::PolicyType REQUEST_PROCESSING_POLICY_ID = 22;

    enum RequestProcessingPolicyValue
    {
        USE_ACTIVE_OBJECT_MAP_ONLY,
        USE_DEFAULT_SERVANT,
        USE_SERVANT_MANAGER
    };

#pragma IT_BeginCBESpecific Cplusplus					"@@\
@switch -xStreamables -xAnyFuncs"

    interface RequestProcessingPolicy : CORBA::Policy
    {
        readonly attribute RequestProcessingPolicyValue value;
    };

    //
    // POAManager interface
    //

    interface POAManager
    {
        exception AdapterInactive {};

        void
	activate() raises(AdapterInactive);

        void
	hold_requests(
	    in boolean wait_for_completion
	) raises(AdapterInactive);

        void
	discard_requests(
	    in boolean wait_for_completion
	) raises(AdapterInactive);

        void
	deactivate(
	    in boolean etherealize_objects,
	    in boolean wait_for_completion
	) raises(AdapterInactive);

	enum State 
	{
	    HOLDING,
	    ACTIVE,
	    DISCARDING,
	    INACTIVE
	};

	State
	get_state();
    };

#pragma IT_BeginCBESpecific Cplusplus    				"@@\
@switch +xHandWrittenProxies"

#pragma IT_BeginCBESpecific POACxx					"@@\
@switch -xColocPOA +xPOAInterfaces"
    //
    // AdapterActivator interface
    //

#pragma IT_BeginCBESpecific AllJava                      "@@\
@switch -xPOAInterfaces"

    interface AdapterActivator
    {
        boolean
	unknown_adapter(
	    in POA    parent,
	    in string name
	);
    };

    interface ServantManager
    {
	// empty
    };

    interface ServantActivator : ServantManager
    {
         Servant
	 incarnate(
	     in ObjectId oid,
	     in POA      adapter
	 ) raises (ForwardRequest);

        void
	etherealize(
	    in ObjectId oid,
	    in POA      adapter,
	    in Servant  serv,
	    in boolean  cleanup_in_progress,
	    in boolean  remaining_activations
	);
    };

    interface ServantLocator : ServantManager
    {

#pragma IT_BeginCBESpecific Java                                 "@@\
@switch -xHolders"

        native Cookie;

#pragma IT_BeginNativeDecl Cookie Java                           "@@\
@declare java.lang.Object"

#pragma IT_BeginCBESpecific Java                                 "@@\
@switch +xHolders"

#pragma IT_BeginNativeDecl Cookie Cplusplus				"@@\
        typedef void* Cookie;						@@\
@in PortableServer::ServantLocator::Cookie				@@\
@inout PortableServer::ServantLocator::Cookie&				@@\
@out PortableServer::ServantLocator::Cookie&				@@\
@return PortableServer::ServantLocator::Cookie"

        Servant
        preinvoke(
	    in ObjectId          oid,
	    in POA               adapter,
	    in CORBA::Identifier operation,
	    out Cookie           the_cookie
	) raises (ForwardRequest);

        void
	postinvoke(
	    in ObjectId          oid,
	    in POA               adapter,
	    in CORBA::Identifier operation,
	    in Cookie            the_cookie,
	    in Servant           the_servant
	);
    };


#pragma IT_BeginCBESpecific Cplusplus					"@@\
@include <orbix_sys/poa_coloc_base.h>                                   @@\
@include <orbix_sys/servant_manager_proxy.h>"

#pragma IT_BeginCBESpecific Cplusplus    				"@@\
@switch -xHandWrittenProxies"

#pragma IT_BeginCBESpecific POACxx					"@@\
@switch -xPOAInterfaces"

#pragma IT_BeginCBESpecific AllJava                      "@@\
@switch +xPOAInterfaces"

    //
    // POA interface
    //

    interface POA
    {
        exception AdapterAlreadyExists {};
        exception AdapterInactive {};
        exception AdapterNonExistent {};
        exception InvalidPolicy
	{
	    unsigned short index;
	};
        exception NoServant {};
        exception ObjectAlreadyActive {};
        exception ObjectNotActive {};
        exception ServantAlreadyActive {};
        exception ServantNotActive {};
        exception WrongAdapter {};
        exception WrongPolicy {};

        //
        // POA creation and destruction
        //

        POA
	create_POA(
	    in string            adapter_name,
	    in POAManager        a_POAManager,
	    in CORBA::PolicyList policies
	) raises (AdapterAlreadyExists, InvalidPolicy);

        POA
	find_POA(
	    in string  adapter_name,
	    in boolean activate_it
	) raises (AdapterNonExistent);

        void
	destroy(
	    in boolean etherealize_objects,
	    in boolean wait_for_completion
	);

        //
        // Factories for Policy objects
        //

        ThreadPolicy
        create_thread_policy(
	    in ThreadPolicyValue value
	);
        LifespanPolicy
        create_lifespan_policy(
	    in LifespanPolicyValue value
	);
        IdUniquenessPolicy
        create_id_uniqueness_policy(
	    in IdUniquenessPolicyValue value
	);
        IdAssignmentPolicy
        create_id_assignment_policy(
	    in IdAssignmentPolicyValue value
	);
        ImplicitActivationPolicy
        create_implicit_activation_policy(
	    in ImplicitActivationPolicyValue value
	);
        ServantRetentionPolicy
        create_servant_retention_policy(
	    in ServantRetentionPolicyValue value
	);
        RequestProcessingPolicy
        create_request_processing_policy(
	    in RequestProcessingPolicyValue value
	);

        //
        // POA attributes
        //

        readonly attribute string     the_name;
        readonly attribute POA        the_parent;
        readonly attribute POAManager the_POAManager;
	readonly attribute POAList    the_children;
        attribute AdapterActivator    the_activator;


        //
        // Servant Manager registration:
        //

        ServantManager
	get_servant_manager() raises (WrongPolicy);

        void
	set_servant_manager(
	    in ServantManager imgr
	) raises (WrongPolicy);

        //
        // operations for the USE_DEFAULT_SERVANT policy
        //

        Servant
	get_servant() raises (NoServant, WrongPolicy);

        void
	set_servant(
	    in Servant p_servant
	) raises (WrongPolicy);

        //
        // object activation and deactivation
        //

        ObjectId
	activate_object(
	    in Servant p_servant
	) raises (ServantAlreadyActive, WrongPolicy);

	void
	activate_object_with_id(
            in ObjectId id,
            in Servant  p_servant
	) raises (ServantAlreadyActive, ObjectAlreadyActive, WrongPolicy);

        void
	deactivate_object(
	    in ObjectId oid
	) raises (ObjectNotActive, WrongPolicy);

        //
        // reference creation operations
        //

        Object
	create_reference (
	    in CORBA::RepositoryId intf
	) raises (WrongPolicy);

        Object
	create_reference_with_id (
	    in ObjectId            oid,
	    in CORBA::RepositoryId intf
	);


        //
        // Identity mapping operations:
        //

        ObjectId
	servant_to_id(
	    in Servant p_servant
	) raises (ServantNotActive, WrongPolicy);

        Object
	servant_to_reference(
	    in Servant p_servant
	) raises (ServantNotActive, WrongPolicy);

        Servant
	reference_to_servant(
	    in Object reference
	) raises (ObjectNotActive, WrongPolicy);

        ObjectId
	reference_to_id(
	    in Object reference
	) raises (WrongAdapter, WrongPolicy);

        Servant
	id_to_servant(
	    in ObjectId oid
	) raises (ObjectNotActive, WrongPolicy);

        Object
	id_to_reference(
	    in ObjectId oid
	) raises (ObjectNotActive, WrongPolicy);


        readonly attribute CORBA::OctetSeq id;

    };


    //
    // Current interface
    //

    local interface Current : CORBA::Current
    {
        exception NoContext {};

        POA
	get_POA() raises (NoContext);

        ObjectId
	get_object_id() raises (NoContext);
    };
};

#endif  /*!_CORBA_POA_IDL_*/
