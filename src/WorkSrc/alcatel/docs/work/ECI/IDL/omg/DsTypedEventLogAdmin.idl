#ifndef _OMG_DS_TYPED_EVENT_LOG_ADMIN_IDL_
#define _OMG_DS_TYPED_EVENT_LOG_ADMIN_IDL_

//
//	Copyright (c) 1999 IONA Technologies PLC. All Rights Reserved.
//
//   THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF IONA Technologies PLC
//	    The copyright notice above does not evidence any
//	    actual or intended publication of such source code.
//

#include <omg/CosEventChannelAdmin.idl>	// CORBA Event Service
#include <omg/CosTypedEventChannelAdmin.idl> // CORBA Typed Event Service
#include <omg/DsLogAdmin.idl>

#pragma IT_SystemSpecification

#pragma prefix "omg.org"

#pragma IT_BeginCBESpecific AllJava                             "@@\
@module DsTypedEventLogAdmin=org.omg"
module DsTypedEventLogAdmin
{

typedef sequence<any> ArgumentList;
struct TypedLogRecord 
{
    DsLogAdmin::RecordId id;
    DsLogAdmin::TimeT    time;
    DsLogAdmin::NVList   attr_list;
    
    // I don't want to include the IFR interfaces just 
    // for CORBA::RepositoryId and CORBA::Identifier
    /* CORBA::RepositoryId */ string interface_id;// repository id of the 
                                                  // interface for
                                                  // sending typed event
    /* CORBA::Identifier */ string operation_name; // operation name
    ArgumentList         arg_list; // argument list, contains event data
};

typedef sequence<TypedLogRecord> TypedRecordList;

interface TypedRecordIterator 
{
    TypedRecordList get(in unsigned long position,
                        in unsigned long how_many) 
	raises(DsLogAdmin::InvalidParam);
    void destroy();
};

interface TypedEventLog : 
    DsLogAdmin::Log, CosTypedEventChannelAdmin::TypedEventChannel 
{
    // typed record query 
    TypedRecordList typed_query(in  string grammar,
                                in  DsLogAdmin::Constraint c,
                                out TypedRecordIterator i)
        raises(DsLogAdmin::InvalidGrammar, DsLogAdmin::InvalidConstraint);
    
    // typed record retrieval
    TypedRecordList typed_retrieve(in DsLogAdmin::TimeT from_time,
                        	   in long how_many,
                                   out TypedRecordIterator i);
    
};

interface TypedEventLogFactory : 
    DsLogAdmin::LogMgr, CosEventChannelAdmin::ConsumerAdmin
{
    TypedEventLog create (
	in DsLogAdmin::LogFullActionType full_action,
	in unsigned long long max_size,
	in DsLogAdmin::CapacityAlarmThresholdList thresholds,
	out DsLogAdmin::LogId id
	) 
	raises (DsLogAdmin::InvalidLogFullAction,
		DsLogAdmin::InvalidThreshold);
    
    TypedEventLog create_with_id (
	in DsLogAdmin::LogId id,
	in DsLogAdmin::LogFullActionType full_action,
	in unsigned long long max_size,
          in DsLogAdmin::CapacityAlarmThresholdList thresholds
	) 
	raises (DsLogAdmin::LogIdAlreadyExists, 
		DsLogAdmin::InvalidLogFullAction, 
		DsLogAdmin::InvalidThreshold);
};

};

#endif
