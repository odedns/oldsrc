#ifndef emsMgr_idl
#define emsMgr_idl

// ********************************
// *                              *
// * emsMgr.idl                   *
// *                              *
// ********************************

//Include list
#include "globaldefs.idl"
#include "common.idl"
#include "multiLayerSubnetwork.idl"
#include "notifications.idl"
#include "topologicalLink.idl"

#pragma prefix "mtnm.tmforum.org"


  /** 
   * <a href=supportingDocumentation/overview.html>Overview of NML-EML interface</a>
   *
   * <p>This module contains the definition of the EMS interface
   * of the NML-EML interface, and related types.  It also contains the
   * definition of the EMS manager.</p>
   *
   * <h5> Version 2.0. </h5>
   **/


module emsMgr
{
  /**
   * <p>Holds EMS identification information.</p>
   *
   * globaldefs::NamingAttributes_T <b>name</b>:
   * <dir>Represents the friendly name of the EMS and is constructed
   * according to the following pattern:<dir>
   * <code> "<i>CompanyName</i>/<i>EMSName</i>" </code>
   * The EMSName must be unique relative to the CompanyName. It is up to each
   * company to maintain this.</dir>
   * It is a readonly attribute.</dir>
   *
   * string <b>userLabel</b>:
   * <dir>The userLabel is a friendly name that the operator wants to give
   * to the EMS. Typical expectations of the operator is that the same
   * name is seen on all operation systems. This is set by the NMS and could be
   * displayed on the EMS based on each systems'
   * capabilities. THIS IS NOT A MANDATORY EXPECTATION, but is left to the
   * implementation of the EMS. This attribute can be set
   * by NMS through the Common_I interface service
   * <a href=_common.Common_I.html#common::Common_I::setUserLabel>setUserLabel</a>. 
   * It is a read/write attribute.</dir>
   *
   * string <b>nativeEMSName</b>:
   * <dir>Represents how the EMS refers to itself on EMS displays. Its
   * aim is to provide a "nomenclature bridge" to aid relating information
   * presented on NMS displays to EMS displays (via GUI cut through).
   * May be a null string.</dir>
   *
   * string <b>owner</b>:
   * <dir>The owner is provisionable by the NMS. This attribute can be set
   * by NMS through the Common_I interface service
   * <a href=_common.Common_I.html#common::Common_I::setOwner>setOwner</a>. 
   * It is a read/write attribute.</dir>
   *
   * string <b>emsVersion</b>:
   * <dir>Software version of the EMS. This is a free format string 
   * with no semantics attached to it for the NMS. Each EMS system 
   * models its software version independently. There is no
   * standard way to represent the software version.
   * Decision about support of a particular version by the NMS system is
   * up to the NMS system. emsVersion may be an empty string.
   * It is a readonly attribute.</dir>
   *
   * string <b>type</b>:
   * <dir>Free format string indicating the type of EMS.  The EMS type may be empty string.
   * It is a readonly attribute.</dir>
   *
   * globaldefs::NVSList_T <b>additionalInfo</b>:
   * <dir>This attribute allows the communication from the EMS to the NMS of additional 
   * information which is not explicitly modelled.
   * It is a readonly attribute.</dir>
   **/
   struct EMS_T
   {
      globaldefs::NamingAttributes_T name;
      string userLabel;
      string nativeEMSName;
      string owner;
      string emsVersion;
      string type;
      globaldefs::NVSList_T additionalInfo;
   };

  /**
   * <p>The EMSMgr_I is used to gain access to operations
   * which deal with the EMS itself.</p>
   *
   * <p>A handle to an instance of this interface is gained via the
   * <a href=_emsSession.EmsSession_I.html#emsSession::EmsSession_I::getManager>
   * getManager</a> operation in Manager.</p>
   **/

   interface  EMSMgr_I : common::Common_I
   {
  /**
   * <p>This allows an NMS to request the EMS information.</p>
   * 
   * @parm  EMS_T emsInfo : The EMS information.
   * @raises globaldefs::ProcessingFailureException<dir>
   * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal failure<br>
   **/
   void getEMS(
         out EMS_T emsInfo)
        raises(globaldefs::ProcessingFailureException);

  /**
   * <p>This allows an NMS to request all of the Subnetworks that
   * are under the control of this EMS.</p>
   * 
   * <p>In order to allow the NMS to deal with a large number of objects,
   * this operation uses an iterator. See
   * <a href=supportingDocumentation/iterators.html>iterator overview</a>
   * for information on how iterators are used in this interface.</p>
   * 
   * @parm  unsigned long how_many: Maximum number of subnetworks to return in the first batch.
   * @parm  multiLayerSubnetwork::SubnetworkList_T sList: First batch of subnetworks.
   * @parm  multiLayerSubnetwork::SubnetworkIterator_I sIt: Iterator to retrieve the remaining
   * subnetworks.
   * @raises globaldefs::ProcessingFailureException:<dir>
   * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal failure<br>
   * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators that the EMS
   *  can support has been reached.
   * </dir>
   **/
   void getAllTopLevelSubnetworks(
         in unsigned long how_many,
         out multiLayerSubnetwork::SubnetworkList_T sList,
         out multiLayerSubnetwork::SubnetworkIterator_I sIt) 
         raises(globaldefs::ProcessingFailureException);

 
  /**
   * <p>This operation has exactly the same behaviour as 
   * <a href=_EMS.EMS.html#EMS::EMS::getAllTopLevelSubnetworks>getAllTopLevelSubnetworks</a>, but
   * instead of returning the entire object structures, this operation returns their names.</p>
   *
   * <p>In order to allow the NMS to deal with a large number of objects,
   * this operation uses an iterator. See
   * <a href=supportingDocumentation/iterators.html>iterator overview</a>
   * for information on how iterators are used in this interface.</p>
   * 
   * @parm unsigned long how_many: Maximum number of subnetwork names to return in the first batch.
   * @parm globaldefs::NamingAttributesList_T nameList: First batch of subnetwork names.
   * @parm globaldefs::NamingAttributesListIterator_I nameIt: Iterator to retrieve the remaining
   * subnetwork names.
   * @raises globaldefs::ProcessingFailureException:
   * As for getAllTopLevelSubnetworks.
   **/
   void getAllTopLevelSubnetworkNames(
         in  unsigned long how_many,
         out globaldefs::NamingAttributesList_T nameList,
         out globaldefs::NamingAttributesIterator_I nameIt)
         raises(globaldefs::ProcessingFailureException);


  /**
   * <p>This allows an NMS to request all of the Topological Links that
   * exist between multiLayerSubnetworks under the control of this EMS.</p>
   * 
   * <p>For details on how topological links should be modelled, see
   * <a href=supportingDocumentation/layers.pdf>layering</a>.</p>
   *
   * <p>In order to allow the NMS to deal with a large number of objects,
   * this operation uses an iterator. See
   * <a href=supportingDocumentation/iterators.html>iterator overview</a>
   * for information on how iterators are used in this interface.</p>
   * 
   * @parm  unsigned long how_many: Maximum number of topological links
   * to return in the first batch.
   * @parm  topologicalLink::TopologicalLinkList_T topoList: First batch of topological links.
   * @parm  topologicalLink::TopologicalLinkIterator_I topoIt: Iterator to retrieve the remaining
   * topological links.
   * @raises globaldefs::ProcessingFailureException<dir>
   * EXCPT_NOT_IMPLEMENTED - Raised if EMS cannot support this service<br>
   * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal failure<br>
   * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators that the EMS
   *  can support has been reached.
   * </dir>
   **/
   void getAllTopLevelTopologicalLinks(
         in unsigned long how_many,
         out topologicalLink::TopologicalLinkList_T topoList,
         out topologicalLink::TopologicalLinkIterator_I topoIt) 
         raises(globaldefs::ProcessingFailureException);

  /**
   * <p>This operation has exactly the same behaviour as 
   * getAllTopLevelTopologicalLinks, but
   * instead of returning the entire object structures, this operation returns their names.</p>
   *
   * <p>In order to allow the NMS to deal with a large number of objects,
   * this operation uses an iterator. See
   * <a href=supportingDocumentation/iterators.html>iterator overview</a>
   * for information on how iterators are used in this interface.</p>
   * 
   * @parm unsigned long how_many: Maximum number of topological link names
   * to return in the first batch.
   * @parm globaldefs::NamingAttributesList_T nameList: First batch of topological link names.
   * @parm globaldefs::NamingAttributesListIterator_I nameIt: Iterator to retrieve the remaining
   * topological link names.
   * @raises globaldefs::ProcessingFailureException:
   * As for getAllTopLevelTopologicalLinks.
   **/
   void getAllTopLevelTopologicalLinkNames(
         in  unsigned long how_many,
         out globaldefs::NamingAttributesList_T nameList,
         out globaldefs::NamingAttributesIterator_I nameIt)
         raises(globaldefs::ProcessingFailureException);


  /**
   * <p>This service returns a top level topological link given its name.</p>
   * 
   * @parm globaldefs::NamingAttributes topoLinkName: Name of the top level 
   *  topological link to retrieve.
   * @parm TopologicalLink_T topoLink: Top level topological link returned.
   * @raises globaldefs::ProcessingFailureException<dir>
   * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal failure<br>
   * EXCPT_INVALID_INPUT - Raised when topoLinkName does not reference a top level topological
   *  link object<br>
   * EXCPT_ENTITY_NOT_FOUND - Raised when topoLinkName references a top level topological link
   *  object that does not exist<br>
   * </dir>
   **/
   void getTopLevelTopologicalLink(
         in globaldefs::NamingAttributes_T topoLinkName,
         out topologicalLink::TopologicalLink_T topoLink)
        raises(globaldefs::ProcessingFailureException);


  /**
   * <p>This allows an NMS to request all of the active alarms and TCAs that
   * are under the control of this EMS (both those raised by
   * the NEs and those raised by the EMS itself). Some alarms may be
   * filtered out (excluded) by specifying their probable causes or severities.
   * </p>
   * 
   * <p>The result of this operation is independent of the filtering set up by the NMS 
   * for the notification service.</p>
   *
   * <p>In order to allow the NMS to deal with a large number of objects,
   * this operation uses an iterator. See
   * <a href=supportingDocumentation/iterators.html>iterator overview</a>
   * for information on how iterators are used in this interface.</p>
   * 
   * @parm notifications::ProbableCauseList_T excludeProbCauseList: The list of probable
   * causes to exclude (for which events should not be reported).
   * @parm notifications::PerceivedSeverityList_T excludeSeverityList: List of severities
   *  to exclude from the output event list.
   * @parm unsigned long how_many: Maximum number of alarms and TCAs to report in the first
   *  batch.
   * @parm  notifications::EventList_T eventList: First batch of alarms and TCAs.
   * @parm  notifications::EventIterator_I eventIt: Iterator to retrieve the remaining
   * alarms and TCAs.
   * @raises globaldefs::ProcessingFailureException:<dir>
   * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal failure<br>
   * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators that the EMS
   *  can support has been reached.
   * </dir>
   **/
   void getAllEMSAndMEActiveAlarms(
         in notifications::ProbableCauseList_T excludeProbCauseList,
         in notifications::PerceivedSeverityList_T excludeSeverityList,
         in unsigned long how_many,
         out notifications::EventList_T eventList,
         out notifications::EventIterator_I eventIt) 
        raises(globaldefs::ProcessingFailureException);


  /**
   * <p>This allows an NMS to request all of the active alarms and TCAs that
   * for the EMS itself.  Some alarms may be
   * filtered out (excluded) by specifying their severities.</p>
   * 
   * <p>The result of this operation is independent of the filtering set up by the NMS 
   * for the notification service.</p>
   *
   * <p>In order to allow the NMS to deal with a large number of objects,
   * this operation uses an iterator. See
   * <a href=supportingDocumentation/iterators.html>iterator overview</a>
   * for information on how iterators are used in this interface.</p>
   * 
   * @parm notifications::PerceivedSeverityList_T excludeSeverityList: List of severities
   *  to exclude from the output event list.
   * @parm unsigned long how_many: Maximum number of alarms and TCAs to report in the first
   *  batch.
   * @parm  notifications::EventList_T eventList: First batch of alarms and TCAs.
   * @parm  notifications::EventIterator_I eventIt: Iterator to retrieve the remaining
   * alarms and TCAs.
   * @raises globaldefs::ProcessingFailureException:<dir>
   * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal failure<br>
   * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators that the EMS
   *  can support has been reached.
   * </dir>
   **/
   void getAllEMSSystemActiveAlarms(
         in notifications::PerceivedSeverityList_T excludeSeverityList,
         in unsigned long how_many,
         out notifications::EventList_T eventList,
         out notifications::EventIterator_I eventIt) 
        raises(globaldefs::ProcessingFailureException);

    };
 
};

#endif

