<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="en-us" lang="en-us"><head>

<script>if( self == top ){ window.location.replace( "../../../../../../?topic=/com.ibm.websphere.express.doc/info/exp/asyncbns/concepts/casb_asbover.html");}</script>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type">
<meta content="public" name="security">
<meta content="index,follow" name="Robots">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;http://www.icra.org/ratingsv02.html&quot; l gen true r (cz 1 lz 1 nz 1 oz 1 vz 1) &quot;http://www.rsac.org/ratingsv01.html&quot; l gen true r (n 0 s 0 v 0 l 0) &quot;http://www.classify.org/safesurf/&quot; l gen true r (SS~~000 1))">
<meta content="concept" name="DC.Type">
<meta name="DC.Title" content="Asynchronous beans">
<meta name="abstract" content="An asynchronous bean is a Java object or enterprise bean that can run asynchronously by a Java 2 Platform Enterprise Edition (J2EE) application, using the J2EE context of the asynchronous bean creator.">
<meta name="description" content="An asynchronous bean is a Java object or enterprise bean that can run asynchronously by a Java 2 Platform Enterprise Edition (J2EE) application, using the J2EE context of the asynchronous bean creator.">
<meta content="asyncbeans" name="DC.Coverage">
<meta scheme="URI" name="DC.Relation" content="../../asyncbns/tasks/tasb_epasb.html">
<meta scheme="URI" name="DC.Relation" content="../../asyncbns/concepts/casb_workmgr.html">
<meta scheme="URI" name="DC.Relation" content="../../asyncbns/concepts/casb_timemanager.html">
<meta scheme="URI" name="DC.Relation" content="../../asyncbns/xmp/xasb_connections.html">
<meta scheme="URI" name="DC.Relation" content="../../asyncbns/tasks/tasb_asynchscope.html">
<meta scheme="URI" name="DC.Relation" content="../../asyncbns/concepts/casb_workobj.html">
<meta scheme="URI" name="DC.Relation" content="../../asyncbns/concepts/casb_workmgr.html">
<meta scheme="URI" name="DC.Relation" content="../../ae/cejb_references.html">
<meta content="using" name="DC.Audience.Job">
<meta content="programmer" name="DC.Audience.Type">
<meta name="prodname" content="IBM WebSphere Application Server - Express">
<meta content="6" name="version">
<meta content="0" name="release">
<meta content="2" name="modification">
<meta name="platform" content="Distributed operating systems">
<meta name="copyright" content="IBM Corporation 2002, 2006">
<meta name="DC.Rights.Owner" content="IBM Corporation 2002, 2006">
<meta content="XHTML" name="DC.Format">
<meta content="casb_asbover" name="DC.Identifier">
<meta content="en-us" name="DC.Language"><!-- All rights reserved. Licensed Materials Property of IBM --><!-- US Government Users Restricted Rights --><!-- Use, duplication or disclosure restricted by --><!-- GSA ADP Schedule Contract with IBM Corp. -->




<link href="welcome_data/ibmdita.css" type="text/css" rel="stylesheet">
<link href="welcome_data/swg_info_common.css" type="text/css" rel="stylesheet">
<link href="welcome_data/monospace.css" type="text/css" rel="stylesheet" disabled=""><title>Asynchronous beans</title>

<style type="text/css">
        span.stealth { visibility:hidden; }
   </style></head><body id="casb_asbover"><a name="casb_asbover"><!-- --></a>
<img style="border: 0pt none ; vertical-align: middle;" alt="WebSphere" src="welcome_data/IC-ws-sm.gif"> <span class="runningheader"><strong>Application Server - Express, Version 6.0.x</strong>&nbsp;&nbsp;&nbsp;Operating Systems: <strong>AIX, HP-UX, Linux, Solaris, Windows</strong></span><br><hr align="left">
<h1 class="topictitle1">Asynchronous beans</h1>





<div><p>An asynchronous bean is a Java object or enterprise bean that can
run asynchronously by a Java 2 Platform Enterprise Edition (J2EE) application,
using the J2EE context of the asynchronous bean creator.</p>

<p>Asynchronous beans can improve performance by enabling a J2EE program to
decompose operations into parallel tasks. Asynchronous beans support the construction
of stateful, active J2EE applications. These applications address a segment
of the application space that J2EE has not previously addressed (that is,
advanced applications that require application threading, active agents within
a server application, or distributed monitoring capabilities).</p>

<div class="p">Asynchronous beans can run using the J2EE security context of the creator
J2EE component. These beans also can run with copies of other J2EE contexts,
such as: <ul>
<li>Internationalization context</li>

<li>Application profiles, which are not supported for J2EE 1.4 applications
and deprecated for J2EE 1.3 applications</li>

<li>Work areas</li>

</ul>
</div>

<div class="section"><h4 class="sectiontitle">Asynchronous bean interfaces</h4><div class="p">Four types of asynchronous
beans exist:<dl>
<dt class="dlterm">Work object</dt>

<dd>There are two work interfaces that essentially accomplish the same goal.
The legacy Asynchronous Beans work interface is com.ibm.websphere.asynchbeans.Work,
and the CommonJ work interface is commonj.work.Work. A work object runs parallel
to its caller using the work manager <tt>startWork</tt> or <tt>schedule</tt> method
(<tt>startWork</tt> for legacy Asynchronous Beans and <tt>schedule</tt> for
CommonJ). Applications implement work objects to run code blocks asynchronously.
For more information on the Work interface, see the <a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/ae/welc_ref_dev_javadoc.html">API documentation</a>.</dd>


<dt class="dlterm">Timer listener</dt>

<dd>This interface is an object that implements the commonj\timers\TimerListener
interface. Timer listeners are called when a high-speed transient timer expires.
For more information on the TimerListener interface, see the <a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/ae/welc_ref_dev_javadoc.html">API documentation</a>.</dd>


<dt class="dlterm">Alarm listener</dt>

<dd>An alarm listener is an object that implements the com.ibm.websphere.asynchbeans.AlarmListener
interface. Alarm listeners are called when a high-speed transient alarm expires.
For more information on the AlarmListener interface, see the <a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/ae/welc_ref_dev_javadoc.html">API documentation</a>.</dd>


<dt class="dlterm">Event listener</dt>

<dd>An event listener can implement any interface. An event listener is a
lightweight, asynchronous notification mechanism for asynchronous events within
a single Java virtual machine (JVM). An event listener typically enables J2EE
components within a single application to notify each other about various
asynchronous events.</dd>

</dl>
</div>
</div>

<div class="section"><h4 class="sectiontitle">Supporting interfaces</h4><dl>
<dt class="dlterm">Work manager</dt>

<dd>Work managers are thread pools that administrators create for J2EE applications.
The administrator specifies the properties of the thread pool and a policy
that determines which J2EE contexts the asynchronous bean inherits.</dd>


<dt class="dlterm">CommonJ Work manager</dt>

<dd>The CommonJ work manager is similar to the work manager. The difference
between the two is that the CommonJ work manager contains a subset of the
asynchronous beans work manager methods. Although CommonJ work manager functions
in a J2EE 1.4 environment, each JNDI lookup of a work manager does not return
a new instance of the WorkManager. All the JNDI lookup of work managers within
a scope have the same instance.</dd>


<dt class="dlterm">Timer manager</dt>

<dd>Timer managers implement the commonj.timers.TimerManager interface, which
enables J2EE applications, including servlets, EJB applications, and JCA Resource
Adapters, to schedule future timer notifications and receive timer notifications.
The timer manager for Application Servers specification provides an application-server
supported alternative to using the J2SE <tt>java.util.Timer</tt> class, which
is inappropriate for managed environments.</dd>


<dt class="dlterm">Event source</dt>

<dd>An event source implements the com.ibm.websphere.asynchbeans.EventSource
interface. An event source is a system-provided object that supports a generic,
type-safe asynchronous notification server within a single JVM. The event
source enables event listener objects, which implement any interface to be
registered. For more information on the EventSource interface, see the <a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/ae/welc_ref_dev_javadoc.html">API documentation</a>.</dd>


<dt class="dlterm">Event source events</dt>

<dd>Every event source can generate its own events, such as listener count
changed. An application can register an event listener object that implements
the class com.ibm.websphere.asynchbeans.EventSourceEvents. This action enables
the application to catch events such as listeners being added or removed,
or a listener throwing an unexpected exception. For more information on the
EventSourceEvents class, see the <a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/ae/welc_ref_dev_javadoc.html">API documentation</a>.</dd>

</dl>
<p>Additional interfaces, including alarms and subsystem monitors,
are introduced in the topic <a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/asyncbns/tasks/tasb_asynchscope.html">Developing Asynchronous scopes</a>, which discusses
some of the advanced applications of asynchronous beans.</p>
</div>

<div class="section"><h4 class="sectiontitle">Transactions</h4><p>Every asynchronous bean method is called
using its own transaction, much like container-managed transactions in typical
enterprise beans. It is very similar to the situation when an Enterprise Java
Beans (EJB) method is called with TX_NOT_SUPPORTED. The runtime starts a local
transaction before invoking the method. The asynchronous bean method is free
to start its own global transaction if this transaction is possible for the
calling J2EE component. For example, if an enterprise bean creates the component,
the method that creates the asynchronous bean must be TX_BEAN_MANAGED.</p>
<p>When
you call an entity bean from within an asynchronous bean, for example, you
must have a global transactional context available on the current thread.
Because asynchronous bean objects start local transactional contexts, you
can encapsulate all entity bean logic in a session bean that has a method
marked as TX_REQUIRES or equivalent. This process establishes a global transactional
context from which you can access one or more entity bean methods.</p>
<p>If
the asynchronous bean method throws an exception, any local transactions are
rolled back. If the method returns normally, any incomplete local transactions
are completed according to the unresolved action policy configured for the
bean. EJB methods can configure this policy using their deployment descriptor.
If the asynchronous bean method starts its own global transaction and does
not commit this global transaction, the transaction is rolled back when the
method returns.</p>
</div>

<div class="section"><h4 class="sectiontitle">Access to J2EE component metadata</h4><p>If an asynchronous
bean is a J2EE component, such as a session bean, its own metadata is active
when a method is called. If an asynchronous bean is a simple Java object,
the J2EE component metadata of the creating component is available to the
bean. Like its creator, the asynchronous bean can look up the java:comp namespace.
This look up enables the bean to access connection factories and enterprise
beans, just as it would if it were any other J2EE component. The environment
properties of the creating component also are available to the asynchronous
bean.</p>
<p>The <tt>java:comp</tt> namespace is identical to the one available
for the creating component; the same restrictions apply. For example, if the
enterprise bean or servlet has an EJB reference of <tt>java:comp/env/ejb/MyEJB</tt>,
this EJB reference is available to the asynchronous bean. In addition, all
of the  connection factories use the same resource-sharing scope as the creating
component.</p>
</div>

<div class="section"><h4 class="sectiontitle">Connection management</h4><p>An asynchronous bean method
can use the connections that its creating J2EE component obtained using java:comp
resource references. (For more information on resource references, see <a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/ae/cejb_references.html">References</a>). However, the bean
method must access those connections using a get, use or close pattern. There
is no connection caching between method calls on an asynchronous bean. The
connection factories or datasources can be cached, but the connections must
be retrieved on every method call, used, and then closed. While the asynchronous
bean method can look up connection factories using a global Java Naming and
Directory Interface (JNDI) name, this is not recommended for the following
reasons: </p>
<ul>
<li>The JNDI name is hard coded in the application (for example, as a property
or string literal).</li>

<li>The connection factories are not shared because there is no way to specify
a sharing scope.</li>

</ul>
<p>For code examples that demonstrate both the correct and the incorrect
ways to access connections from asynchronous bean methods, see the topic <a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/asyncbns/xmp/xasb_connections.html">Example: Asynchronous bean
connection management</a>.</p>
</div>

<div class="section"><h4 class="sectiontitle">Deferred start of Asynchronous Beans</h4>Asynchronous beans
support deferred start by allowing serialization of J2EE service context information.
 The <tt>WorkWithExecutionContext createWorkWithExecutionContext(Work r)</tt> method
on the WorkManager interface will create a snapshot of the J2EE service contexts
enabled on the WorkManager. The resulting <tt>WorkWithExecutionContext</tt> object
can then be serialized and stored in a database or file. This is useful when
it is necessary to store J2EE service contexts such as the current security
identity or Locale and later inflate them and run some work within this context.
 The <tt>WorkWithExecutionContext</tt> object can run using the startWork()
and doWork() methods on the WorkManager interface.<p>All <tt>WorkWithExecutionContext</tt> objects
must be deserialized by the same application that serialized it.  All EJBs
and classes must be present in order for Java to successfully inflate the
objects contained within. </p>
</div>

<div class="section"><h4 class="sectiontitle">Deferred start and security</h4>The asynchronous beans
security service context might require Common Secure Interoperability Version
2 (CSIv2) identity assertion to be enabled. Identity assertion is required
when a <tt>WorkWithExecutionContext</tt> object is deserialized and run to
Java Authentication and Authorization Service (JAAS) subject identity credential
assignment. Review the following topics to better understand if you need to
enable identity assertion, when using a <tt>WorkWithExecutionContext</tt> object:<ul>
<li><a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/ae/tsec_csiv2confg.html">Configuring
Common Secure Interoperability Version 2 and Security Authentication Service
authentication protocol</a></li>

<li><a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/ae/rsec_csiv2ida.html">Identity
Assertion</a></li>

</ul>
<p>There are also issues with interoperating with <tt>WorkWithExecutionContext</tt> objects
from different versions of the product. See <a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/asyncbns/tasks/tasb_interop.html">Interoperating with asynchronous beans </a>.</p>
</div>

</div>

<br><br><hr align="left"><div><div class="relinfo"><strong>Sub-topics</strong><br>
<div><a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/asyncbns/concepts/casb_workmgr.html">Work managers
</a><br>
</div>
<div><a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/asyncbns/concepts/casb_timemanager.html">Timer managers
</a><br>
</div>
<div><a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/asyncbns/xmp/xasb_connections.html">Example: Using connections with asynchronous beans
</a><br>
</div>

</div>

<div class="familylinks">
</div>
<div class="relconcepts"><strong>Related concepts</strong><br>
<div><a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/asyncbns/concepts/casb_workobj.html">Work objects
</a></div>
<div><a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/asyncbns/concepts/casb_workmgr.html">Work managers
</a></div>
<div><a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/ae/cejb_references.html">References
</a></div>
</div>
<div class="reltasks"><strong>Related tasks</strong><br>
<div><a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/asyncbns/tasks/tasb_asynchscope.html">Developing asynchronous scopes
</a></div>
<a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/exp/asyncbns/tasks/tasb_epasb.html">Using asynchronous beans
</a></div>
</div>
<span class="runningfooter"><img style="border: 0pt none ;" alt="" src="welcome_data/concept_obj.gif"> <strong>Concept topic</strong></span>
      &nbsp;&nbsp;&nbsp;
   <br><hr align="left"><a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.express.doc/info/terms_of_use.html" class="runningfooter"><strong>Terms of Use</strong></a> |
<a target="_blank" href="mailto:wasdoc@us.ibm.com" class="runningfooter"><strong>Feedback</strong></a>
<br><br><img style="border: 0pt none ;" alt="" src="welcome_data/timestamp.gif"><span class="runningfooter">Last updated: Sep 10, 2006 10:56:26 PM CDT </span><br>
<span class="runningfooter">http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.express.doc/info/exp/asyncbns/concepts/casb_asbover.html</span><br><br>
<span class="runningfooter">
      © Copyright IBM Corporation 2002, 2006. All Rights Reserved.<br>This information center is powered by Eclipse technology.  (http://www.eclipse.org)
</span></body></html>