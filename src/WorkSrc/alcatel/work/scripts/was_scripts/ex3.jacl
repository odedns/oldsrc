# This program may be used, executed, copied, modified and distributed
# without royalty for the purpose of developing, using, marketing, or distribution

#-----------------------------------------------------------------
# ex3.jacl - Jacl implementation of example script 3
#-----------------------------------------------------------------
#
#  The purpose of this example is to show a potentially useful
#  sequence of common actions using the scripting client wsadmin.
#  This example creates a server group  
#  onto the server, and starts the server.  We assume an environment
#  in which the scripting client is attached to the Network Deployment
#  manager.
#  
#  This is a bi-modal script: it can be included in the wsadmin 
#  command invocation like this:
#     
#     wsadmin -f ex3.jacl cl1 "node1 node2 node3" clserv 1 10 c:/applicationZ myapp
#
#  or the script can be sourced from the wsadmin command line:
#     wsadmin> source ex3.jacl
#     wsadmin> ex3.jacl cl1 "node1 node2 node3" clserv 1 10 c:/applicationZ myapp 
# 
#  The script expects some parameters:
#      arg1 - cluster name
#      arg2 - list of node names
#      arg3 - prefix to be used on server names
#      arg4 - number of servers to be created per node
#      arg5 - weight of each server in the group 
#      arg6 - application ear file to be loaded 
#      arg7 - application name (optional) 
#
#  This example demonstrates many wsadmin features:
#
#   - The use of the AdminApp object to install an application
#   - The use of the AdminControl object to locate running MBeans 
#   - The use of the AdminControl object to getAttributes from running MBeans 
#   - The use of the AdminControl object to invoke operations on running MBeans 
#   - The use of the AdminControl object's "startServer" command
#   - The use of the AdminConfig object to create objects in the configuration
#   - The use of the AdminConfig object to find objects in the configuration
#   - The use of the AdminConfig object to modify objects in the configuration
#   - The use of the AdminConfig object to save the configuration
#   - Methods for saving and synchronizing the configuration.
#-----------------------------------------------------------------
#
proc ex3 {clusterName nodes namePrefix serversPerNode weight args} {

   #--------------------------------------------------------------
   # check for optional argument 
   #--------------------------------------------------------------
   set app [lindex $args 0]
   if {[llength $args] > 1} {
      set appName [lindex $args 1]
   } else {
      set appName ""
   }

   #--------------------------------------------------------------
   # set up globals
   #--------------------------------------------------------------
   global AdminConfig
   global AdminControl
   global AdminApp


  #---------------------------------------------------------
  # We assume that there is only one cell, and we are on it
  #---------------------------------------------------------
  set cellname [$AdminControl getCell]
  set cell [$AdminConfig getid /Cell:$cellname/]
 
  #---------------------------------------------------------
  # Construct the attribute list to be used in creating a ServerCluster 
  # attribute.      
  #---------------------------------------------------------
  
  set name_attr    [list name $clusterName]
  set desc_attr    [list description "test cluster"]
  set pref_attr    [list preferLocal true]
  set statem_attr  [list stateManagement [list [list initialState STOP]]]
  set attrs        [list $name_attr $desc_attr $pref_attr $statem_attr]

  #---------------------------------------------------------
  # Create the server cluster 
  #---------------------------------------------------------
  puts "ex3: creating the ServerCluster $clusterName"
  set cluster [$AdminConfig create ServerCluster $cell $attrs]

  #--------------------------------------------------------------
  # Install an application onto this server
  #--------------------------------------------------------------
  puts "ex3: installing the application"
  set app_options [list -cluster $clusterName]
  if {[llength $appName] > 0} {
     lappend app_options -appname $appName
  }
  $AdminApp install $app $app_options 

  #---------------------------------------------------------
  # For each node, create the required number of servers
  # 
  #---------------------------------------------------------
  
  set index 1
  foreach nodeName $nodes {
     set node [$AdminConfig getid /Node:$nodeName/]
     for {set i 1} {$i <= $serversPerNode} {incr i} { 
        set uid ""
        append uid      $index _ $i
        set servName ""
        append servName $namePrefix _ $uid 
        set name_attr   [list memberName $servName]
        set weight_attr [list weight $weight]
        set attrs [list $name_attr $weight_attr]
        puts "ex3: creating server $servName on node $nodeName"
        set server [$AdminConfig createClusterMember $cluster $node $attrs]
       
     }  
     incr index
  }

  #---------------------------------------------------------
  # save changes 
  # 
  #---------------------------------------------------------

  puts "ex3: saving config changes."
  $AdminConfig save

  #---------------------------------------------------------
  # Ask the ClusterMgr to refresh its list of clusters 
  # 
  #---------------------------------------------------------
  
  set clusterMgr [$AdminControl completeObjectName type=ClusterMgr,cell=$cellname,*]
  if {[llength $clusterMgr] == 0} {
        puts "ex3: Error -- clusterMgr MBean not found for cell $cellname"
        return 
     }
  $AdminControl invoke $clusterMgr retrieveClusters

  #---------------------------------------------------------
  # For each node, invoke a sync if necessary 
  #     -- Is a nodeSync MBean available on this node? 
  #     -- Find out if serverStartupSyncEnabled is true for this node
  #        We just created this server, so if this attribute is set to
  #        "false" we have to perform a sync.  If we do not, the node we
  #        are installing on may have an out-of-date copy of the config
  #        data. 
  #---------------------------------------------------------
  
  set index 1
  foreach nodeName $nodes {
     set node [$AdminConfig getid /Node:$nodeName/]
     puts "ex3: checking for the existence of a NodeSync MBean on node $nodeName"
     set nodeSync [$AdminControl completeObjectName type=NodeSync,node=$nodeName,*]
     if {[llength $nodeSync] == 0} {
        puts "ex3: Error -- NodeSync MBean not found for name $nodeName"
        return 
     }
     set enabled [$AdminControl getAttribute $nodeSync serverStartupSyncEnabled]
     if {[string compare $enabled "false"] == 0} {
        puts "ex3: Invoking synchronization for node $nodeSync because serverStartupSyncEnabled is set to false..."
        $AdminControl invoke $nodeSync sync
        puts "ex3: Done with synchronization."
     }
  }

  #---------------------------------------------------------
  # Ask the Cluster MBean to start the cluster
  # 
  #---------------------------------------------------------

  set cluster [$AdminControl completeObjectName type=Cluster,cell=$cellName,name=$clusterName,*]
  puts "ex3: Invoking start for cluster $clusterName" 
  $AdminControl invoke $cluster start

}
 

#-----------------------------------------------------------------
# Main
#-----------------------------------------------------------------
if { !($argc == 6 || $argc == 7) } {
   puts "ex3: this script requires 6 or 7 parameters: cluster name, "
   puts "     list of node names, server name prefix, number of servers"
   puts "     per node, weight of each server, ear file, and (optionally)"
   puts "     application name"
   puts ""
   puts "e.g.:     ex3  cl1 \"mynode1 mynode2\" serv 1 10 c:/WebSphere/AppServer/installableApps/jmsample.ear myapp1" 
} else { 
   set clusterName      [lindex $argv 0]  
   set nodes            [lindex $argv 1]
   set prefix           [lindex $argv 2]
   set weight           [lindex $argv 3]
   set perNode          [lindex $argv 4]
   set application      [lindex $argv 5]
   set appName          [lindex $argv 6]

   ex3 $clusterName $nodes $prefix $perNode $application $appName
}
