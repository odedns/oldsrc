package hoshen.xsm.lightsoft.corba.CosEventChannelAdmin;


/**
* hoshen/xsm/lightsoft/corba/CosEventChannelAdmin/_ProxyPullSupplierStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosEventChannelAdmin.idl
* 11:11:10 IST יום ראשון 6 נובמבר 2005
*/


/**
    * Interface for a proxy pull supplier.
    */
public class _ProxyPullSupplierStub extends org.omg.CORBA_2_3.portable.ObjectImpl implements hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullSupplier
{
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _ProxyPullSupplierStub ()
  {
    super ();
  }

  public _ProxyPullSupplierStub (org.omg.CORBA.portable.Delegate delegate)
  {
    super ();
    _set_delegate (delegate);
  }


  /**
       * Connect a pull consumer to this proxy.
       * @parm <code>pull_consumer</code> - The <code>PullConsumer</code>
       * object reference.
       * @raises AlreadyConnected If this consumer is already connected.
       */
  public void connect_pull_consumer (hoshen.xsm.lightsoft.corba.CosEventComm.PullConsumer pull_consumer) throws hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.AlreadyConnected
  {
    if ( !this._is_local() ) {
      org.omg.CORBA.portable.InputStream _in = null;
      try {
         org.omg.CORBA.portable.OutputStream _out = _request ("connect_pull_consumer",true);
         hoshen.xsm.lightsoft.corba.CosEventComm.PullConsumerHelper.write (_out, pull_consumer);
         _in = _invoke (_out);
         return;
      } catch (org.omg.CORBA.portable.ApplicationException _ex) {
         _in = _ex.getInputStream ();
         String _id = _ex.getId ();
         if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.AlreadyConnectedHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.AlreadyConnectedHelper.read( _in );
         else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
      } catch (org.omg.CORBA.portable.RemarshalException _rm) {
        connect_pull_consumer( pull_consumer ); return;
      } catch (org.omg.CORBA.portable.UnknownException _ue) {
        Throwable _oe = _ue.originalEx;
        if (_oe instanceof Error)
            throw (Error)_oe;
        else if (_oe instanceof RuntimeException)
            throw (RuntimeException)_oe;
        else
            throw _ue;
      } finally { _releaseReply (_in); }
    }
    else {
      org.omg.CORBA.portable.ServantObject _so =
        _servant_preinvoke( "connect_pull_consumer",_opsClass );
      if ( _so == null ) { connect_pull_consumer( pull_consumer ); return; }
      try {
         ((hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullSupplierOperations)_so.servant).connect_pull_consumer( pull_consumer );
         return;
      } finally { _servant_postinvoke( _so ); }
    }
  } // connect_pull_consumer


  /**
       * Pull an event from this supplier
       * @returns The event.
       * @raises Disconnected If this supplier is disconnected.
       */
  public org.omg.CORBA.Any pull () throws hoshen.xsm.lightsoft.corba.CosEventComm.Disconnected
  {
    if ( !this._is_local() ) {
      org.omg.CORBA.portable.InputStream _in = null;
      try {
         org.omg.CORBA.portable.OutputStream _out = _request ("pull",true);
         _in = _invoke (_out);
         org.omg.CORBA.Any __result = _in.read_any ();
         return __result;
      } catch (org.omg.CORBA.portable.ApplicationException _ex) {
         _in = _ex.getInputStream ();
         String _id = _ex.getId ();
         if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosEventComm.DisconnectedHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosEventComm.DisconnectedHelper.read( _in );
         else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
      } catch (org.omg.CORBA.portable.RemarshalException _rm) {
        return pull(  );
      } catch (org.omg.CORBA.portable.UnknownException _ue) {
        Throwable _oe = _ue.originalEx;
        if (_oe instanceof Error)
            throw (Error)_oe;
        else if (_oe instanceof RuntimeException)
            throw (RuntimeException)_oe;
        else
            throw _ue;
      } finally { _releaseReply (_in); }
    }
    else {
      org.omg.CORBA.portable.ServantObject _so =
        _servant_preinvoke( "pull",_opsClass );
      if ( _so == null ) { return pull(  ); }
      try {
         org.omg.CORBA.Any __result = ((hoshen.xsm.lightsoft.corba.CosEventComm.PullSupplierOperations)_so.servant).pull(  );
         return __result;
      } finally { _servant_postinvoke( _so ); }
    }
  } // pull


  /**
       * Try to pull an event from this supplier.
       * @parm <code>has_event</code> - boolean indicating if supplier
       * has an event.
       * @returns The event if <code>has_event</code> is true.
       * @raises Disconnected If this supplier is disconnected.
       */
  public org.omg.CORBA.Any try_pull (org.omg.CORBA.BooleanHolder has_event) throws hoshen.xsm.lightsoft.corba.CosEventComm.Disconnected
  {
    if ( !this._is_local() ) {
      org.omg.CORBA.portable.InputStream _in = null;
      try {
         org.omg.CORBA.portable.OutputStream _out = _request ("try_pull",true);
         _in = _invoke (_out);
         org.omg.CORBA.Any __result = _in.read_any ();
         has_event.value = _in.read_boolean ();
         return __result;
      } catch (org.omg.CORBA.portable.ApplicationException _ex) {
         _in = _ex.getInputStream ();
         String _id = _ex.getId ();
         if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosEventComm.DisconnectedHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosEventComm.DisconnectedHelper.read( _in );
         else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
      } catch (org.omg.CORBA.portable.RemarshalException _rm) {
        return try_pull( has_event );
      } catch (org.omg.CORBA.portable.UnknownException _ue) {
        Throwable _oe = _ue.originalEx;
        if (_oe instanceof Error)
            throw (Error)_oe;
        else if (_oe instanceof RuntimeException)
            throw (RuntimeException)_oe;
        else
            throw _ue;
      } finally { _releaseReply (_in); }
    }
    else {
      org.omg.CORBA.portable.ServantObject _so =
        _servant_preinvoke( "try_pull",_opsClass );
      if ( _so == null ) { return try_pull( has_event ); }
      try {
         org.omg.CORBA.BooleanHolder _has_event = new org.omg.CORBA.BooleanHolder();
         org.omg.CORBA.Any __result = ((hoshen.xsm.lightsoft.corba.CosEventComm.PullSupplierOperations)_so.servant).try_pull( _has_event );
         has_event.value = _has_event.value;
         return __result;
      } finally { _servant_postinvoke( _so ); }
    }
  } // try_pull


  /**
       * Disconnect a pull supplier.
       */
  public void disconnect_pull_supplier ()
  {
    if ( !this._is_local() ) {
      org.omg.CORBA.portable.InputStream _in = null;
      try {
         org.omg.CORBA.portable.OutputStream _out = _request ("disconnect_pull_supplier",true);
         _in = _invoke (_out);
         return;
      } catch (org.omg.CORBA.portable.ApplicationException _ex) {
         _in = _ex.getInputStream ();
         String _id = _ex.getId ();
        throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
      } catch (org.omg.CORBA.portable.RemarshalException _rm) {
        disconnect_pull_supplier(  ); return;
      } catch (org.omg.CORBA.portable.UnknownException _ue) {
        Throwable _oe = _ue.originalEx;
        if (_oe instanceof Error)
            throw (Error)_oe;
        else if (_oe instanceof RuntimeException)
            throw (RuntimeException)_oe;
        else
            throw _ue;
      } finally { _releaseReply (_in); }
    }
    else {
      org.omg.CORBA.portable.ServantObject _so =
        _servant_preinvoke( "disconnect_pull_supplier",_opsClass );
      if ( _so == null ) { disconnect_pull_supplier(  ); return; }
      try {
         ((hoshen.xsm.lightsoft.corba.CosEventComm.PullSupplierOperations)_so.servant).disconnect_pull_supplier(  );
         return;
      } finally { _servant_postinvoke( _so ); }
    }
  } // disconnect_pull_supplier

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier:1.0", 
    "IDL:omg.org/CosEventComm/PullSupplier:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  final public static java.lang.Class _opsClass =
    hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullSupplierOperations.class;

  private void readObject (java.io.ObjectInputStream s)
  {
     try 
     {
       String str = s.readUTF ();
       org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ((String[])null, null).string_to_object (str);
       org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
       _set_delegate (delegate);
     } catch (java.io.IOException e) {}
  }

  private void writeObject (java.io.ObjectOutputStream s)
  {
     try 
     {
       String str = org.omg.CORBA.ORB.init ((String[])null, null).object_to_string (this);
       s.writeUTF (str);
     } catch (java.io.IOException e) {}
  }
} // class _ProxyPullSupplierStub
