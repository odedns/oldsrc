package hoshen.xsm.lightsoft.corba.CosTrading;


/**
* hoshen/xsm/lightsoft/corba/CosTrading/_RegisterStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosTrading.idl
* 13:11:20 GMT+02:00 יום חמישי 28 יוני 2007
*/


/** This interface is used export offers of service to
 * the trader and manage these offers.
 */
public class _RegisterStub extends org.omg.CORBA_2_3.portable.ObjectImpl implements hoshen.xsm.lightsoft.corba.CosTrading.Register
{
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _RegisterStub ()
  {
    super ();
  }

  public _RegisterStub (org.omg.CORBA.portable.Delegate delegate)
  {
    super ();
    _set_delegate (delegate);
  }


  /* doc: 37 */
  public String export (org.omg.CORBA.Object reference, String type, hoshen.xsm.lightsoft.corba.CosTrading.Property[] properties) throws hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InvalidObjectRef, hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceType, hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceType, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InterfaceTypeMismatch, hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyName, hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatch, hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicProperty, hoshen.xsm.lightsoft.corba.CosTrading.MissingMandatoryProperty, hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyName
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("export",true);
          org.omg.CORBA.ObjectHelper.write (_out, reference);
          _out.write_string (type);
          hoshen.xsm.lightsoft.corba.CosTrading.PropertySeqHelper.write (_out, properties);
          _in = _invoke (_out);
          String __result = _in.read_string ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InvalidObjectRefHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InvalidObjectRefHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceTypeHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceTypeHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceTypeHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceTypeHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InterfaceTypeMismatchHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InterfaceTypeMismatchHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyNameHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatchHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatchHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicPropertyHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicPropertyHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.MissingMandatoryPropertyHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.MissingMandatoryPropertyHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyNameHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "export",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          String __result = ((hoshen.xsm.lightsoft.corba.CosTrading.RegisterOperations)_so.servant).export( reference,type,properties );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // export


  /* doc: 35 */
  public void withdraw (String id) throws hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferId, hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferId, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferId
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("withdraw",true);
          _out.write_string (id);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferIdHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferIdHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferIdHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferIdHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferIdHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferIdHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "withdraw",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosTrading.RegisterOperations)_so.servant).withdraw( id );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // withdraw


  /* doc: 31 */
  public hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.OfferInfo describe (String id) throws hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferId, hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferId, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferId
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("describe",true);
          _out.write_string (id);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.OfferInfo __result = hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.OfferInfoHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferIdHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferIdHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferIdHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferIdHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferIdHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferIdHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "describe",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.OfferInfo __result = ((hoshen.xsm.lightsoft.corba.CosTrading.RegisterOperations)_so.servant).describe( id );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // describe


  /** This operation modifies the properties supported
 * by a traded offer of service. Properties that are read-only
 * or mandatory may not be deleted and properties that are
 * read-only may not be modified.
 *
 * @param id - The identifier of the offer to be modified.
 * @param del_list - The list of properties to be deleted.
 * @param modify_list - The list of properties to be added or modified.
 *
 * @raises NotImplemented - If this operation is not implemented by the trader.
 * @raises IllegalOfferId - If the format of the offer identifier is invalid.
 * @raises UnknownOfferId - If the trader knows nothing of the identified offer.
 * @raises ProxyOfferId - The trader cannot withdraw the proxy offer.
 * @raises IllegalPropertyName - If a property name is illegal.
 * @raises UnknownPropertyName - If the offer does not support the named property.
 * @raises PropertyTypeMismatch - If the type of a property does not match
 *                                the type specified in the service definition.
 * @raises ReadonlyDynamicProperty - If an attempt has been made to assign a dynamic
 *                                   property value to a mandatory property.
 * @raises MandatoryProperty - If an attemp has been made to delete a mandatory property
 * @raises ReadonlyProperty - If an attemp has been made to modify a read-only property
 * @raises DuplicatePropertyName - If duplicate property names are specified.
 */
  public void modify (String id, String[] del_list, hoshen.xsm.lightsoft.corba.CosTrading.Property[] modify_list) throws hoshen.xsm.lightsoft.corba.CosTrading.NotImplemented, hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferId, hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferId, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferId, hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyName, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownPropertyName, hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatch, hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicProperty, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.MandatoryProperty, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ReadonlyProperty, hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyName
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("modify",true);
          _out.write_string (id);
          hoshen.xsm.lightsoft.corba.CosTrading.PropertyNameSeqHelper.write (_out, del_list);
          hoshen.xsm.lightsoft.corba.CosTrading.PropertySeqHelper.write (_out, modify_list);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.NotImplementedHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.NotImplementedHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferIdHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferIdHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferIdHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferIdHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferIdHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferIdHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyNameHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownPropertyNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownPropertyNameHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatchHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatchHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicPropertyHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicPropertyHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.MandatoryPropertyHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.MandatoryPropertyHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ReadonlyPropertyHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ReadonlyPropertyHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyNameHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "modify",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosTrading.RegisterOperations)_so.servant).modify( id,del_list,modify_list );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // modify


  /** This operation withdraws any offers matching the
 * specified constraints.
 *
 * @param type - The service type of offers to check. 
 * @param type - The constraint string to check offers against.
 *
 * @raises IllegalServiceType - If the specified service type
 *                              name is invalid.
 * @raises UnknownServiceType - If the specified service type
 *                              has not been registered.
 * @raises IllegalConstraint - If the constraint string is illegal.
 * @raises NoMatchingOffers - If no offers corresponding to the service type
 *                            and satisfying the constraints were found.
 */
  public void withdraw_using_constraint (String type, String constr) throws hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceType, hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceType, hoshen.xsm.lightsoft.corba.CosTrading.IllegalConstraint, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.NoMatchingOffers
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("withdraw_using_constraint",true);
          _out.write_string (type);
          _out.write_string (constr);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceTypeHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceTypeHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceTypeHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceTypeHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.IllegalConstraintHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.IllegalConstraintHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.NoMatchingOffersHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.NoMatchingOffersHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "withdraw_using_constraint",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosTrading.RegisterOperations)_so.servant).withdraw_using_constraint( type,constr );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // withdraw_using_constraint


  /** This opreration resolves the Register interface of a linked trader.
 *
 * @param name - The name of the linked trader. 
 *
 * @raises IllegalTraderName - If the specified trader name has invalid syntax.
 * @raises UnknownTraderName - If the specified trader cannot be found.
 * @raises RegisterNotSupported - If the specified trader does not support
 *                                the Register interface.
 */
  public hoshen.xsm.lightsoft.corba.CosTrading.Register resolve (String[] name) throws hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.IllegalTraderName, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownTraderName, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.RegisterNotSupported
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("resolve",true);
          hoshen.xsm.lightsoft.corba.CosTrading.LinkNameSeqHelper.write (_out, name);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.Register __result = hoshen.xsm.lightsoft.corba.CosTrading.RegisterHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.IllegalTraderNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.IllegalTraderNameHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownTraderNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownTraderNameHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.RegisterNotSupportedHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.RegisterNotSupportedHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "resolve",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.Register __result = ((hoshen.xsm.lightsoft.corba.CosTrading.RegisterOperations)_so.servant).resolve( name );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // resolve

  public hoshen.xsm.lightsoft.corba.CosTrading.Lookup lookup_if ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_lookup_if",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.Lookup __result = hoshen.xsm.lightsoft.corba.CosTrading.LookupHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_lookup_if",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.Lookup __result = ((hoshen.xsm.lightsoft.corba.CosTrading.TraderComponentsOperations)_so.servant).lookup_if(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // lookup_if

  public hoshen.xsm.lightsoft.corba.CosTrading.Register register_if ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_register_if",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.Register __result = hoshen.xsm.lightsoft.corba.CosTrading.RegisterHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_register_if",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.Register __result = ((hoshen.xsm.lightsoft.corba.CosTrading.TraderComponentsOperations)_so.servant).register_if(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // register_if

  public hoshen.xsm.lightsoft.corba.CosTrading.Link link_if ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_link_if",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.Link __result = hoshen.xsm.lightsoft.corba.CosTrading.LinkHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_link_if",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.Link __result = ((hoshen.xsm.lightsoft.corba.CosTrading.TraderComponentsOperations)_so.servant).link_if(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // link_if

  public hoshen.xsm.lightsoft.corba.CosTrading.Proxy proxy_if ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_proxy_if",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.Proxy __result = hoshen.xsm.lightsoft.corba.CosTrading.ProxyHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_proxy_if",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.Proxy __result = ((hoshen.xsm.lightsoft.corba.CosTrading.TraderComponentsOperations)_so.servant).proxy_if(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // proxy_if

  public hoshen.xsm.lightsoft.corba.CosTrading.Admin admin_if ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_admin_if",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.Admin __result = hoshen.xsm.lightsoft.corba.CosTrading.AdminHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_admin_if",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.Admin __result = ((hoshen.xsm.lightsoft.corba.CosTrading.TraderComponentsOperations)_so.servant).admin_if(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // admin_if

  public boolean supports_modifiable_properties ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_supports_modifiable_properties",true);
          _in = _invoke (_out);
          boolean __result = _in.read_boolean ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_supports_modifiable_properties",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          boolean __result = ((hoshen.xsm.lightsoft.corba.CosTrading.SupportAttributesOperations)_so.servant).supports_modifiable_properties(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // supports_modifiable_properties

  public boolean supports_dynamic_properties ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_supports_dynamic_properties",true);
          _in = _invoke (_out);
          boolean __result = _in.read_boolean ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_supports_dynamic_properties",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          boolean __result = ((hoshen.xsm.lightsoft.corba.CosTrading.SupportAttributesOperations)_so.servant).supports_dynamic_properties(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // supports_dynamic_properties

  public boolean supports_proxy_offers ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_supports_proxy_offers",true);
          _in = _invoke (_out);
          boolean __result = _in.read_boolean ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_supports_proxy_offers",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          boolean __result = ((hoshen.xsm.lightsoft.corba.CosTrading.SupportAttributesOperations)_so.servant).supports_proxy_offers(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // supports_proxy_offers

  public org.omg.CORBA.Object type_repos ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_type_repos",true);
          _in = _invoke (_out);
          org.omg.CORBA.Object __result = org.omg.CORBA.ObjectHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_type_repos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          org.omg.CORBA.Object __result = ((hoshen.xsm.lightsoft.corba.CosTrading.SupportAttributesOperations)_so.servant).type_repos(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // type_repos

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosTrading/Register:1.0", 
    "IDL:omg.org/CosTrading/TraderComponents:1.0", 
    "IDL:omg.org/CosTrading/SupportAttributes:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  final public static java.lang.Class _opsClass =
    hoshen.xsm.lightsoft.corba.CosTrading.RegisterOperations.class;

  private void readObject (java.io.ObjectInputStream s)
  {
     try 
     {
       String str = s.readUTF ();
       org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ((String[])null, null).string_to_object (str);
       org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
       _set_delegate (delegate);
     } catch (java.io.IOException e) {}
  }

  private void writeObject (java.io.ObjectOutputStream s)
  {
     try 
     {
       String str = org.omg.CORBA.ORB.init ((String[])null, null).object_to_string (this);
       s.writeUTF (str);
     } catch (java.io.IOException e) {}
  }
} // class _RegisterStub
