package hoshen.xsm.lightsoft.corba.common;


/**
* hoshen/xsm/lightsoft/corba/common/Capability_THelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/common.idl
* 13:10:51 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
   * A Capability_T value is used to identify a functionality supported by the EMS across 
   * the NML-EML interface. It is a name value pair, in which  the name represents the 
   * feature/capability name and the value represents the support or non-support of the specified 
   * feature/capability. 
   * <p>
   * The EMS capabilities for this Release include individual IDL
   * operation
   * support.  The feature/capability name part is used to identify an IDL operation
   * using the
   * following convention: 
   * "<i>module_name</i>::<i>interface_name</i>::<i>operation_name</i>".
   * Two other capabilities called "Supports_CC_sharing" and "Supports_pending" defined for
   * MultiLayerSubnetworkMgr_I indicates the EMS'
   * SNC management mode of operation.  See
   * <a href=supportingDocumentation/modesOfOperation.html>SNC Management Modes of Operation</a>
   * for details.
   * </p>
   *
   * <p>The currently defined values are as follows: <br>
   * <ul>
   * <li> "Supported": The specified feature/capability is fully or partially supported
   *  across the NML-EML interface; an operation may be partially supported if not all 
   *  values of the parameters are supported.</li>
   * <li> "Unsupported": The specified feature/capability is not supported at all across
   *  the NML-EML interface.</li>
   * </ul></p>
   *
   * <p> Other capabilities may be added with the approval of the Specification 
   ** Authority, or through bilateral agreements. </p>
   **/
abstract public class Capability_THelper
{
  private static String  _id = "IDL:mtnm.tmforum.org/common/Capability_T:1.0";

  public static void insert (org.omg.CORBA.Any a, hoshen.xsm.lightsoft.corba.globaldefs.NameAndStringValue_T that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static hoshen.xsm.lightsoft.corba.globaldefs.NameAndStringValue_T extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = hoshen.xsm.lightsoft.corba.globaldefs.NameAndStringValue_THelper.type ();
      __typeCode = org.omg.CORBA.ORB.init ().create_alias_tc (hoshen.xsm.lightsoft.corba.common.Capability_THelper.id (), "Capability_T", __typeCode);
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static hoshen.xsm.lightsoft.corba.globaldefs.NameAndStringValue_T read (org.omg.CORBA.portable.InputStream istream)
  {
    hoshen.xsm.lightsoft.corba.globaldefs.NameAndStringValue_T value = null;
    value = hoshen.xsm.lightsoft.corba.globaldefs.NameAndStringValue_THelper.read (istream);
    return value;
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, hoshen.xsm.lightsoft.corba.globaldefs.NameAndStringValue_T value)
  {
    hoshen.xsm.lightsoft.corba.globaldefs.NameAndStringValue_THelper.write (ostream, value);
  }

}
