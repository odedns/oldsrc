package hoshen.xsm.lightsoft.corba.CosNotifyFilter;


/**
* hoshen/xsm/lightsoft/corba/CosNotifyFilter/FilterFactoryPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosNotifyFilter.idl
* 13:11:16 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * Interface for a filter factory.
    */
public abstract class FilterFactoryPOA extends org.omg.PortableServer.Servant
                implements hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactoryOperations, org.omg.CORBA.portable.InvokeHandler
{

  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactory _this() {
     return hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactoryHelper.narrow(
        super._this_object());
  }

  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactory _this(org.omg.CORBA.ORB orb) {
     return hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactoryHelper.narrow(
        super._this_object(orb));
  }

  public String[] _all_interfaces(
     org.omg.PortableServer.POA poa,
     byte[] objectId) {
         return (String[])__ids.clone();
  }

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyFilter/FilterFactory:1.0"};

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("create_filter", new java.lang.Integer (0));
    _methods.put ("create_mapping_filter", new java.lang.Integer (1));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
       * Create a filter with the specified grammer.
       * @parm <code>constraint_grammar</code> - The constraint grammer to
       * be used by the filter.
       * @returns A filter object reference.
       * @raises InvalidGrammar If the specified grammer is not supported.
       */
       case 0:  // CosNotifyFilter/FilterFactory/create_filter
       {
         try {
           String constraint_grammar = in.read_string ();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter __result = null;
           __result = this.create_filter (constraint_grammar);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.write (out, __result);
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidGrammar __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidGrammarHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Create a mapping filter with the specified grammer.
       * @parm <code>constraint_grammar</code> - The constraint grammer to
       * be used by the filter.
       * @parm <code>default_value</code> - The default value to be returned
       * by match operations invoked on the mapping filter if no match is
       * found.
       * @returns A mapping filter object reference.
       * @raises InvalidGrammar If the specified grammer is not supported.
       */
       case 1:  // CosNotifyFilter/FilterFactory/create_mapping_filter
       {
         try {
           String constraint_grammar = in.read_string ();
           org.omg.CORBA.Any default_value = in.read_any ();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter __result = null;
           __result = this.create_mapping_filter (constraint_grammar, default_value);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilterHelper.write (out, __result);
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidGrammar __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidGrammarHelper.write (out, __ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke


} // class _FilterFactoryPOA
