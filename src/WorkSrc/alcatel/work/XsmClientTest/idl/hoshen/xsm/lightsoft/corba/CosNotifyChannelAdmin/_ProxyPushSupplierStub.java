package hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin;


/**
* hoshen/xsm/lightsoft/corba/CosNotifyChannelAdmin/_ProxyPushSupplierStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosNotifyChannelAdmin.idl
* 13:11:05 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * An interface for proxy push suppliers.
    */
public class _ProxyPushSupplierStub extends org.omg.CORBA_2_3.portable.ObjectImpl implements hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyPushSupplier
{
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _ProxyPushSupplierStub ()
  {
    super ();
  }

  public _ProxyPushSupplierStub (org.omg.CORBA.portable.Delegate delegate)
  {
    super ();
    _set_delegate (delegate);
  }


  /**
       * Connect an any type push consumer to this proxy.
       * @parm <code>push_consumer</code> - The <code>PushConsumer</code>
       * object reference.
       * @raises AlreadyConnected If this consumer is already connected.
       * @raises TypeError Illegal consumer type.
       */
  public void connect_any_push_consumer (hoshen.xsm.lightsoft.corba.CosEventComm.PushConsumer push_consumer) throws hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.AlreadyConnected, hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.TypeError
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("connect_any_push_consumer",true);
          hoshen.xsm.lightsoft.corba.CosEventComm.PushConsumerHelper.write (_out, push_consumer);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.AlreadyConnectedHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.AlreadyConnectedHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.TypeErrorHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.TypeErrorHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "connect_any_push_consumer",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyPushSupplierOperations)_so.servant).connect_any_push_consumer( push_consumer );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // connect_any_push_consumer


  /**
       * Causes this proxy to stop sending events to its consumer. Note
       * that events will still be queued while the connection is suspended.
       * @raises ConnectionAlreadyInactive Proxy already stopped.
       * @raises NotConnected Proxy not connected.
       */
  public void suspend_connection () throws hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConnectionAlreadyInactive, hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.NotConnected
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("suspend_connection",true);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConnectionAlreadyInactiveHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConnectionAlreadyInactiveHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.NotConnectedHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.NotConnectedHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "suspend_connection",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyPushSupplierOperations)_so.servant).suspend_connection(  );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // suspend_connection


  /**
       * Causes this proxy to start sending events to its consumer.
       * All queued events will be forwarded to the consumers.
       * @raises ConnectionAlreadyActive Proxy already started.
       * @raises NotConnected Proxy not connected.
       */
  public void resume_connection () throws hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConnectionAlreadyActive, hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.NotConnected
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("resume_connection",true);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConnectionAlreadyActiveHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConnectionAlreadyActiveHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.NotConnectedHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.NotConnectedHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "resume_connection",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyPushSupplierOperations)_so.servant).resume_connection(  );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // resume_connection


  /**
       * The type of this proxy.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyType MyType ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_MyType",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyType __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyTypeHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_MyType",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyType __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxySupplierOperations)_so.servant).MyType(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // MyType


  /**
       * The administration object that created this proxy.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin MyAdmin ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_MyAdmin",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdminHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_MyAdmin",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxySupplierOperations)_so.servant).MyAdmin(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // MyAdmin


  /**
       * A mapping filter which if a non-nil reference will be consulted 
       * for resolving the priority of the event.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter priority_filter ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_priority_filter",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter __result = hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilterHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_priority_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxySupplierOperations)_so.servant).priority_filter(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // priority_filter


  /**
       * A mapping filter which if a non-nil reference will be consulted 
       * for resolving the priority of the event.
       */
  public void priority_filter (hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter newPriority_filter)
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_set_priority_filter",true);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilterHelper.write (_out, newPriority_filter);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_set_priority_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxySupplierOperations)_so.servant).priority_filter( newPriority_filter );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // priority_filter


  /**
       * A filter which if a non-nil reference will be consulted 
       * for resolving the priority of the event.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter lifetime_filter ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_lifetime_filter",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter __result = hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilterHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_lifetime_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxySupplierOperations)_so.servant).lifetime_filter(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // lifetime_filter


  /**
       * A filter which if a non-nil reference will be consulted 
       * for resolving the priority of the event.
       */
  public void lifetime_filter (hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter newLifetime_filter)
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_set_lifetime_filter",true);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilterHelper.write (_out, newLifetime_filter);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_set_lifetime_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxySupplierOperations)_so.servant).lifetime_filter( newLifetime_filter );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // lifetime_filter


  /**
       * Get a list of event type names that this proxy can potentially
       * forward to its associated consumers.
       * @parm <code>mode</code> - The mode of type retrieval.
       * @returns A sequence of event type names.
       */
  public hoshen.xsm.lightsoft.corba.CosNotification.EventType[] obtain_offered_types (hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ObtainInfoMode mode)
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("obtain_offered_types",true);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ObtainInfoModeHelper.write (_out, mode);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotification.EventType __result[] = hoshen.xsm.lightsoft.corba.CosNotification.EventTypeSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "obtain_offered_types",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotification.EventType __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxySupplierOperations)_so.servant).obtain_offered_types( mode );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // obtain_offered_types


  /**
       * Validate whether or not this proxy can honour the specified 
       * quality of service requirements.
       * @parm <code>required_qos</code> - Quality of service name-value
       * pairs which a client is interested in validating.
       * @parm <code>available_qos</code> - Quality of service settings that
       * this proxy can support in addition to the ones in the input sequence.
       * @raises UnsupportedQoS If any of the quality of service settings
       * in the input sequence could not be honoured.
       */
  public void validate_event_qos (hoshen.xsm.lightsoft.corba.CosNotification.Property[] required_qos, hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder available_qos) throws hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("validate_event_qos",true);
          hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (_out, required_qos);
          _in = _invoke (_out);
          available_qos.value = hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHelper.read (_in);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "validate_event_qos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
         hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder _available_qos = new hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder();
          ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxySupplierOperations)_so.servant).validate_event_qos( required_qos,_available_qos );
         available_qos.value = _available_qos.value;
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // validate_event_qos


  /**
       * Returns the current quality of service settings for this object.
       * @returns A sequence of name-value pairs defining the quality of 
       * service settings.
       */
  public hoshen.xsm.lightsoft.corba.CosNotification.Property[] get_qos ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_qos",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_qos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = ((hoshen.xsm.lightsoft.corba.CosNotification.QoSAdminOperations)_so.servant).get_qos(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_qos


  /**
       * Sets the quality of service settings for this object.
       * @parm <code>qos</code> - A sequence of name-value pairs defining
       * the desired quality of service settings.
       * @raises UnsupportedQoS If the requested settings are not supported.
       */
  public void set_qos (hoshen.xsm.lightsoft.corba.CosNotification.Property[] qos) throws hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("set_qos",true);
          hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (_out, qos);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "set_qos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotification.QoSAdminOperations)_so.servant).set_qos( qos );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // set_qos


  /**
       * Validates a set of quality of service requirements.
       * @parm <code>qos</code> -  A sequence of name-value pairs defining
       * quality of service settings that are to be validated.
       * @parm <code>available_qos</code> - A sequence of all additional
       * quality of service setting supported by this object.
       * @raises UnsupportedQoS If any of the setting in the input argument
       * are not supported.
       */
  public void validate_qos (hoshen.xsm.lightsoft.corba.CosNotification.Property[] required_qos, hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder available_qos) throws hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("validate_qos",true);
          hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (_out, required_qos);
          _in = _invoke (_out);
          available_qos.value = hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHelper.read (_in);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "validate_qos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
         hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder _available_qos = new hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder();
          ((hoshen.xsm.lightsoft.corba.CosNotification.QoSAdminOperations)_so.servant).validate_qos( required_qos,_available_qos );
         available_qos.value = _available_qos.value;
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // validate_qos


  /**
       * Add a filter to this object's list of filters. All these filters
       * are tried upon reception of an event.
       * @parm <code>new_filter</code> - The filter to add.
       * @returns An unique ID that identifies the added filter.
       */
  public int add_filter (hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter new_filter)
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("add_filter",true);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.write (_out, new_filter);
          _in = _invoke (_out);
          int __result = _in.read_long ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "add_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).add_filter( new_filter );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // add_filter


  /**
       * Remove a filter from this object's list of filters.
       * @parm <code>filter</code> - The filter ID.
       * @raises FilterNotFound If the ID does not correspond to any
       * filter that has been added to this object.
       */
  public void remove_filter (int filter) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("remove_filter",true);
          _out.write_long (filter);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "remove_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).remove_filter( filter );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // remove_filter


  /**
       * Get a filter from the filter ID.
       * @parm <code>filter</code> - The filter ID.
       * @raises FilterNotFound If the ID does not correspond to any
       * filter that has been added to this object.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter get_filter (int filter) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_filter",true);
          _out.write_long (filter);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter __result = hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).get_filter( filter );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_filter


  /**
       * Get all filters added to this administration object.
       * @returns A sequence of filter IDs.
       */
  public int[] get_all_filters ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_all_filters",true);
          _in = _invoke (_out);
          int __result[] = hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterIDSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_all_filters",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).get_all_filters(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_all_filters


  /**
       * Remove all filters added to this administration object.
       */
  public void remove_all_filters ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("remove_all_filters",true);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "remove_all_filters",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).remove_all_filters(  );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // remove_all_filters


  /**
       * Indicates that a consumer is changing the names of the types of
       * events it is subscribed to.
       * @parm <code>added</code> - The event types added.
       * @parm <code>removed</code> - The event types removed.
       * @raises InvalidEventType If any of the event type names in either 
       * the of the input sequences are invalid.
       */
  public void subscription_change (hoshen.xsm.lightsoft.corba.CosNotification.EventType[] added, hoshen.xsm.lightsoft.corba.CosNotification.EventType[] removed) throws hoshen.xsm.lightsoft.corba.CosNotifyComm.InvalidEventType
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("subscription_change",true);
          hoshen.xsm.lightsoft.corba.CosNotification.EventTypeSeqHelper.write (_out, added);
          hoshen.xsm.lightsoft.corba.CosNotification.EventTypeSeqHelper.write (_out, removed);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyComm.InvalidEventTypeHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyComm.InvalidEventTypeHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "subscription_change",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyComm.NotifySubscribeOperations)_so.servant).subscription_change( added,removed );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // subscription_change


  /**
       * Disconnect a push supplier.
       */
  public void disconnect_push_supplier ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("disconnect_push_supplier",true);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "disconnect_push_supplier",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosEventComm.PushSupplierOperations)_so.servant).disconnect_push_supplier(  );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // disconnect_push_supplier

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0", 
    "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0", 
    "IDL:omg.org/CosNotification/QoSAdmin:1.0", 
    "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0", 
    "IDL:omg.org/CosNotifyComm/PushSupplier:1.0", 
    "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0", 
    "IDL:omg.org/CosEventComm/PushSupplier:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  final public static java.lang.Class _opsClass =
    hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyPushSupplierOperations.class;

  private void readObject (java.io.ObjectInputStream s)
  {
     try 
     {
       String str = s.readUTF ();
       org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ((String[])null, null).string_to_object (str);
       org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
       _set_delegate (delegate);
     } catch (java.io.IOException e) {}
  }

  private void writeObject (java.io.ObjectOutputStream s)
  {
     try 
     {
       String str = org.omg.CORBA.ORB.init ((String[])null, null).object_to_string (this);
       s.writeUTF (str);
     } catch (java.io.IOException e) {}
  }
} // class _ProxyPushSupplierStub
