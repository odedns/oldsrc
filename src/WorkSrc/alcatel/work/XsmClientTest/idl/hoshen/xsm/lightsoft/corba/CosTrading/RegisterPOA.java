package hoshen.xsm.lightsoft.corba.CosTrading;


/**
* hoshen/xsm/lightsoft/corba/CosTrading/RegisterPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosTrading.idl
* 13:11:19 GMT+02:00 יום חמישי 28 יוני 2007
*/


/** This interface is used export offers of service to
 * the trader and manage these offers.
 */
public abstract class RegisterPOA extends org.omg.PortableServer.Servant
                implements hoshen.xsm.lightsoft.corba.CosTrading.RegisterOperations, org.omg.CORBA.portable.InvokeHandler
{

  public hoshen.xsm.lightsoft.corba.CosTrading.Register _this() {
     return hoshen.xsm.lightsoft.corba.CosTrading.RegisterHelper.narrow(
        super._this_object());
  }

  public hoshen.xsm.lightsoft.corba.CosTrading.Register _this(org.omg.CORBA.ORB orb) {
     return hoshen.xsm.lightsoft.corba.CosTrading.RegisterHelper.narrow(
        super._this_object(orb));
  }

  public String[] _all_interfaces(
     org.omg.PortableServer.POA poa,
     byte[] objectId) {
         return (String[])__ids.clone();
  }

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosTrading/Register:1.0", 
    "IDL:omg.org/CosTrading/TraderComponents:1.0", 
    "IDL:omg.org/CosTrading/SupportAttributes:1.0"};

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("export", new java.lang.Integer (0));
    _methods.put ("withdraw", new java.lang.Integer (1));
    _methods.put ("describe", new java.lang.Integer (2));
    _methods.put ("modify", new java.lang.Integer (3));
    _methods.put ("withdraw_using_constraint", new java.lang.Integer (4));
    _methods.put ("resolve", new java.lang.Integer (5));
    _methods.put ("_get_lookup_if", new java.lang.Integer (6));
    _methods.put ("_get_register_if", new java.lang.Integer (7));
    _methods.put ("_get_link_if", new java.lang.Integer (8));
    _methods.put ("_get_proxy_if", new java.lang.Integer (9));
    _methods.put ("_get_admin_if", new java.lang.Integer (10));
    _methods.put ("_get_supports_modifiable_properties", new java.lang.Integer (11));
    _methods.put ("_get_supports_dynamic_properties", new java.lang.Integer (12));
    _methods.put ("_get_supports_proxy_offers", new java.lang.Integer (13));
    _methods.put ("_get_type_repos", new java.lang.Integer (14));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /* doc: 37 */
       case 0:  // CosTrading/Register/export
       {
         try {
           org.omg.CORBA.Object reference = org.omg.CORBA.ObjectHelper.read (in);
           String type = in.read_string ();
           hoshen.xsm.lightsoft.corba.CosTrading.Property properties[] = hoshen.xsm.lightsoft.corba.CosTrading.PropertySeqHelper.read (in);
           String __result = null;
           __result = this.export (reference, type, properties);
           out = $rh.createReply();
           out.write_string (__result);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InvalidObjectRef __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InvalidObjectRefHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceType __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceTypeHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceType __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceTypeHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InterfaceTypeMismatch __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InterfaceTypeMismatchHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyName __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyNameHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatch __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatchHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicProperty __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicPropertyHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.MissingMandatoryProperty __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.MissingMandatoryPropertyHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyName __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyNameHelper.write (out, __ex);
         }
         break;
       }


  /* doc: 35 */
       case 1:  // CosTrading/Register/withdraw
       {
         try {
           String id = in.read_string ();
           this.withdraw (id);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferId __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferIdHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferId __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferIdHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferId __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferIdHelper.write (out, __ex);
         }
         break;
       }


  /* doc: 31 */
       case 2:  // CosTrading/Register/describe
       {
         try {
           String id = in.read_string ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.OfferInfo __result = null;
           __result = this.describe (id);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.OfferInfoHelper.write (out, __result);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferId __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferIdHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferId __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferIdHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferId __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferIdHelper.write (out, __ex);
         }
         break;
       }


  /** This operation modifies the properties supported
 * by a traded offer of service. Properties that are read-only
 * or mandatory may not be deleted and properties that are
 * read-only may not be modified.
 *
 * @param id - The identifier of the offer to be modified.
 * @param del_list - The list of properties to be deleted.
 * @param modify_list - The list of properties to be added or modified.
 *
 * @raises NotImplemented - If this operation is not implemented by the trader.
 * @raises IllegalOfferId - If the format of the offer identifier is invalid.
 * @raises UnknownOfferId - If the trader knows nothing of the identified offer.
 * @raises ProxyOfferId - The trader cannot withdraw the proxy offer.
 * @raises IllegalPropertyName - If a property name is illegal.
 * @raises UnknownPropertyName - If the offer does not support the named property.
 * @raises PropertyTypeMismatch - If the type of a property does not match
 *                                the type specified in the service definition.
 * @raises ReadonlyDynamicProperty - If an attempt has been made to assign a dynamic
 *                                   property value to a mandatory property.
 * @raises MandatoryProperty - If an attemp has been made to delete a mandatory property
 * @raises ReadonlyProperty - If an attemp has been made to modify a read-only property
 * @raises DuplicatePropertyName - If duplicate property names are specified.
 */
       case 3:  // CosTrading/Register/modify
       {
         try {
           String id = in.read_string ();
           String del_list[] = hoshen.xsm.lightsoft.corba.CosTrading.PropertyNameSeqHelper.read (in);
           hoshen.xsm.lightsoft.corba.CosTrading.Property modify_list[] = hoshen.xsm.lightsoft.corba.CosTrading.PropertySeqHelper.read (in);
           this.modify (id, del_list, modify_list);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.NotImplemented __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.NotImplementedHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferId __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferIdHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferId __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferIdHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferId __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferIdHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyName __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyNameHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownPropertyName __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownPropertyNameHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatch __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatchHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicProperty __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicPropertyHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.MandatoryProperty __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.MandatoryPropertyHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ReadonlyProperty __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ReadonlyPropertyHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyName __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyNameHelper.write (out, __ex);
         }
         break;
       }


  /** This operation withdraws any offers matching the
 * specified constraints.
 *
 * @param type - The service type of offers to check. 
 * @param type - The constraint string to check offers against.
 *
 * @raises IllegalServiceType - If the specified service type
 *                              name is invalid.
 * @raises UnknownServiceType - If the specified service type
 *                              has not been registered.
 * @raises IllegalConstraint - If the constraint string is illegal.
 * @raises NoMatchingOffers - If no offers corresponding to the service type
 *                            and satisfying the constraints were found.
 */
       case 4:  // CosTrading/Register/withdraw_using_constraint
       {
         try {
           String type = in.read_string ();
           String constr = in.read_string ();
           this.withdraw_using_constraint (type, constr);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceType __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceTypeHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceType __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceTypeHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.IllegalConstraint __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.IllegalConstraintHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.NoMatchingOffers __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.NoMatchingOffersHelper.write (out, __ex);
         }
         break;
       }


  /** This opreration resolves the Register interface of a linked trader.
 *
 * @param name - The name of the linked trader. 
 *
 * @raises IllegalTraderName - If the specified trader name has invalid syntax.
 * @raises UnknownTraderName - If the specified trader cannot be found.
 * @raises RegisterNotSupported - If the specified trader does not support
 *                                the Register interface.
 */
       case 5:  // CosTrading/Register/resolve
       {
         try {
           String name[] = hoshen.xsm.lightsoft.corba.CosTrading.LinkNameSeqHelper.read (in);
           hoshen.xsm.lightsoft.corba.CosTrading.Register __result = null;
           __result = this.resolve (name);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterHelper.write (out, __result);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.IllegalTraderName __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.IllegalTraderNameHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownTraderName __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownTraderNameHelper.write (out, __ex);
         } catch (hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.RegisterNotSupported __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.RegisterNotSupportedHelper.write (out, __ex);
         }
         break;
       }

       case 6:  // CosTrading/TraderComponents/_get_lookup_if
       {
         hoshen.xsm.lightsoft.corba.CosTrading.Lookup __result = null;
         __result = this.lookup_if ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosTrading.LookupHelper.write (out, __result);
         break;
       }

       case 7:  // CosTrading/TraderComponents/_get_register_if
       {
         hoshen.xsm.lightsoft.corba.CosTrading.Register __result = null;
         __result = this.register_if ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosTrading.RegisterHelper.write (out, __result);
         break;
       }

       case 8:  // CosTrading/TraderComponents/_get_link_if
       {
         hoshen.xsm.lightsoft.corba.CosTrading.Link __result = null;
         __result = this.link_if ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosTrading.LinkHelper.write (out, __result);
         break;
       }

       case 9:  // CosTrading/TraderComponents/_get_proxy_if
       {
         hoshen.xsm.lightsoft.corba.CosTrading.Proxy __result = null;
         __result = this.proxy_if ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosTrading.ProxyHelper.write (out, __result);
         break;
       }

       case 10:  // CosTrading/TraderComponents/_get_admin_if
       {
         hoshen.xsm.lightsoft.corba.CosTrading.Admin __result = null;
         __result = this.admin_if ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosTrading.AdminHelper.write (out, __result);
         break;
       }

       case 11:  // CosTrading/SupportAttributes/_get_supports_modifiable_properties
       {
         boolean __result = false;
         __result = this.supports_modifiable_properties ();
         out = $rh.createReply();
         out.write_boolean (__result);
         break;
       }

       case 12:  // CosTrading/SupportAttributes/_get_supports_dynamic_properties
       {
         boolean __result = false;
         __result = this.supports_dynamic_properties ();
         out = $rh.createReply();
         out.write_boolean (__result);
         break;
       }

       case 13:  // CosTrading/SupportAttributes/_get_supports_proxy_offers
       {
         boolean __result = false;
         __result = this.supports_proxy_offers ();
         out = $rh.createReply();
         out.write_boolean (__result);
         break;
       }

       case 14:  // CosTrading/SupportAttributes/_get_type_repos
       {
         org.omg.CORBA.Object __result = null;
         __result = this.type_repos ();
         out = $rh.createReply();
         org.omg.CORBA.ObjectHelper.write (out, __result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke


} // class _RegisterPOA
