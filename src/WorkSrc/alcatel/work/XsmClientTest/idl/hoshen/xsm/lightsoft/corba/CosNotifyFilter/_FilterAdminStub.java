package hoshen.xsm.lightsoft.corba.CosNotifyFilter;


/**
* hoshen/xsm/lightsoft/corba/CosNotifyFilter/_FilterAdminStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosNotifyFilter.idl
* 13:11:16 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * Interface for filter administrators.
    */
public class _FilterAdminStub extends org.omg.CORBA_2_3.portable.ObjectImpl implements hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdmin
{
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _FilterAdminStub ()
  {
    super ();
  }

  public _FilterAdminStub (org.omg.CORBA.portable.Delegate delegate)
  {
    super ();
    _set_delegate (delegate);
  }


  /**
       * Add a filter to this object's list of filters. All these filters
       * are tried upon reception of an event.
       * @parm <code>new_filter</code> - The filter to add.
       * @returns An unique ID that identifies the added filter.
       */
  public int add_filter (hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter new_filter)
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("add_filter",true);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.write (_out, new_filter);
          _in = _invoke (_out);
          int __result = _in.read_long ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "add_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).add_filter( new_filter );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // add_filter


  /**
       * Remove a filter from this object's list of filters.
       * @parm <code>filter</code> - The filter ID.
       * @raises FilterNotFound If the ID does not correspond to any
       * filter that has been added to this object.
       */
  public void remove_filter (int filter) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("remove_filter",true);
          _out.write_long (filter);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "remove_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).remove_filter( filter );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // remove_filter


  /**
       * Get a filter from the filter ID.
       * @parm <code>filter</code> - The filter ID.
       * @raises FilterNotFound If the ID does not correspond to any
       * filter that has been added to this object.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter get_filter (int filter) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_filter",true);
          _out.write_long (filter);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter __result = hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).get_filter( filter );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_filter


  /**
       * Get all filters added to this administration object.
       * @returns A sequence of filter IDs.
       */
  public int[] get_all_filters ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_all_filters",true);
          _in = _invoke (_out);
          int __result[] = hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterIDSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_all_filters",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).get_all_filters(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_all_filters


  /**
       * Remove all filters added to this administration object.
       */
  public void remove_all_filters ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("remove_all_filters",true);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "remove_all_filters",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).remove_all_filters(  );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // remove_all_filters

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  final public static java.lang.Class _opsClass =
    hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations.class;

  private void readObject (java.io.ObjectInputStream s)
  {
     try 
     {
       String str = s.readUTF ();
       org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ((String[])null, null).string_to_object (str);
       org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
       _set_delegate (delegate);
     } catch (java.io.IOException e) {}
  }

  private void writeObject (java.io.ObjectOutputStream s)
  {
     try 
     {
       String str = org.omg.CORBA.ORB.init ((String[])null, null).object_to_string (this);
       s.writeUTF (str);
     } catch (java.io.IOException e) {}
  }
} // class _FilterAdminStub
