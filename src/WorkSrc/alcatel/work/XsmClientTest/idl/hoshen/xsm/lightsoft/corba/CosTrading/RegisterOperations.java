package hoshen.xsm.lightsoft.corba.CosTrading;


/**
* hoshen/xsm/lightsoft/corba/CosTrading/RegisterOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosTrading.idl
* 13:11:20 GMT+02:00 יום חמישי 28 יוני 2007
*/


/** This interface is used export offers of service to
 * the trader and manage these offers.
 */
public interface RegisterOperations  extends hoshen.xsm.lightsoft.corba.CosTrading.TraderComponentsOperations, hoshen.xsm.lightsoft.corba.CosTrading.SupportAttributesOperations
{

  /* doc: 37 */
  String export (org.omg.CORBA.Object reference, String type, hoshen.xsm.lightsoft.corba.CosTrading.Property[] properties) throws hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InvalidObjectRef, hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceType, hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceType, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.InterfaceTypeMismatch, hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyName, hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatch, hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicProperty, hoshen.xsm.lightsoft.corba.CosTrading.MissingMandatoryProperty, hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyName;

  /* doc: 35 */
  void withdraw (String id) throws hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferId, hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferId, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferId;

  /* doc: 31 */
  hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.OfferInfo describe (String id) throws hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferId, hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferId, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferId;

  /** This operation modifies the properties supported
 * by a traded offer of service. Properties that are read-only
 * or mandatory may not be deleted and properties that are
 * read-only may not be modified.
 *
 * @param id - The identifier of the offer to be modified.
 * @param del_list - The list of properties to be deleted.
 * @param modify_list - The list of properties to be added or modified.
 *
 * @raises NotImplemented - If this operation is not implemented by the trader.
 * @raises IllegalOfferId - If the format of the offer identifier is invalid.
 * @raises UnknownOfferId - If the trader knows nothing of the identified offer.
 * @raises ProxyOfferId - The trader cannot withdraw the proxy offer.
 * @raises IllegalPropertyName - If a property name is illegal.
 * @raises UnknownPropertyName - If the offer does not support the named property.
 * @raises PropertyTypeMismatch - If the type of a property does not match
 *                                the type specified in the service definition.
 * @raises ReadonlyDynamicProperty - If an attempt has been made to assign a dynamic
 *                                   property value to a mandatory property.
 * @raises MandatoryProperty - If an attemp has been made to delete a mandatory property
 * @raises ReadonlyProperty - If an attemp has been made to modify a read-only property
 * @raises DuplicatePropertyName - If duplicate property names are specified.
 */
  void modify (String id, String[] del_list, hoshen.xsm.lightsoft.corba.CosTrading.Property[] modify_list) throws hoshen.xsm.lightsoft.corba.CosTrading.NotImplemented, hoshen.xsm.lightsoft.corba.CosTrading.IllegalOfferId, hoshen.xsm.lightsoft.corba.CosTrading.UnknownOfferId, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ProxyOfferId, hoshen.xsm.lightsoft.corba.CosTrading.IllegalPropertyName, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownPropertyName, hoshen.xsm.lightsoft.corba.CosTrading.PropertyTypeMismatch, hoshen.xsm.lightsoft.corba.CosTrading.ReadonlyDynamicProperty, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.MandatoryProperty, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.ReadonlyProperty, hoshen.xsm.lightsoft.corba.CosTrading.DuplicatePropertyName;

  /** This operation withdraws any offers matching the
 * specified constraints.
 *
 * @param type - The service type of offers to check. 
 * @param type - The constraint string to check offers against.
 *
 * @raises IllegalServiceType - If the specified service type
 *                              name is invalid.
 * @raises UnknownServiceType - If the specified service type
 *                              has not been registered.
 * @raises IllegalConstraint - If the constraint string is illegal.
 * @raises NoMatchingOffers - If no offers corresponding to the service type
 *                            and satisfying the constraints were found.
 */
  void withdraw_using_constraint (String type, String constr) throws hoshen.xsm.lightsoft.corba.CosTrading.IllegalServiceType, hoshen.xsm.lightsoft.corba.CosTrading.UnknownServiceType, hoshen.xsm.lightsoft.corba.CosTrading.IllegalConstraint, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.NoMatchingOffers;

  /** This opreration resolves the Register interface of a linked trader.
 *
 * @param name - The name of the linked trader. 
 *
 * @raises IllegalTraderName - If the specified trader name has invalid syntax.
 * @raises UnknownTraderName - If the specified trader cannot be found.
 * @raises RegisterNotSupported - If the specified trader does not support
 *                                the Register interface.
 */
  hoshen.xsm.lightsoft.corba.CosTrading.Register resolve (String[] name) throws hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.IllegalTraderName, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.UnknownTraderName, hoshen.xsm.lightsoft.corba.CosTrading.RegisterPackage.RegisterNotSupported;
} // interface RegisterOperations
