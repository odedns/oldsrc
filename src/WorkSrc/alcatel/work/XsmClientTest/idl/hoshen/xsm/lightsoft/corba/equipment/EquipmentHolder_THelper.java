package hoshen.xsm.lightsoft.corba.equipment;


/**
* hoshen/xsm/lightsoft/corba/equipment/EquipmentHolder_THelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/equipment.idl
* 13:11:34 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
   * <p>Represents the physical resource of a network element that is 
   * capable of holding other physical resources. Examples of resources 
   * are equipment racks, shelves, or slots.</p>
   * An equipment holder object may contain 
   * a number of instances of other equipment holder objects
   * (for instance representing 
   * slots within a shelf, or shelves within a rack), 
   * and/or a single equipment object.
   *
   * globaldefs::NamingAttributes_T <b>name</b>:
   * <dir>An equipment holder is identified by a unique name.
   * The EMS is responsible for guaranteeing the uniqueness of the name
   * within the context of the ManagedElement.
   * The naming for equipment is deterministic, see
   * <a href=supportingDocumentation/objectNaming.html>Object Naming</a>.
   * </dir>
   *
   * string <b>userLabel</b>:
   * <dir>The userLabel is provisionable by the NMS. This attribute can be set 
   * by the NMS through the Common_I interface service
   * <a href=_common.Common_I.html#common::Common_I::setUserLabel>setUserLabel</a>. 
   * It is a read/write attribute.</dir>
   *
   * string <b>nativeEMSName</b>:
   * <dir> Represents how the equipment holder is referred to on EMS/NE displays. Its
   * aim is to provide a "nomenclature bridge" to aid relating information
   * presented on NMS displays to EMS/NE displays (via GUI cut through).
   * May be a NULL string.</dir>
   *
   * string <b>owner</b>:
   * <dir>owner may be specified by the NMS. May be empty.</dir>
   *
   * boolean <b>alarmReportingIndicator</b>:
   * <dir> Provides an indication whether alarm reporting for this instance 
   * is active or not. It is a read/write attribute.</dir>
   *
   * EquipmentHolderType_T <b>holderType</b>:
   * <dir>Indicates the type of equipment holder.</dir>
   *
   * NamingAttributes_T <b>expectedOrInstalledEquipment</b>: 
   * <dir>The equipment object expected or installed in the equipment holder, if any.
   * NULL if the equipment holder is empty or if it only contains other equipment holders.
   * </dir>
   *
   * EquipmentObjectTypeList_T <b>acceptableEquipmentTypeList</b>: 
   * <dir>Represents the types of equipment objects that can be supported 
   * directly by the equipment holder.  This is an empty list if the equipment holder
   * can only contain other equipment holders.</dir>
   *
   * HolderState_T <b>holderState</b>: 
   * <dir>Represents the state of the equipment holder.</dir>
   *
   * globaldefs::NVSList_T <b>additionalInfo</b>:
   * <dir>This attribute allows the communication from the EMS to the NMS of additional 
   * information which is not explicitly modelled.
   * It is a readonly attribute.</dir>
   **/
abstract public class EquipmentHolder_THelper
{
  private static String  _id = "IDL:mtnm.tmforum.org/equipment/EquipmentHolder_T:1.0";

  public static void insert (org.omg.CORBA.Any a, hoshen.xsm.lightsoft.corba.equipment.EquipmentHolder_T that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static hoshen.xsm.lightsoft.corba.equipment.EquipmentHolder_T extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  private static boolean __active = false;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      synchronized (org.omg.CORBA.TypeCode.class)
      {
        if (__typeCode == null)
        {
          if (__active)
          {
            return org.omg.CORBA.ORB.init().create_recursive_tc ( _id );
          }
          __active = true;
          org.omg.CORBA.StructMember[] _members0 = new org.omg.CORBA.StructMember [10];
          org.omg.CORBA.TypeCode _tcOf_members0 = null;
          _tcOf_members0 = hoshen.xsm.lightsoft.corba.globaldefs.NameAndStringValue_THelper.type ();
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_sequence_tc (0, _tcOf_members0);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_alias_tc (hoshen.xsm.lightsoft.corba.globaldefs.NVSList_THelper.id (), "NVSList_T", _tcOf_members0);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_alias_tc (hoshen.xsm.lightsoft.corba.globaldefs.NamingAttributes_THelper.id (), "NamingAttributes_T", _tcOf_members0);
          _members0[0] = new org.omg.CORBA.StructMember (
            "name",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
          _members0[1] = new org.omg.CORBA.StructMember (
            "userLabel",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
          _members0[2] = new org.omg.CORBA.StructMember (
            "nativeEMSName",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
          _members0[3] = new org.omg.CORBA.StructMember (
            "owner",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_boolean);
          _members0[4] = new org.omg.CORBA.StructMember (
            "alarmReportingIndicator",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_alias_tc (hoshen.xsm.lightsoft.corba.equipment.EquipmentHolderType_THelper.id (), "EquipmentHolderType_T", _tcOf_members0);
          _members0[5] = new org.omg.CORBA.StructMember (
            "holderType",
            _tcOf_members0,
            null);
          _tcOf_members0 = hoshen.xsm.lightsoft.corba.globaldefs.NameAndStringValue_THelper.type ();
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_sequence_tc (0, _tcOf_members0);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_alias_tc (hoshen.xsm.lightsoft.corba.globaldefs.NVSList_THelper.id (), "NVSList_T", _tcOf_members0);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_alias_tc (hoshen.xsm.lightsoft.corba.globaldefs.NamingAttributes_THelper.id (), "NamingAttributes_T", _tcOf_members0);
          _members0[6] = new org.omg.CORBA.StructMember (
            "expectedOrInstalledEquipment",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_alias_tc (hoshen.xsm.lightsoft.corba.equipment.EquipmentObjectType_THelper.id (), "EquipmentObjectType_T", _tcOf_members0);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_sequence_tc (0, _tcOf_members0);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_alias_tc (hoshen.xsm.lightsoft.corba.equipment.EquipmentObjectTypeList_THelper.id (), "EquipmentObjectTypeList_T", _tcOf_members0);
          _members0[7] = new org.omg.CORBA.StructMember (
            "acceptableEquipmentTypeList",
            _tcOf_members0,
            null);
          _tcOf_members0 = hoshen.xsm.lightsoft.corba.equipment.HolderState_THelper.type ();
          _members0[8] = new org.omg.CORBA.StructMember (
            "holderState",
            _tcOf_members0,
            null);
          _tcOf_members0 = hoshen.xsm.lightsoft.corba.globaldefs.NameAndStringValue_THelper.type ();
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_sequence_tc (0, _tcOf_members0);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_alias_tc (hoshen.xsm.lightsoft.corba.globaldefs.NVSList_THelper.id (), "NVSList_T", _tcOf_members0);
          _members0[9] = new org.omg.CORBA.StructMember (
            "additionalInfo",
            _tcOf_members0,
            null);
          __typeCode = org.omg.CORBA.ORB.init ().create_struct_tc (hoshen.xsm.lightsoft.corba.equipment.EquipmentHolder_THelper.id (), "EquipmentHolder_T", _members0);
          __active = false;
        }
      }
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static hoshen.xsm.lightsoft.corba.equipment.EquipmentHolder_T read (org.omg.CORBA.portable.InputStream istream)
  {
    hoshen.xsm.lightsoft.corba.equipment.EquipmentHolder_T value = new hoshen.xsm.lightsoft.corba.equipment.EquipmentHolder_T ();
    value.name = hoshen.xsm.lightsoft.corba.globaldefs.NVSList_THelper.read (istream);
    value.userLabel = istream.read_string ();
    value.nativeEMSName = istream.read_string ();
    value.owner = istream.read_string ();
    value.alarmReportingIndicator = istream.read_boolean ();
    value.holderType = istream.read_string ();
    value.expectedOrInstalledEquipment = hoshen.xsm.lightsoft.corba.globaldefs.NVSList_THelper.read (istream);
    value.acceptableEquipmentTypeList = hoshen.xsm.lightsoft.corba.equipment.EquipmentObjectTypeList_THelper.read (istream);
    value.holderState = hoshen.xsm.lightsoft.corba.equipment.HolderState_THelper.read (istream);
    value.additionalInfo = hoshen.xsm.lightsoft.corba.globaldefs.NVSList_THelper.read (istream);
    return value;
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, hoshen.xsm.lightsoft.corba.equipment.EquipmentHolder_T value)
  {
    hoshen.xsm.lightsoft.corba.globaldefs.NVSList_THelper.write (ostream, value.name);
    ostream.write_string (value.userLabel);
    ostream.write_string (value.nativeEMSName);
    ostream.write_string (value.owner);
    ostream.write_boolean (value.alarmReportingIndicator);
    ostream.write_string (value.holderType);
    hoshen.xsm.lightsoft.corba.globaldefs.NVSList_THelper.write (ostream, value.expectedOrInstalledEquipment);
    hoshen.xsm.lightsoft.corba.equipment.EquipmentObjectTypeList_THelper.write (ostream, value.acceptableEquipmentTypeList);
    hoshen.xsm.lightsoft.corba.equipment.HolderState_THelper.write (ostream, value.holderState);
    hoshen.xsm.lightsoft.corba.globaldefs.NVSList_THelper.write (ostream, value.additionalInfo);
  }

}
