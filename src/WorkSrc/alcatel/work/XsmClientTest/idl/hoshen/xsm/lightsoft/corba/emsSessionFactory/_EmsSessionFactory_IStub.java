package hoshen.xsm.lightsoft.corba.emsSessionFactory;


/**
* hoshen/xsm/lightsoft/corba/emsSessionFactory/_EmsSessionFactory_IStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/emsSessionFactory.idl
* 13:11:32 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
   * <p>There is a single instance of the EmsSessionFactory_I.  It is the 
   * entry point to the Server.
   * This is the object reference that the client uses to connect to the 
   * server.</p>
   *
   * <p>This interface implements the version interface and will return 
   * the server idl version.</p>
   **/
public class _EmsSessionFactory_IStub extends org.omg.CORBA_2_3.portable.ObjectImpl implements hoshen.xsm.lightsoft.corba.emsSessionFactory.EmsSessionFactory_I
{
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _EmsSessionFactory_IStub ()
  {
    super ();
  }

  public _EmsSessionFactory_IStub (org.omg.CORBA.portable.Delegate delegate)
  {
    super ();
    _set_delegate (delegate);
  }


  /**
   * This operation allows the NMS to obtain the EmsSession_I object from
   * which all managers of the EMS can be obtained.
   *
   * @parm user: The user or application that is trying to access the server.
   * @parm password: The password of the user.  Can be empty string.
   * @parm client: A handle to the NMS NmsSession_I object, to which the returned
   *  EmsSession_I object has to be associated.
   * @parm emsSessionInterface: It is a CORBA IOR for the EmsSession_I interface.
   * @raises globaldefs::ProcessingFailureException<dir>
   * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal failure<br>
   * EXCPT_INVALID_INPUT - Raised when client is invalid<br>
   * EXCPT_ACCESS_DENIED - Raised in case of security violation</dir>
   **/
  public void getEmsSession (String user, String password, hoshen.xsm.lightsoft.corba.nmsSession.NmsSession_I client, hoshen.xsm.lightsoft.corba.emsSession.EmsSession_IHolder emsSessionInterface) throws hoshen.xsm.lightsoft.corba.globaldefs.ProcessingFailureException
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("getEmsSession",true);
          _out.write_string (user);
          _out.write_string (password);
          hoshen.xsm.lightsoft.corba.nmsSession.NmsSession_IHelper.write (_out, client);
          _in = _invoke (_out);
          emsSessionInterface.value = hoshen.xsm.lightsoft.corba.emsSession.EmsSession_IHelper.read (_in);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.globaldefs.ProcessingFailureExceptionHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.globaldefs.ProcessingFailureExceptionHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "getEmsSession",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
         hoshen.xsm.lightsoft.corba.emsSession.EmsSession_IHolder _emsSessionInterface = new hoshen.xsm.lightsoft.corba.emsSession.EmsSession_IHolder();
          ((hoshen.xsm.lightsoft.corba.emsSessionFactory.EmsSessionFactory_IOperations)_so.servant).getEmsSession( user,password,client,_emsSessionInterface );
         emsSessionInterface.value = _emsSessionInterface.value;
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // getEmsSession


  /**
   * <p>This service returns the version of the IDL that the corresponding 
   * EMS object supports.</p>
   *
   * The format of the return string is as follows:
   * <i>Release</i>.<i>Major</i>[.<i>Minor</i>] where <i>Release</i>,
   * <i>Major</i> and <i>Minor</i> are strings 
   * that contain only digits.
   * 
   * For example, 2.1 indicates release 2 and major release 1, 
   * 1.3 indicates release 1 and major release 3, and so on.
   * Note that x.y has the same meaning as x.y.0 
   * 
   * The minor digit is used for bug fixing the major release.  
   * e.g 1.2.1 is a minor release on 1.2.   
   *
   * Any changes to any IDL files must be approved by the 
   * Specification Authority.
   *
   * For TMF 814 version 2.0, the version is "2.0".
   *
   * @returns string	the version of the interface 
   **/
  public String getVersion ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("getVersion",true);
          _in = _invoke (_out);
          String __result = _in.read_string ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "getVersion",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          String __result = ((hoshen.xsm.lightsoft.corba.mtnmVersion.Version_IOperations)_so.servant).getVersion(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // getVersion

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:mtnm.tmforum.org/emsSessionFactory/EmsSessionFactory_I:1.0", 
    "IDL:mtnm.tmforum.org/mtnmVersion/Version_I:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  final public static java.lang.Class _opsClass =
    hoshen.xsm.lightsoft.corba.emsSessionFactory.EmsSessionFactory_IOperations.class;

  private void readObject (java.io.ObjectInputStream s)
  {
     try 
     {
       String str = s.readUTF ();
       org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ((String[])null, null).string_to_object (str);
       org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
       _set_delegate (delegate);
     } catch (java.io.IOException e) {}
  }

  private void writeObject (java.io.ObjectOutputStream s)
  {
     try 
     {
       String str = org.omg.CORBA.ORB.init ((String[])null, null).object_to_string (this);
       s.writeUTF (str);
     } catch (java.io.IOException e) {}
  }
} // class _EmsSessionFactory_IStub
