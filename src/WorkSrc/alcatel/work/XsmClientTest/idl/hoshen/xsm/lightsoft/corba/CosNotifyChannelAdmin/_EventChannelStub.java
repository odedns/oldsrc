package hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin;


/**
* hoshen/xsm/lightsoft/corba/CosNotifyChannelAdmin/_EventChannelStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosNotifyChannelAdmin.idl
* 13:11:07 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * An interface for the event channel.
    */
public class _EventChannelStub extends org.omg.CORBA_2_3.portable.ObjectImpl implements hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannel
{
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _EventChannelStub ()
  {
    super ();
  }

  public _EventChannelStub (org.omg.CORBA.portable.Delegate delegate)
  {
    super ();
    _set_delegate (delegate);
  }


  /**
       * The factory object that created this event channel object.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelFactory MyFactory ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_MyFactory",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelFactory __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelFactoryHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_MyFactory",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelFactory __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations)_so.servant).MyFactory(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // MyFactory


  /**
       * The default consumer administration object. This object has the 
       * unique identification number zero.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin default_consumer_admin ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_default_consumer_admin",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdminHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_default_consumer_admin",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations)_so.servant).default_consumer_admin(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // default_consumer_admin


  /**
       * The default supplier administration object. This object has the 
       * unique identification number zero.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin default_supplier_admin ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_default_supplier_admin",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_default_supplier_admin",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations)_so.servant).default_supplier_admin(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // default_supplier_admin


  /**
       * The default filter factory object for this event channel.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactory default_filter_factory ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_default_filter_factory",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactory __result = hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactoryHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_default_filter_factory",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactory __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations)_so.servant).default_filter_factory(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // default_filter_factory


  /**
       * Creates an administration object for event consumers.
       * @parm <code>op</code> - Indicates whether the newly created
       * administration object should use AND or OR semantics when combining
       * administration object filters and proxy filters.
       * @parm <code>id</code> - The unique identifier for the administration
       * object.
       * @returns A <code>ConsumerAdmin</code> object reference.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin new_for_consumers (hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperator op, org.omg.CORBA.IntHolder id)
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("new_for_consumers",true);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperatorHelper.write (_out, op);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdminHelper.read (_in);
          id.value = _in.read_long ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "new_for_consumers",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
         org.omg.CORBA.IntHolder _id = new org.omg.CORBA.IntHolder();
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations)_so.servant).new_for_consumers( op,_id );
         id.value = _id.value;
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // new_for_consumers


  /**
       * Creates an administration object for event suppliers.
       * @parm <code>op</code> - Indicates whether the newly created
       * administration object should use AND or OR semantics when combining
       * administration object filters and proxy filters.
       * @parm <code>id</code> - The unique identifier for the administration
       * object.
       * @returns A <code>SupplierAdmin</code> object reference.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin new_for_suppliers (hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperator op, org.omg.CORBA.IntHolder id)
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("new_for_suppliers",true);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperatorHelper.write (_out, op);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminHelper.read (_in);
          id.value = _in.read_long ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "new_for_suppliers",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
         org.omg.CORBA.IntHolder _id = new org.omg.CORBA.IntHolder();
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations)_so.servant).new_for_suppliers( op,_id );
         id.value = _id.value;
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // new_for_suppliers


  /**
       * Get an administration object from its ID.
       * @parm <code>id</code> - A unique identifier for the administration
       * object.
       * @returns A <code>ConsumerAdmin</code> object reference.
       * @raises AdminNotFound If no administration object with that ID
       * could be found.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin get_consumeradmin (int id) throws hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_consumeradmin",true);
          _out.write_long (id);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdminHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_consumeradmin",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations)_so.servant).get_consumeradmin( id );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_consumeradmin


  /**
       * Get an administration object from its ID.
       * @parm <code>id</code> - A unique identifier for the administration
       * object.
       * @returns A <code>SupplierAdmin</code> object reference.
       * @raises AdminNotFound If no administration object with that ID
       * could be found.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin get_supplieradmin (int id) throws hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_supplieradmin",true);
          _out.write_long (id);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_supplieradmin",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations)_so.servant).get_supplieradmin( id );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_supplieradmin


  /**
       * Get all consumer administration objects.
       * @returns A sequence of administration object unique identifiers.
       */
  public int[] get_all_consumeradmins ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_all_consumeradmins",true);
          _in = _invoke (_out);
          int __result[] = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminIDSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_all_consumeradmins",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations)_so.servant).get_all_consumeradmins(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_all_consumeradmins


  /**
       * Get all supplier administration objects.
       * @returns A sequence of administration object unique identifiers.
       */
  public int[] get_all_supplieradmins ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_all_supplieradmins",true);
          _in = _invoke (_out);
          int __result[] = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminIDSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_all_supplieradmins",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations)_so.servant).get_all_supplieradmins(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_all_supplieradmins


  /**
       * Returns the current quality of service settings for this object.
       * @returns A sequence of name-value pairs defining the quality of 
       * service settings.
       */
  public hoshen.xsm.lightsoft.corba.CosNotification.Property[] get_qos ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_qos",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_qos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = ((hoshen.xsm.lightsoft.corba.CosNotification.QoSAdminOperations)_so.servant).get_qos(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_qos


  /**
       * Sets the quality of service settings for this object.
       * @parm <code>qos</code> - A sequence of name-value pairs defining
       * the desired quality of service settings.
       * @raises UnsupportedQoS If the requested settings are not supported.
       */
  public void set_qos (hoshen.xsm.lightsoft.corba.CosNotification.Property[] qos) throws hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("set_qos",true);
          hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (_out, qos);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "set_qos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotification.QoSAdminOperations)_so.servant).set_qos( qos );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // set_qos


  /**
       * Validates a set of quality of service requirements.
       * @parm <code>qos</code> -  A sequence of name-value pairs defining
       * quality of service settings that are to be validated.
       * @parm <code>available_qos</code> - A sequence of all additional
       * quality of service setting supported by this object.
       * @raises UnsupportedQoS If any of the setting in the input argument
       * are not supported.
       */
  public void validate_qos (hoshen.xsm.lightsoft.corba.CosNotification.Property[] required_qos, hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder available_qos) throws hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("validate_qos",true);
          hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (_out, required_qos);
          _in = _invoke (_out);
          available_qos.value = hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHelper.read (_in);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "validate_qos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
         hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder _available_qos = new hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder();
          ((hoshen.xsm.lightsoft.corba.CosNotification.QoSAdminOperations)_so.servant).validate_qos( required_qos,_available_qos );
         available_qos.value = _available_qos.value;
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // validate_qos


  /**
       * Returns the current administrative settings for this object.
       * @returns A sequence of name-value pairs defining the administrative 
       * settings.
       */
  public hoshen.xsm.lightsoft.corba.CosNotification.Property[] get_admin ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_admin",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_admin",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = ((hoshen.xsm.lightsoft.corba.CosNotification.AdminPropertiesAdminOperations)_so.servant).get_admin(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_admin


  /**
       * Sets the administrative settings for this object.
       * @parm <code>admin</code> - A sequence of desired name-value pairs
       * defining the administrative settings.
       * @raises UnsupportedAdmin If any of the desired setting are not
       * available.
       */
  public void set_admin (hoshen.xsm.lightsoft.corba.CosNotification.Property[] admin) throws hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedAdmin
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("set_admin",true);
          hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (_out, admin);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedAdminHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedAdminHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "set_admin",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotification.AdminPropertiesAdminOperations)_so.servant).set_admin( admin );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // set_admin


  /**
       * Gets an object reference to the administration object
       * for event consumers.
       * @returns The <code>ConsumerAdmin</code> object reference.
       */
  public hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ConsumerAdmin for_consumers ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("for_consumers",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ConsumerAdmin __result = hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ConsumerAdminHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "for_consumers",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ConsumerAdmin __result = ((hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.EventChannelOperations)_so.servant).for_consumers(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // for_consumers


  /**
       * Gets an object reference to the administration object
       * for event suppliers.
       * @returns The <code>SupplierAdmin</code> object reference.
       */
  public hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.SupplierAdmin for_suppliers ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("for_suppliers",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.SupplierAdmin __result = hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.SupplierAdminHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "for_suppliers",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.SupplierAdmin __result = ((hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.EventChannelOperations)_so.servant).for_suppliers(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // for_suppliers


  /**
       * Destroys this event channel and released any storage used.
       */
  public void destroy ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("destroy",true);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "destroy",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.EventChannelOperations)_so.servant).destroy(  );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // destroy

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0", 
    "IDL:omg.org/CosNotification/QoSAdmin:1.0", 
    "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0", 
    "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  final public static java.lang.Class _opsClass =
    hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations.class;

  private void readObject (java.io.ObjectInputStream s)
  {
     try 
     {
       String str = s.readUTF ();
       org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ((String[])null, null).string_to_object (str);
       org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
       _set_delegate (delegate);
     } catch (java.io.IOException e) {}
  }

  private void writeObject (java.io.ObjectOutputStream s)
  {
     try 
     {
       String str = org.omg.CORBA.ORB.init ((String[])null, null).object_to_string (this);
       s.writeUTF (str);
     } catch (java.io.IOException e) {}
  }
} // class _EventChannelStub
