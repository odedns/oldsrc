package hoshen.xsm.lightsoft.corba.CosNotifyFilter;


/**
* hoshen/xsm/lightsoft/corba/CosNotifyFilter/_FilterStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosNotifyFilter.idl
* 13:11:16 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * Interface for a filter.
    */
public class _FilterStub extends org.omg.CORBA_2_3.portable.ObjectImpl implements hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter
{
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _FilterStub ()
  {
    super ();
  }

  public _FilterStub (org.omg.CORBA.portable.Delegate delegate)
  {
    super ();
    _set_delegate (delegate);
  }


  /**
       * The constraint grammer used by this filter.
       */
  public String constraint_grammar ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_constraint_grammar",true);
          _in = _invoke (_out);
          String __result = _in.read_string ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_constraint_grammar",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          String __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).constraint_grammar(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // constraint_grammar


  /**
       * Associates one or more constraints with this filter object.
       * @parm <code>constraint_list</code> - List of constraints to be
       * associated with filter.
       * @returns A list with ID for each of the added constraints.
       * @raises InvalidConstraint If any of the constraints are invalid.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfo[] add_constraints (hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintExp[] constraint_list) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidConstraint
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("add_constraints",true);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintExpSeqHelper.write (_out, constraint_list);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfo __result[] = hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfoSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidConstraintHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidConstraintHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "add_constraints",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfo __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).add_constraints( constraint_list );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // add_constraints


  /**
       * Delete or modify constraints on this filter object.
       * @parm <code>del_list</code> - List of constraints to delete.
       * @parm <code>modify_list</code> - List of constraints to modify.
       * @raises InvalidConstraint If any of the constraints in the
       * <code>modify_list</code> input sequences are invalid.
       * @raises ConstraintNotFound If a constraint in either
       * of the two input sequences was not found.
       */
  public void modify_constraints (int[] del_list, hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfo[] modify_list) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidConstraint, hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("modify_constraints",true);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintIDSeqHelper.write (_out, del_list);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfoSeqHelper.write (_out, modify_list);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidConstraintHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidConstraintHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "modify_constraints",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).modify_constraints( del_list,modify_list );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // modify_constraints


  /**
       * Return a list of constraints for this filter object based on IDs.
       * @parm <code>id_list</code> - List of constraint IDs.
       * @returns A list of constraints for the IDs in the input sequence.
       * @raises ConstraintNotFound If a constraint was not found.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfo[] get_constraints (int[] id_list) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_constraints",true);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintIDSeqHelper.write (_out, id_list);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfo __result[] = hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfoSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_constraints",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfo __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).get_constraints( id_list );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_constraints


  /**
       * Return a list of all constraints for this filter object.
       * @returns A list of all constraints.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfo[] get_all_constraints ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_all_constraints",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfo __result[] = hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfoSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_all_constraints",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintInfo __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).get_all_constraints(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_all_constraints


  /**
       * Removes all constraints defined on this filter object.
       */
  public void remove_all_constraints ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("remove_all_constraints",true);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "remove_all_constraints",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).remove_all_constraints(  );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // remove_all_constraints


  /**
       * Destroys this filter object.
       */
  public void destroy ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("destroy",true);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "destroy",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).destroy(  );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // destroy


  /**
       * Evaluates the input event against the filter constraints defined
       * on this filter object. If the event satisfies one of the filter
       * constraints TRUE is returned, otherwise FALSE is returned.
       * @parm <code>filterable_data</code> - The event to evaluate.
       * @returns TRUE if event matches any constraint, FALSE otherwise.
       * raises UnsupportedFilterableData If the event specified by
       * <code>filterable_data</code> contains data that this filter is
       * not designed to handle.
       */
  public boolean match (org.omg.CORBA.Any filterable_data) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableData
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("match",true);
          _out.write_any (filterable_data);
          _in = _invoke (_out);
          boolean __result = _in.read_boolean ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableDataHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableDataHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "match",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          boolean __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).match( filterable_data );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // match


  /**
       * Evaluates the input event against the filter constraints defined
       * on this filter object. If the event satisfies one of the filter
       * constraints TRUE is returned, otherwise FALSE is returned.
       * @parm <code>filterable_data</code> - The structured event to evaluate.
       * @returns TRUE if event matches any constraint, FALSE otherwise.
       * raises UnsupportedFilterableData If the event specified by
       * <code>filterable_data</code> contains data that this filter is
       * not designed to handle.
       */
  public boolean match_structured (hoshen.xsm.lightsoft.corba.CosNotification.StructuredEvent filterable_data) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableData
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("match_structured",true);
          hoshen.xsm.lightsoft.corba.CosNotification.StructuredEventHelper.write (_out, filterable_data);
          _in = _invoke (_out);
          boolean __result = _in.read_boolean ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableDataHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableDataHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "match_structured",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          boolean __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).match_structured( filterable_data );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // match_structured


  /**
       * Evaluates the input event against the filter constraints defined
       * on this filter object. If the event satisfies one of the filter
       * constraints TRUE is returned, otherwise FALSE is returned.
       * @parm <code>filterable_data</code> - The typed event to evaluate.
       * @returns TRUE if event matches any constraint, FALSE otherwise.
       * raises UnsupportedFilterableData If the event specified by
       * <code>filterable_data</code> contains data that this filter is
       * not designed to handle.
       */
  public boolean match_typed (hoshen.xsm.lightsoft.corba.CosNotification.Property[] filterable_data) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableData
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("match_typed",true);
          hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (_out, filterable_data);
          _in = _invoke (_out);
          boolean __result = _in.read_boolean ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableDataHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableDataHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "match_typed",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          boolean __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).match_typed( filterable_data );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // match_typed


  /**
       * Attach a callback object to this filter that will be notified
       * each time the constraints on this filter are modified.
       * @parm <code>callback</code> - A callback object reference of type
       * NotifySubscribe.
       * @returns A ID which is unique for the newly attached object.
       */
  public int attach_callback (hoshen.xsm.lightsoft.corba.CosNotifyComm.NotifySubscribe callback)
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("attach_callback",true);
          hoshen.xsm.lightsoft.corba.CosNotifyComm.NotifySubscribeHelper.write (_out, callback);
          _in = _invoke (_out);
          int __result = _in.read_long ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "attach_callback",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).attach_callback( callback );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // attach_callback


  /**
       * Detach a callback object from this filter.
       * @parm <code>callback</code> - ID of the callback object to detach.
       * @raises CallbackNotFound If the ID does not correspond to any
       * attached callback object reference.
       */
  public void detach_callback (int callback) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.CallbackNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("detach_callback",true);
          _out.write_long (callback);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.CallbackNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.CallbackNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "detach_callback",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).detach_callback( callback );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // detach_callback


  /**
       * Returns a list of callback objects attached to this filter.
       * @returns List of callback object IDs.
       */
  public int[] get_callbacks ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_callbacks",true);
          _in = _invoke (_out);
          int __result[] = hoshen.xsm.lightsoft.corba.CosNotifyFilter.CallbackIDSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_callbacks",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations)_so.servant).get_callbacks(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_callbacks

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyFilter/Filter:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  final public static java.lang.Class _opsClass =
    hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterOperations.class;

  private void readObject (java.io.ObjectInputStream s)
  {
     try 
     {
       String str = s.readUTF ();
       org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ((String[])null, null).string_to_object (str);
       org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
       _set_delegate (delegate);
     } catch (java.io.IOException e) {}
  }

  private void writeObject (java.io.ObjectOutputStream s)
  {
     try 
     {
       String str = org.omg.CORBA.ORB.init ((String[])null, null).object_to_string (this);
       s.writeUTF (str);
     } catch (java.io.IOException e) {}
  }
} // class _FilterStub
