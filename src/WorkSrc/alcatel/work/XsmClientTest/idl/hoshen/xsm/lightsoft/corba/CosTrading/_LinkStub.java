package hoshen.xsm.lightsoft.corba.CosTrading;


/**
* hoshen/xsm/lightsoft/corba/CosTrading/_LinkStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosTrading.idl
* 13:11:20 GMT+02:00 יום חמישי 28 יוני 2007
*/


/** This interface is used to federate traders
 * together and manage the links between them.
 */
public class _LinkStub extends org.omg.CORBA_2_3.portable.ObjectImpl implements hoshen.xsm.lightsoft.corba.CosTrading.Link
{
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _LinkStub ()
  {
    super ();
  }

  public _LinkStub (org.omg.CORBA.portable.Delegate delegate)
  {
    super ();
    _set_delegate (delegate);
  }


  /** This operation links a federated trader.
 *
 * @param name - The name of the linked trader. 
 * @param target - The Lookup interface to link.
 * @param def_pass_on_follow_rule - The default lookup policy to propagate 
 *                                  if none was specified in the query.
 * @param limiting_follow_rule - The most permissive link policy that can
 *                               be applied to the link. 
 *
 * @raises IllegalLinkName - If the specified link name has invalid syntax.
 * @raises DuplicateLinkName - If a link with the same name already exists.
 * @raises InvalidLookupRef - If the specified target reference is nil.
 * @raises DefaultFollowTooPermissive - If the default lookup policy for the
 *                                      link is more premissive than the limiting
 *                                      lookup policy for the link.
 * @raises LimitingFollowTooPermissive - If the link default lookup policy is
 *                                       more permissive that the corresponding
 *                                       trader maximum allowed value.
 */
  public void add_link (String name, hoshen.xsm.lightsoft.corba.CosTrading.Lookup target, hoshen.xsm.lightsoft.corba.CosTrading.FollowOption def_pass_on_follow_rule, hoshen.xsm.lightsoft.corba.CosTrading.FollowOption limiting_follow_rule) throws hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkName, hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.DuplicateLinkName, hoshen.xsm.lightsoft.corba.CosTrading.InvalidLookupRef, hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.DefaultFollowTooPermissive, hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.LimitingFollowTooPermissive
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("add_link",true);
          _out.write_string (name);
          hoshen.xsm.lightsoft.corba.CosTrading.LookupHelper.write (_out, target);
          hoshen.xsm.lightsoft.corba.CosTrading.FollowOptionHelper.write (_out, def_pass_on_follow_rule);
          hoshen.xsm.lightsoft.corba.CosTrading.FollowOptionHelper.write (_out, limiting_follow_rule);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkNameHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.DuplicateLinkNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.DuplicateLinkNameHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.InvalidLookupRefHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.InvalidLookupRefHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.DefaultFollowTooPermissiveHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.DefaultFollowTooPermissiveHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.LimitingFollowTooPermissiveHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.LimitingFollowTooPermissiveHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "add_link",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosTrading.LinkOperations)_so.servant).add_link( name,target,def_pass_on_follow_rule,limiting_follow_rule );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // add_link


  /** This operation removes a link to a federated trader. 
 *
 * @param name - The name of the linked trader. 
 *
 * @raises IllegalLinkName - If the specified link name has invalid syntax.
 * @raises UnknownLinkName - If the specified link cannot be found.
 */
  public void remove_link (String name) throws hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkName, hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.UnknownLinkName
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("remove_link",true);
          _out.write_string (name);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkNameHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.UnknownLinkNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.UnknownLinkNameHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "remove_link",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosTrading.LinkOperations)_so.servant).remove_link( name );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // remove_link


  /** This operation describes a link to a federated trader,
 * returning a structure containing the link description.
 *
 * @returns - A link infromation structure.
 * @param name - The name of the linked trader. 
 *
 * @raises IllegalLinkName - If the specified link name has invalid syntax.
 * @raises UnknownLinkName - If the specified link cannot be found.
 */
  public hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.LinkInfo describe_link (String name) throws hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkName, hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.UnknownLinkName
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("describe_link",true);
          _out.write_string (name);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.LinkInfo __result = hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.LinkInfoHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkNameHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.UnknownLinkNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.UnknownLinkNameHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "describe_link",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.LinkInfo __result = ((hoshen.xsm.lightsoft.corba.CosTrading.LinkOperations)_so.servant).describe_link( name );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // describe_link


  /** This operation returns a sequence of links. */
  public String[] list_links ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("list_links",true);
          _in = _invoke (_out);
          String __result[] = hoshen.xsm.lightsoft.corba.CosTrading.LinkNameSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "list_links",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          String __result[] = ((hoshen.xsm.lightsoft.corba.CosTrading.LinkOperations)_so.servant).list_links(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // list_links


  /** This operation modifies a link to a federated trader,
 * changing the follow options that are applied to the link.
 *
 * @param name - The name of the linked trader. 
 * @param def_pass_on_follow_rule - The default lookup policy to propagate 
 *                                  if none was specified in the query.
 * @param limiting_follow_rule - The most permissive link policy that can
 *                               be applied to the link. 
 *
 * @raises IllegalLinkName - If the specified link name has invalid syntax.
 * @raises UnknownLinkName - If the specified link cannot be found.
 * @raises DefaultFollowTooPermissive - If the default lookup policy for the
 *                                      link is more premissive than the limiting
 *                                      lookup policy for the link.
 * @raises LimitingFollowTooPermissive - If the link default lookup policy is
 *                                       more permissive that the corresponding
 *                                       trader maximum allowed value.
 */
  public void modify_link (String name, hoshen.xsm.lightsoft.corba.CosTrading.FollowOption def_pass_on_follow_rule, hoshen.xsm.lightsoft.corba.CosTrading.FollowOption limiting_follow_rule) throws hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkName, hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.UnknownLinkName, hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.DefaultFollowTooPermissive, hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.LimitingFollowTooPermissive
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("modify_link",true);
          _out.write_string (name);
          hoshen.xsm.lightsoft.corba.CosTrading.FollowOptionHelper.write (_out, def_pass_on_follow_rule);
          hoshen.xsm.lightsoft.corba.CosTrading.FollowOptionHelper.write (_out, limiting_follow_rule);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.IllegalLinkNameHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.UnknownLinkNameHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.UnknownLinkNameHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.DefaultFollowTooPermissiveHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.DefaultFollowTooPermissiveHelper.read( _in );
           else if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.LimitingFollowTooPermissiveHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.LinkPackage.LimitingFollowTooPermissiveHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "modify_link",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosTrading.LinkOperations)_so.servant).modify_link( name,def_pass_on_follow_rule,limiting_follow_rule );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // modify_link

  public hoshen.xsm.lightsoft.corba.CosTrading.Lookup lookup_if ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_lookup_if",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.Lookup __result = hoshen.xsm.lightsoft.corba.CosTrading.LookupHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_lookup_if",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.Lookup __result = ((hoshen.xsm.lightsoft.corba.CosTrading.TraderComponentsOperations)_so.servant).lookup_if(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // lookup_if

  public hoshen.xsm.lightsoft.corba.CosTrading.Register register_if ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_register_if",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.Register __result = hoshen.xsm.lightsoft.corba.CosTrading.RegisterHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_register_if",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.Register __result = ((hoshen.xsm.lightsoft.corba.CosTrading.TraderComponentsOperations)_so.servant).register_if(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // register_if

  public hoshen.xsm.lightsoft.corba.CosTrading.Link link_if ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_link_if",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.Link __result = hoshen.xsm.lightsoft.corba.CosTrading.LinkHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_link_if",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.Link __result = ((hoshen.xsm.lightsoft.corba.CosTrading.TraderComponentsOperations)_so.servant).link_if(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // link_if

  public hoshen.xsm.lightsoft.corba.CosTrading.Proxy proxy_if ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_proxy_if",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.Proxy __result = hoshen.xsm.lightsoft.corba.CosTrading.ProxyHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_proxy_if",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.Proxy __result = ((hoshen.xsm.lightsoft.corba.CosTrading.TraderComponentsOperations)_so.servant).proxy_if(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // proxy_if

  public hoshen.xsm.lightsoft.corba.CosTrading.Admin admin_if ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_admin_if",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.Admin __result = hoshen.xsm.lightsoft.corba.CosTrading.AdminHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_admin_if",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.Admin __result = ((hoshen.xsm.lightsoft.corba.CosTrading.TraderComponentsOperations)_so.servant).admin_if(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // admin_if

  public boolean supports_modifiable_properties ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_supports_modifiable_properties",true);
          _in = _invoke (_out);
          boolean __result = _in.read_boolean ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_supports_modifiable_properties",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          boolean __result = ((hoshen.xsm.lightsoft.corba.CosTrading.SupportAttributesOperations)_so.servant).supports_modifiable_properties(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // supports_modifiable_properties

  public boolean supports_dynamic_properties ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_supports_dynamic_properties",true);
          _in = _invoke (_out);
          boolean __result = _in.read_boolean ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_supports_dynamic_properties",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          boolean __result = ((hoshen.xsm.lightsoft.corba.CosTrading.SupportAttributesOperations)_so.servant).supports_dynamic_properties(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // supports_dynamic_properties

  public boolean supports_proxy_offers ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_supports_proxy_offers",true);
          _in = _invoke (_out);
          boolean __result = _in.read_boolean ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_supports_proxy_offers",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          boolean __result = ((hoshen.xsm.lightsoft.corba.CosTrading.SupportAttributesOperations)_so.servant).supports_proxy_offers(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // supports_proxy_offers

  public org.omg.CORBA.Object type_repos ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_type_repos",true);
          _in = _invoke (_out);
          org.omg.CORBA.Object __result = org.omg.CORBA.ObjectHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_type_repos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          org.omg.CORBA.Object __result = ((hoshen.xsm.lightsoft.corba.CosTrading.SupportAttributesOperations)_so.servant).type_repos(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // type_repos

  public hoshen.xsm.lightsoft.corba.CosTrading.FollowOption max_link_follow_policy ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_max_link_follow_policy",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosTrading.FollowOption __result = hoshen.xsm.lightsoft.corba.CosTrading.FollowOptionHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_max_link_follow_policy",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosTrading.FollowOption __result = ((hoshen.xsm.lightsoft.corba.CosTrading.LinkAttributesOperations)_so.servant).max_link_follow_policy(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // max_link_follow_policy

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosTrading/Link:1.0", 
    "IDL:omg.org/CosTrading/TraderComponents:1.0", 
    "IDL:omg.org/CosTrading/SupportAttributes:1.0", 
    "IDL:omg.org/CosTrading/LinkAttributes:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  final public static java.lang.Class _opsClass =
    hoshen.xsm.lightsoft.corba.CosTrading.LinkOperations.class;

  private void readObject (java.io.ObjectInputStream s)
  {
     try 
     {
       String str = s.readUTF ();
       org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ((String[])null, null).string_to_object (str);
       org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
       _set_delegate (delegate);
     } catch (java.io.IOException e) {}
  }

  private void writeObject (java.io.ObjectOutputStream s)
  {
     try 
     {
       String str = org.omg.CORBA.ORB.init ((String[])null, null).object_to_string (this);
       s.writeUTF (str);
     } catch (java.io.IOException e) {}
  }
} // class _LinkStub
