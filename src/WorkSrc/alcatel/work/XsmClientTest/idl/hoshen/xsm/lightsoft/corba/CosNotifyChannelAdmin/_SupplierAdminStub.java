package hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin;


/**
* hoshen/xsm/lightsoft/corba/CosNotifyChannelAdmin/_SupplierAdminStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosNotifyChannelAdmin.idl
* 13:11:07 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * An interface for supplier administration objects.
    */
public class _SupplierAdminStub extends org.omg.CORBA_2_3.portable.ObjectImpl implements hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin
{
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _SupplierAdminStub ()
  {
    super ();
  }

  public _SupplierAdminStub (org.omg.CORBA.portable.Delegate delegate)
  {
    super ();
    _set_delegate (delegate);
  }


  /**
       * A unique identified for this administration object.
       */
  public int MyID ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_MyID",true);
          _in = _invoke (_out);
          int __result = _in.read_long ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_MyID",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminOperations)_so.servant).MyID(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // MyID


  /**
       * The event channel object that created this administration object.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannel MyChannel ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_MyChannel",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannel __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_MyChannel",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannel __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminOperations)_so.servant).MyChannel(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // MyChannel


  /**
       * Indicates whether AND or OR semantics is used when combining 
       * administration object filters and proxy filters.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperator MyOperator ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_MyOperator",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperator __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperatorHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_MyOperator",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperator __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminOperations)_so.servant).MyOperator(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // MyOperator


  /**
       * A list of pull consumer proxies created by the administration object.
       */
  public int[] pull_consumers ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_pull_consumers",true);
          _in = _invoke (_out);
          int __result[] = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyIDSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_pull_consumers",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminOperations)_so.servant).pull_consumers(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // pull_consumers


  /**
       * A list of pull consumer proxies created by the administration object.
       */
  public int[] push_consumers ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("_get_push_consumers",true);
          _in = _invoke (_out);
          int __result[] = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyIDSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "_get_push_consumers",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminOperations)_so.servant).push_consumers(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // push_consumers


  /**
       * Get the proxy with the specified ID.
       * @parm <code>proxy_id</code> - The ID of the proxy to retrieve.
       * @raises ProxyNotFound If no proxy with the specified ID could 
       * be found.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer get_proxy_consumer (int proxy_id) throws hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_proxy_consumer",true);
          _out.write_long (proxy_id);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumerHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_proxy_consumer",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminOperations)_so.servant).get_proxy_consumer( proxy_id );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_proxy_consumer


  /**
       * Obtain a pull consumer proxy for this administration object.
       * @parm <code>ctype</code> - The client type.
       * @parm <code>proxy_id</code> - The ID of the newly created proxy,
       * i.e. the return value.
       * @returns A ProxyConsumer object reference.
       * @raises AdminLimitExceeded If the number of proxies associated 
       * with this administration object exceeds the MaxConsumers property.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer obtain_notification_pull_consumer (hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ClientType ctype, org.omg.CORBA.IntHolder proxy_id) throws hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminLimitExceeded
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("obtain_notification_pull_consumer",true);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ClientTypeHelper.write (_out, ctype);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumerHelper.read (_in);
          proxy_id.value = _in.read_long ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminLimitExceededHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminLimitExceededHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "obtain_notification_pull_consumer",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
         org.omg.CORBA.IntHolder _proxy_id = new org.omg.CORBA.IntHolder();
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminOperations)_so.servant).obtain_notification_pull_consumer( ctype,_proxy_id );
         proxy_id.value = _proxy_id.value;
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // obtain_notification_pull_consumer


  /**
       * Obtain a push consumer proxy for this administration object.
       * @parm <code>ctype</code> - The client type.
       * @parm <code>proxy_id</code> - The ID of the newly created proxy,
       * i.e. the return value.
       * @returns A ProxyConsumer object reference.
       * @raises AdminLimitExceeded If the number of proxies associated 
       * with this administration object exceeds the MaxConsumers property.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer obtain_notification_push_consumer (hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ClientType ctype, org.omg.CORBA.IntHolder proxy_id) throws hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminLimitExceeded
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("obtain_notification_push_consumer",true);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ClientTypeHelper.write (_out, ctype);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer __result = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumerHelper.read (_in);
          proxy_id.value = _in.read_long ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminLimitExceededHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminLimitExceededHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "obtain_notification_push_consumer",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
         org.omg.CORBA.IntHolder _proxy_id = new org.omg.CORBA.IntHolder();
          hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer __result = ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminOperations)_so.servant).obtain_notification_push_consumer( ctype,_proxy_id );
         proxy_id.value = _proxy_id.value;
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // obtain_notification_push_consumer


  /**
       * Destroy this administration object and all proxies created by it.
       */
  public void destroy ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("destroy",true);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "destroy",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminOperations)_so.servant).destroy(  );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // destroy


  /**
       * Returns the current quality of service settings for this object.
       * @returns A sequence of name-value pairs defining the quality of 
       * service settings.
       */
  public hoshen.xsm.lightsoft.corba.CosNotification.Property[] get_qos ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_qos",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_qos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = ((hoshen.xsm.lightsoft.corba.CosNotification.QoSAdminOperations)_so.servant).get_qos(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_qos


  /**
       * Sets the quality of service settings for this object.
       * @parm <code>qos</code> - A sequence of name-value pairs defining
       * the desired quality of service settings.
       * @raises UnsupportedQoS If the requested settings are not supported.
       */
  public void set_qos (hoshen.xsm.lightsoft.corba.CosNotification.Property[] qos) throws hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("set_qos",true);
          hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (_out, qos);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "set_qos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotification.QoSAdminOperations)_so.servant).set_qos( qos );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // set_qos


  /**
       * Validates a set of quality of service requirements.
       * @parm <code>qos</code> -  A sequence of name-value pairs defining
       * quality of service settings that are to be validated.
       * @parm <code>available_qos</code> - A sequence of all additional
       * quality of service setting supported by this object.
       * @raises UnsupportedQoS If any of the setting in the input argument
       * are not supported.
       */
  public void validate_qos (hoshen.xsm.lightsoft.corba.CosNotification.Property[] required_qos, hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder available_qos) throws hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("validate_qos",true);
          hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (_out, required_qos);
          _in = _invoke (_out);
          available_qos.value = hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHelper.read (_in);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "validate_qos",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
         hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder _available_qos = new hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder();
          ((hoshen.xsm.lightsoft.corba.CosNotification.QoSAdminOperations)_so.servant).validate_qos( required_qos,_available_qos );
         available_qos.value = _available_qos.value;
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // validate_qos


  /**
       * Indicates that a supplier is changing the names of the types of
       * events it is publishing.
       * @parm <code>added</code> - The event types added.
       * @parm <code>removed</code> - The event types removed.
       * @raises InvalidEventType If any of the event type names in either 
       * the of the input sequences are invalid.
       */
  public void offer_change (hoshen.xsm.lightsoft.corba.CosNotification.EventType[] added, hoshen.xsm.lightsoft.corba.CosNotification.EventType[] removed) throws hoshen.xsm.lightsoft.corba.CosNotifyComm.InvalidEventType
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("offer_change",true);
          hoshen.xsm.lightsoft.corba.CosNotification.EventTypeSeqHelper.write (_out, added);
          hoshen.xsm.lightsoft.corba.CosNotification.EventTypeSeqHelper.write (_out, removed);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyComm.InvalidEventTypeHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyComm.InvalidEventTypeHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "offer_change",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyComm.NotifyPublishOperations)_so.servant).offer_change( added,removed );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // offer_change


  /**
       * Add a filter to this object's list of filters. All these filters
       * are tried upon reception of an event.
       * @parm <code>new_filter</code> - The filter to add.
       * @returns An unique ID that identifies the added filter.
       */
  public int add_filter (hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter new_filter)
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("add_filter",true);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.write (_out, new_filter);
          _in = _invoke (_out);
          int __result = _in.read_long ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "add_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).add_filter( new_filter );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // add_filter


  /**
       * Remove a filter from this object's list of filters.
       * @parm <code>filter</code> - The filter ID.
       * @raises FilterNotFound If the ID does not correspond to any
       * filter that has been added to this object.
       */
  public void remove_filter (int filter) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("remove_filter",true);
          _out.write_long (filter);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "remove_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).remove_filter( filter );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // remove_filter


  /**
       * Get a filter from the filter ID.
       * @parm <code>filter</code> - The filter ID.
       * @raises FilterNotFound If the ID does not correspond to any
       * filter that has been added to this object.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter get_filter (int filter) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFound
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_filter",true);
          _out.write_long (filter);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter __result = hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).get_filter( filter );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_filter


  /**
       * Get all filters added to this administration object.
       * @returns A sequence of filter IDs.
       */
  public int[] get_all_filters ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("get_all_filters",true);
          _in = _invoke (_out);
          int __result[] = hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterIDSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "get_all_filters",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result[] = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).get_all_filters(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // get_all_filters


  /**
       * Remove all filters added to this administration object.
       */
  public void remove_all_filters ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("remove_all_filters",true);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "remove_all_filters",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterAdminOperations)_so.servant).remove_all_filters(  );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // remove_all_filters


  /**
       * Obtain a push consumer proxy for this administration object.
       * @returns A <code>ProxyPushConsumer</code> object reference.
       */
  public hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPushConsumer obtain_push_consumer ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("obtain_push_consumer",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPushConsumer __result = hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPushConsumerHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "obtain_push_consumer",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPushConsumer __result = ((hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.SupplierAdminOperations)_so.servant).obtain_push_consumer(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // obtain_push_consumer


  /**
       * Obtain a pull consumer proxy for this administration object.
       * @returns A <code>ProxyPullConsumer</code> object reference.
       */
  public hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullConsumer obtain_pull_consumer ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("obtain_pull_consumer",true);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullConsumer __result = hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullConsumerHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "obtain_pull_consumer",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullConsumer __result = ((hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.SupplierAdminOperations)_so.servant).obtain_pull_consumer(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // obtain_pull_consumer

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0", 
    "IDL:omg.org/CosNotification/QoSAdmin:1.0", 
    "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0", 
    "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0", 
    "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  final public static java.lang.Class _opsClass =
    hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminOperations.class;

  private void readObject (java.io.ObjectInputStream s)
  {
     try 
     {
       String str = s.readUTF ();
       org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ((String[])null, null).string_to_object (str);
       org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
       _set_delegate (delegate);
     } catch (java.io.IOException e) {}
  }

  private void writeObject (java.io.ObjectOutputStream s)
  {
     try 
     {
       String str = org.omg.CORBA.ORB.init ((String[])null, null).object_to_string (this);
       s.writeUTF (str);
     } catch (java.io.IOException e) {}
  }
} // class _SupplierAdminStub
