package hoshen.xsm.lightsoft.corba.CosNotifyFilter;


/**
* hoshen/xsm/lightsoft/corba/CosNotifyFilter/_FilterFactoryStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosNotifyFilter.idl
* 13:11:16 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * Interface for a filter factory.
    */
public class _FilterFactoryStub extends org.omg.CORBA_2_3.portable.ObjectImpl implements hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactory
{
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _FilterFactoryStub ()
  {
    super ();
  }

  public _FilterFactoryStub (org.omg.CORBA.portable.Delegate delegate)
  {
    super ();
    _set_delegate (delegate);
  }


  /**
       * Create a filter with the specified grammer.
       * @parm <code>constraint_grammar</code> - The constraint grammer to
       * be used by the filter.
       * @returns A filter object reference.
       * @raises InvalidGrammar If the specified grammer is not supported.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter create_filter (String constraint_grammar) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidGrammar
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("create_filter",true);
          _out.write_string (constraint_grammar);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter __result = hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidGrammarHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidGrammarHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "create_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactoryOperations)_so.servant).create_filter( constraint_grammar );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // create_filter


  /**
       * Create a mapping filter with the specified grammer.
       * @parm <code>constraint_grammar</code> - The constraint grammer to
       * be used by the filter.
       * @parm <code>default_value</code> - The default value to be returned
       * by match operations invoked on the mapping filter if no match is
       * found.
       * @returns A mapping filter object reference.
       * @raises InvalidGrammar If the specified grammer is not supported.
       */
  public hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter create_mapping_filter (String constraint_grammar, org.omg.CORBA.Any default_value) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidGrammar
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("create_mapping_filter",true);
          _out.write_string (constraint_grammar);
          _out.write_any (default_value);
          _in = _invoke (_out);
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter __result = hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilterHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidGrammarHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidGrammarHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "create_mapping_filter",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter __result = ((hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactoryOperations)_so.servant).create_mapping_filter( constraint_grammar,default_value );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // create_mapping_filter

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyFilter/FilterFactory:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  final public static java.lang.Class _opsClass =
    hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactoryOperations.class;

  private void readObject (java.io.ObjectInputStream s)
  {
     try 
     {
       String str = s.readUTF ();
       org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ((String[])null, null).string_to_object (str);
       org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
       _set_delegate (delegate);
     } catch (java.io.IOException e) {}
  }

  private void writeObject (java.io.ObjectOutputStream s)
  {
     try 
     {
       String str = org.omg.CORBA.ORB.init ((String[])null, null).object_to_string (this);
       s.writeUTF (str);
     } catch (java.io.IOException e) {}
  }
} // class _FilterFactoryStub
