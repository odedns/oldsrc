package hoshen.xsm.lightsoft.corba.CosTrading;


/**
* hoshen/xsm/lightsoft/corba/CosTrading/_OfferIteratorStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosTrading.idl
* 13:11:18 GMT+02:00 יום חמישי 28 יוני 2007
*/


/** This interface supports operations to iterate through
 * lists of Offers returned by the CosTrading::Lookup::query
 * operation.
 */
public class _OfferIteratorStub extends org.omg.CORBA_2_3.portable.ObjectImpl implements hoshen.xsm.lightsoft.corba.CosTrading.OfferIterator
{
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _OfferIteratorStub ()
  {
    super ();
  }

  public _OfferIteratorStub (org.omg.CORBA.portable.Delegate delegate)
  {
    super ();
    _set_delegate (delegate);
  }


  /** This operation returns the number of remaining
 * Offers contained within the iterator.
 *
 * @returns - The number of remaining offers.
 * @raises UnknownMaxLeft - If the number of remaining offers
 *                          cannot be determined. 
 */
  public int max_left () throws hoshen.xsm.lightsoft.corba.CosTrading.UnknownMaxLeft
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("max_left",true);
          _in = _invoke (_out);
          int __result = _in.read_ulong ();
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
           if ( _id.equals ( hoshen.xsm.lightsoft.corba.CosTrading.UnknownMaxLeftHelper.id() ) )
            throw hoshen.xsm.lightsoft.corba.CosTrading.UnknownMaxLeftHelper.read( _in );
           else throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "max_left",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          int __result = ((hoshen.xsm.lightsoft.corba.CosTrading.OfferIteratorOperations)_so.servant).max_left(  );
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // max_left


  /** This operation returns up to a specified number
 * of remaining Offers.
 *
 * @param n - The number of Offers to return.
 * @param offers - The sequence of returned Offers.
 * @returns - TRUE if there are more Offers to retrieve.
 */
  public boolean next_n (int n, hoshen.xsm.lightsoft.corba.CosTrading.OfferSeqHolder offers)
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("next_n",true);
          _out.write_ulong (n);
          _in = _invoke (_out);
          boolean __result = _in.read_boolean ();
          offers.value = hoshen.xsm.lightsoft.corba.CosTrading.OfferSeqHelper.read (_in);
          return __result;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "next_n",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
         hoshen.xsm.lightsoft.corba.CosTrading.OfferSeqHolder _offers = new hoshen.xsm.lightsoft.corba.CosTrading.OfferSeqHolder();
          boolean __result = ((hoshen.xsm.lightsoft.corba.CosTrading.OfferIteratorOperations)_so.servant).next_n( n,_offers );
         offers.value = _offers.value;
          return __result;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // next_n


  /** This operation destroys the OfferIterator and
 * and any Offers it contains. This should be called
 * after a client has finished with the iterator.
 */
  public void destroy ()
  {
    while(true) {
      if ( !this._is_local() ) {
        org.omg.CORBA.portable.InputStream _in = null;
        try {
          org.omg.CORBA.portable.OutputStream _out = _request ("destroy",true);
          _in = _invoke (_out);
          return;
        } catch (org.omg.CORBA.portable.ApplicationException _ex) {
          _in = _ex.getInputStream ();
          String _id = _ex.getId ();
          throw new org.omg.CORBA.UNKNOWN( "Unexpected User Exception: " + _id );
        } catch (org.omg.CORBA.portable.RemarshalException _rm) {
          continue;
        } catch (org.omg.CORBA.portable.UnknownException _ue) {
          Throwable _oe = _ue.originalEx;
          if (_oe instanceof Error)
              throw (Error)_oe;
          else if (_oe instanceof RuntimeException)
              throw (RuntimeException)_oe;
          else
              throw _ue;
        } finally { _releaseReply (_in); }
      }
      else {
        org.omg.CORBA.portable.ServantObject _so =
          _servant_preinvoke( "destroy",_opsClass );
        if ( _so == null ) { 
          continue;
        }
        try {
          ((hoshen.xsm.lightsoft.corba.CosTrading.OfferIteratorOperations)_so.servant).destroy(  );
          return;
        } finally { _servant_postinvoke( _so ); }
      }
    }
  } // destroy

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosTrading/OfferIterator:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  final public static java.lang.Class _opsClass =
    hoshen.xsm.lightsoft.corba.CosTrading.OfferIteratorOperations.class;

  private void readObject (java.io.ObjectInputStream s)
  {
     try 
     {
       String str = s.readUTF ();
       org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ((String[])null, null).string_to_object (str);
       org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
       _set_delegate (delegate);
     } catch (java.io.IOException e) {}
  }

  private void writeObject (java.io.ObjectOutputStream s)
  {
     try 
     {
       String str = org.omg.CORBA.ORB.init ((String[])null, null).object_to_string (this);
       s.writeUTF (str);
     } catch (java.io.IOException e) {}
  }
} // class _OfferIteratorStub
