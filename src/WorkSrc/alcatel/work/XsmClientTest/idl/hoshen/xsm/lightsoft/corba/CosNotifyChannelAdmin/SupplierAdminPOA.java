package hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin;


/**
* hoshen/xsm/lightsoft/corba/CosNotifyChannelAdmin/SupplierAdminPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosNotifyChannelAdmin.idl
* 13:11:07 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * An interface for supplier administration objects.
    */
public abstract class SupplierAdminPOA extends org.omg.PortableServer.Servant
                implements hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminOperations, org.omg.CORBA.portable.InvokeHandler
{

  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin _this() {
     return hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminHelper.narrow(
        super._this_object());
  }

  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin _this(org.omg.CORBA.ORB orb) {
     return hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminHelper.narrow(
        super._this_object(orb));
  }

  public String[] _all_interfaces(
     org.omg.PortableServer.POA poa,
     byte[] objectId) {
         return (String[])__ids.clone();
  }

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0", 
    "IDL:omg.org/CosNotification/QoSAdmin:1.0", 
    "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0", 
    "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0", 
    "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"};

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("_get_MyID", new java.lang.Integer (0));
    _methods.put ("_get_MyChannel", new java.lang.Integer (1));
    _methods.put ("_get_MyOperator", new java.lang.Integer (2));
    _methods.put ("_get_pull_consumers", new java.lang.Integer (3));
    _methods.put ("_get_push_consumers", new java.lang.Integer (4));
    _methods.put ("get_proxy_consumer", new java.lang.Integer (5));
    _methods.put ("obtain_notification_pull_consumer", new java.lang.Integer (6));
    _methods.put ("obtain_notification_push_consumer", new java.lang.Integer (7));
    _methods.put ("destroy", new java.lang.Integer (8));
    _methods.put ("get_qos", new java.lang.Integer (9));
    _methods.put ("set_qos", new java.lang.Integer (10));
    _methods.put ("validate_qos", new java.lang.Integer (11));
    _methods.put ("offer_change", new java.lang.Integer (12));
    _methods.put ("add_filter", new java.lang.Integer (13));
    _methods.put ("remove_filter", new java.lang.Integer (14));
    _methods.put ("get_filter", new java.lang.Integer (15));
    _methods.put ("get_all_filters", new java.lang.Integer (16));
    _methods.put ("remove_all_filters", new java.lang.Integer (17));
    _methods.put ("obtain_push_consumer", new java.lang.Integer (18));
    _methods.put ("obtain_pull_consumer", new java.lang.Integer (19));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
       * A unique identified for this administration object.
       */
       case 0:  // CosNotifyChannelAdmin/SupplierAdmin/_get_MyID
       {
         int __result = (int)0;
         __result = this.MyID ();
         out = $rh.createReply();
         out.write_long (__result);
         break;
       }


  /**
       * The event channel object that created this administration object.
       */
       case 1:  // CosNotifyChannelAdmin/SupplierAdmin/_get_MyChannel
       {
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannel __result = null;
         __result = this.MyChannel ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelHelper.write (out, __result);
         break;
       }


  /**
       * Indicates whether AND or OR semantics is used when combining 
       * administration object filters and proxy filters.
       */
       case 2:  // CosNotifyChannelAdmin/SupplierAdmin/_get_MyOperator
       {
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperator __result = null;
         __result = this.MyOperator ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperatorHelper.write (out, __result);
         break;
       }


  /**
       * A list of pull consumer proxies created by the administration object.
       */
       case 3:  // CosNotifyChannelAdmin/SupplierAdmin/_get_pull_consumers
       {
         int __result[] = null;
         __result = this.pull_consumers ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyIDSeqHelper.write (out, __result);
         break;
       }


  /**
       * A list of pull consumer proxies created by the administration object.
       */
       case 4:  // CosNotifyChannelAdmin/SupplierAdmin/_get_push_consumers
       {
         int __result[] = null;
         __result = this.push_consumers ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyIDSeqHelper.write (out, __result);
         break;
       }


  /**
       * Get the proxy with the specified ID.
       * @parm <code>proxy_id</code> - The ID of the proxy to retrieve.
       * @raises ProxyNotFound If no proxy with the specified ID could 
       * be found.
       */
       case 5:  // CosNotifyChannelAdmin/SupplierAdmin/get_proxy_consumer
       {
         try {
           int proxy_id = in.read_long ();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer __result = null;
           __result = this.get_proxy_consumer (proxy_id);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumerHelper.write (out, __result);
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyNotFound __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyNotFoundHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Obtain a pull consumer proxy for this administration object.
       * @parm <code>ctype</code> - The client type.
       * @parm <code>proxy_id</code> - The ID of the newly created proxy,
       * i.e. the return value.
       * @returns A ProxyConsumer object reference.
       * @raises AdminLimitExceeded If the number of proxies associated 
       * with this administration object exceeds the MaxConsumers property.
       */
       case 6:  // CosNotifyChannelAdmin/SupplierAdmin/obtain_notification_pull_consumer
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ClientType ctype = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ClientTypeHelper.read (in);
           org.omg.CORBA.IntHolder proxy_id = new org.omg.CORBA.IntHolder ();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer __result = null;
           __result = this.obtain_notification_pull_consumer (ctype, proxy_id);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumerHelper.write (out, __result);
           out.write_long (proxy_id.value);
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminLimitExceeded __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminLimitExceededHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Obtain a push consumer proxy for this administration object.
       * @parm <code>ctype</code> - The client type.
       * @parm <code>proxy_id</code> - The ID of the newly created proxy,
       * i.e. the return value.
       * @returns A ProxyConsumer object reference.
       * @raises AdminLimitExceeded If the number of proxies associated 
       * with this administration object exceeds the MaxConsumers property.
       */
       case 7:  // CosNotifyChannelAdmin/SupplierAdmin/obtain_notification_push_consumer
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ClientType ctype = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ClientTypeHelper.read (in);
           org.omg.CORBA.IntHolder proxy_id = new org.omg.CORBA.IntHolder ();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumer __result = null;
           __result = this.obtain_notification_push_consumer (ctype, proxy_id);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyConsumerHelper.write (out, __result);
           out.write_long (proxy_id.value);
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminLimitExceeded __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminLimitExceededHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Destroy this administration object and all proxies created by it.
       */
       case 8:  // CosNotifyChannelAdmin/SupplierAdmin/destroy
       {
         this.destroy ();
         out = $rh.createReply();
         break;
       }


  /**
       * Returns the current quality of service settings for this object.
       * @returns A sequence of name-value pairs defining the quality of 
       * service settings.
       */
       case 9:  // CosNotification/QoSAdmin/get_qos
       {
         hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = null;
         __result = this.get_qos ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (out, __result);
         break;
       }


  /**
       * Sets the quality of service settings for this object.
       * @parm <code>qos</code> - A sequence of name-value pairs defining
       * the desired quality of service settings.
       * @raises UnsupportedQoS If the requested settings are not supported.
       */
       case 10:  // CosNotification/QoSAdmin/set_qos
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotification.Property qos[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (in);
           this.set_qos (qos);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Validates a set of quality of service requirements.
       * @parm <code>qos</code> -  A sequence of name-value pairs defining
       * quality of service settings that are to be validated.
       * @parm <code>available_qos</code> - A sequence of all additional
       * quality of service setting supported by this object.
       * @raises UnsupportedQoS If any of the setting in the input argument
       * are not supported.
       */
       case 11:  // CosNotification/QoSAdmin/validate_qos
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotification.Property required_qos[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (in);
           hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder available_qos = new hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder ();
           this.validate_qos (required_qos, available_qos);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHelper.write (out, available_qos.value);
         } catch (hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Indicates that a supplier is changing the names of the types of
       * events it is publishing.
       * @parm <code>added</code> - The event types added.
       * @parm <code>removed</code> - The event types removed.
       * @raises InvalidEventType If any of the event type names in either 
       * the of the input sequences are invalid.
       */
       case 12:  // CosNotifyComm/NotifyPublish/offer_change
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotification.EventType added[] = hoshen.xsm.lightsoft.corba.CosNotification.EventTypeSeqHelper.read (in);
           hoshen.xsm.lightsoft.corba.CosNotification.EventType removed[] = hoshen.xsm.lightsoft.corba.CosNotification.EventTypeSeqHelper.read (in);
           this.offer_change (added, removed);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyComm.InvalidEventType __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyComm.InvalidEventTypeHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Add a filter to this object's list of filters. All these filters
       * are tried upon reception of an event.
       * @parm <code>new_filter</code> - The filter to add.
       * @returns An unique ID that identifies the added filter.
       */
       case 13:  // CosNotifyFilter/FilterAdmin/add_filter
       {
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter new_filter = hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.read (in);
         int __result = (int)0;
         __result = this.add_filter (new_filter);
         out = $rh.createReply();
         out.write_long (__result);
         break;
       }


  /**
       * Remove a filter from this object's list of filters.
       * @parm <code>filter</code> - The filter ID.
       * @raises FilterNotFound If the ID does not correspond to any
       * filter that has been added to this object.
       */
       case 14:  // CosNotifyFilter/FilterAdmin/remove_filter
       {
         try {
           int filter = in.read_long ();
           this.remove_filter (filter);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFound __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Get a filter from the filter ID.
       * @parm <code>filter</code> - The filter ID.
       * @raises FilterNotFound If the ID does not correspond to any
       * filter that has been added to this object.
       */
       case 15:  // CosNotifyFilter/FilterAdmin/get_filter
       {
         try {
           int filter = in.read_long ();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter __result = null;
           __result = this.get_filter (filter);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.write (out, __result);
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFound __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Get all filters added to this administration object.
       * @returns A sequence of filter IDs.
       */
       case 16:  // CosNotifyFilter/FilterAdmin/get_all_filters
       {
         int __result[] = null;
         __result = this.get_all_filters ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterIDSeqHelper.write (out, __result);
         break;
       }


  /**
       * Remove all filters added to this administration object.
       */
       case 17:  // CosNotifyFilter/FilterAdmin/remove_all_filters
       {
         this.remove_all_filters ();
         out = $rh.createReply();
         break;
       }


  /**
       * Obtain a push consumer proxy for this administration object.
       * @returns A <code>ProxyPushConsumer</code> object reference.
       */
       case 18:  // CosEventChannelAdmin/SupplierAdmin/obtain_push_consumer
       {
         hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPushConsumer __result = null;
         __result = this.obtain_push_consumer ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPushConsumerHelper.write (out, __result);
         break;
       }


  /**
       * Obtain a pull consumer proxy for this administration object.
       * @returns A <code>ProxyPullConsumer</code> object reference.
       */
       case 19:  // CosEventChannelAdmin/SupplierAdmin/obtain_pull_consumer
       {
         hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullConsumer __result = null;
         __result = this.obtain_pull_consumer ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullConsumerHelper.write (out, __result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke


} // class _SupplierAdminPOA
