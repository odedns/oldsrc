package hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin;


/**
* hoshen/xsm/lightsoft/corba/CosNotifyChannelAdmin/EventChannelPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosNotifyChannelAdmin.idl
* 13:11:07 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * An interface for the event channel.
    */
public abstract class EventChannelPOA extends org.omg.PortableServer.Servant
                implements hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelOperations, org.omg.CORBA.portable.InvokeHandler
{

  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannel _this() {
     return hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelHelper.narrow(
        super._this_object());
  }

  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannel _this(org.omg.CORBA.ORB orb) {
     return hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelHelper.narrow(
        super._this_object(orb));
  }

  public String[] _all_interfaces(
     org.omg.PortableServer.POA poa,
     byte[] objectId) {
         return (String[])__ids.clone();
  }

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0", 
    "IDL:omg.org/CosNotification/QoSAdmin:1.0", 
    "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0", 
    "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0"};

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("_get_MyFactory", new java.lang.Integer (0));
    _methods.put ("_get_default_consumer_admin", new java.lang.Integer (1));
    _methods.put ("_get_default_supplier_admin", new java.lang.Integer (2));
    _methods.put ("_get_default_filter_factory", new java.lang.Integer (3));
    _methods.put ("new_for_consumers", new java.lang.Integer (4));
    _methods.put ("new_for_suppliers", new java.lang.Integer (5));
    _methods.put ("get_consumeradmin", new java.lang.Integer (6));
    _methods.put ("get_supplieradmin", new java.lang.Integer (7));
    _methods.put ("get_all_consumeradmins", new java.lang.Integer (8));
    _methods.put ("get_all_supplieradmins", new java.lang.Integer (9));
    _methods.put ("get_qos", new java.lang.Integer (10));
    _methods.put ("set_qos", new java.lang.Integer (11));
    _methods.put ("validate_qos", new java.lang.Integer (12));
    _methods.put ("get_admin", new java.lang.Integer (13));
    _methods.put ("set_admin", new java.lang.Integer (14));
    _methods.put ("for_consumers", new java.lang.Integer (15));
    _methods.put ("for_suppliers", new java.lang.Integer (16));
    _methods.put ("destroy", new java.lang.Integer (17));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
       * The factory object that created this event channel object.
       */
       case 0:  // CosNotifyChannelAdmin/EventChannel/_get_MyFactory
       {
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelFactory __result = null;
         __result = this.MyFactory ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.EventChannelFactoryHelper.write (out, __result);
         break;
       }


  /**
       * The default consumer administration object. This object has the 
       * unique identification number zero.
       */
       case 1:  // CosNotifyChannelAdmin/EventChannel/_get_default_consumer_admin
       {
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = null;
         __result = this.default_consumer_admin ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdminHelper.write (out, __result);
         break;
       }


  /**
       * The default supplier administration object. This object has the 
       * unique identification number zero.
       */
       case 2:  // CosNotifyChannelAdmin/EventChannel/_get_default_supplier_admin
       {
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin __result = null;
         __result = this.default_supplier_admin ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminHelper.write (out, __result);
         break;
       }


  /**
       * The default filter factory object for this event channel.
       */
       case 3:  // CosNotifyChannelAdmin/EventChannel/_get_default_filter_factory
       {
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactory __result = null;
         __result = this.default_filter_factory ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterFactoryHelper.write (out, __result);
         break;
       }


  /**
       * Creates an administration object for event consumers.
       * @parm <code>op</code> - Indicates whether the newly created
       * administration object should use AND or OR semantics when combining
       * administration object filters and proxy filters.
       * @parm <code>id</code> - The unique identifier for the administration
       * object.
       * @returns A <code>ConsumerAdmin</code> object reference.
       */
       case 4:  // CosNotifyChannelAdmin/EventChannel/new_for_consumers
       {
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperator op = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperatorHelper.read (in);
         org.omg.CORBA.IntHolder id = new org.omg.CORBA.IntHolder ();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = null;
         __result = this.new_for_consumers (op, id);
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdminHelper.write (out, __result);
         out.write_long (id.value);
         break;
       }


  /**
       * Creates an administration object for event suppliers.
       * @parm <code>op</code> - Indicates whether the newly created
       * administration object should use AND or OR semantics when combining
       * administration object filters and proxy filters.
       * @parm <code>id</code> - The unique identifier for the administration
       * object.
       * @returns A <code>SupplierAdmin</code> object reference.
       */
       case 5:  // CosNotifyChannelAdmin/EventChannel/new_for_suppliers
       {
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperator op = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.InterFilterGroupOperatorHelper.read (in);
         org.omg.CORBA.IntHolder id = new org.omg.CORBA.IntHolder ();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin __result = null;
         __result = this.new_for_suppliers (op, id);
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminHelper.write (out, __result);
         out.write_long (id.value);
         break;
       }


  /**
       * Get an administration object from its ID.
       * @parm <code>id</code> - A unique identifier for the administration
       * object.
       * @returns A <code>ConsumerAdmin</code> object reference.
       * @raises AdminNotFound If no administration object with that ID
       * could be found.
       */
       case 6:  // CosNotifyChannelAdmin/EventChannel/get_consumeradmin
       {
         try {
           int id = in.read_long ();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = null;
           __result = this.get_consumeradmin (id);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdminHelper.write (out, __result);
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminNotFound __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminNotFoundHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Get an administration object from its ID.
       * @parm <code>id</code> - A unique identifier for the administration
       * object.
       * @returns A <code>SupplierAdmin</code> object reference.
       * @raises AdminNotFound If no administration object with that ID
       * could be found.
       */
       case 7:  // CosNotifyChannelAdmin/EventChannel/get_supplieradmin
       {
         try {
           int id = in.read_long ();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdmin __result = null;
           __result = this.get_supplieradmin (id);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.SupplierAdminHelper.write (out, __result);
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminNotFound __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminNotFoundHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Get all consumer administration objects.
       * @returns A sequence of administration object unique identifiers.
       */
       case 8:  // CosNotifyChannelAdmin/EventChannel/get_all_consumeradmins
       {
         int __result[] = null;
         __result = this.get_all_consumeradmins ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminIDSeqHelper.write (out, __result);
         break;
       }


  /**
       * Get all supplier administration objects.
       * @returns A sequence of administration object unique identifiers.
       */
       case 9:  // CosNotifyChannelAdmin/EventChannel/get_all_supplieradmins
       {
         int __result[] = null;
         __result = this.get_all_supplieradmins ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.AdminIDSeqHelper.write (out, __result);
         break;
       }


  /**
       * Returns the current quality of service settings for this object.
       * @returns A sequence of name-value pairs defining the quality of 
       * service settings.
       */
       case 10:  // CosNotification/QoSAdmin/get_qos
       {
         hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = null;
         __result = this.get_qos ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (out, __result);
         break;
       }


  /**
       * Sets the quality of service settings for this object.
       * @parm <code>qos</code> - A sequence of name-value pairs defining
       * the desired quality of service settings.
       * @raises UnsupportedQoS If the requested settings are not supported.
       */
       case 11:  // CosNotification/QoSAdmin/set_qos
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotification.Property qos[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (in);
           this.set_qos (qos);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Validates a set of quality of service requirements.
       * @parm <code>qos</code> -  A sequence of name-value pairs defining
       * quality of service settings that are to be validated.
       * @parm <code>available_qos</code> - A sequence of all additional
       * quality of service setting supported by this object.
       * @raises UnsupportedQoS If any of the setting in the input argument
       * are not supported.
       */
       case 12:  // CosNotification/QoSAdmin/validate_qos
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotification.Property required_qos[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (in);
           hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder available_qos = new hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder ();
           this.validate_qos (required_qos, available_qos);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHelper.write (out, available_qos.value);
         } catch (hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Returns the current administrative settings for this object.
       * @returns A sequence of name-value pairs defining the administrative 
       * settings.
       */
       case 13:  // CosNotification/AdminPropertiesAdmin/get_admin
       {
         hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = null;
         __result = this.get_admin ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (out, __result);
         break;
       }


  /**
       * Sets the administrative settings for this object.
       * @parm <code>admin</code> - A sequence of desired name-value pairs
       * defining the administrative settings.
       * @raises UnsupportedAdmin If any of the desired setting are not
       * available.
       */
       case 14:  // CosNotification/AdminPropertiesAdmin/set_admin
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotification.Property admin[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (in);
           this.set_admin (admin);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedAdmin __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedAdminHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Gets an object reference to the administration object
       * for event consumers.
       * @returns The <code>ConsumerAdmin</code> object reference.
       */
       case 15:  // CosEventChannelAdmin/EventChannel/for_consumers
       {
         hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ConsumerAdmin __result = null;
         __result = this.for_consumers ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ConsumerAdminHelper.write (out, __result);
         break;
       }


  /**
       * Gets an object reference to the administration object
       * for event suppliers.
       * @returns The <code>SupplierAdmin</code> object reference.
       */
       case 16:  // CosEventChannelAdmin/EventChannel/for_suppliers
       {
         hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.SupplierAdmin __result = null;
         __result = this.for_suppliers ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.SupplierAdminHelper.write (out, __result);
         break;
       }


  /**
       * Destroys this event channel and released any storage used.
       */
       case 17:  // CosEventChannelAdmin/EventChannel/destroy
       {
         this.destroy ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke


} // class _EventChannelPOA
