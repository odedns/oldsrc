package hoshen.xsm.lightsoft.corba.CosEventChannelAdmin;


/**
* hoshen/xsm/lightsoft/corba/CosEventChannelAdmin/ProxyPullSupplierPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosEventChannelAdmin.idl
* 13:10:52 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * Interface for a proxy pull supplier.
    */
public abstract class ProxyPullSupplierPOA extends org.omg.PortableServer.Servant
                implements hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullSupplierOperations, org.omg.CORBA.portable.InvokeHandler
{

  public hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullSupplier _this() {
     return hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullSupplierHelper.narrow(
        super._this_object());
  }

  public hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullSupplier _this(org.omg.CORBA.ORB orb) {
     return hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.ProxyPullSupplierHelper.narrow(
        super._this_object(orb));
  }

  public String[] _all_interfaces(
     org.omg.PortableServer.POA poa,
     byte[] objectId) {
         return (String[])__ids.clone();
  }

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier:1.0", 
    "IDL:omg.org/CosEventComm/PullSupplier:1.0"};

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("connect_pull_consumer", new java.lang.Integer (0));
    _methods.put ("pull", new java.lang.Integer (1));
    _methods.put ("try_pull", new java.lang.Integer (2));
    _methods.put ("disconnect_pull_supplier", new java.lang.Integer (3));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
       * Connect a pull consumer to this proxy.
       * @parm <code>pull_consumer</code> - The <code>PullConsumer</code>
       * object reference.
       * @raises AlreadyConnected If this consumer is already connected.
       */
       case 0:  // CosEventChannelAdmin/ProxyPullSupplier/connect_pull_consumer
       {
         try {
           hoshen.xsm.lightsoft.corba.CosEventComm.PullConsumer pull_consumer = hoshen.xsm.lightsoft.corba.CosEventComm.PullConsumerHelper.read (in);
           this.connect_pull_consumer (pull_consumer);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.AlreadyConnected __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.AlreadyConnectedHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Pull an event from this supplier
       * @returns The event.
       * @raises Disconnected If this supplier is disconnected.
       */
       case 1:  // CosEventComm/PullSupplier/pull
       {
         try {
           org.omg.CORBA.Any __result = null;
           __result = this.pull ();
           out = $rh.createReply();
           out.write_any (__result);
         } catch (hoshen.xsm.lightsoft.corba.CosEventComm.Disconnected __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosEventComm.DisconnectedHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Try to pull an event from this supplier.
       * @parm <code>has_event</code> - boolean indicating if supplier
       * has an event.
       * @returns The event if <code>has_event</code> is true.
       * @raises Disconnected If this supplier is disconnected.
       */
       case 2:  // CosEventComm/PullSupplier/try_pull
       {
         try {
           org.omg.CORBA.BooleanHolder has_event = new org.omg.CORBA.BooleanHolder ();
           org.omg.CORBA.Any __result = null;
           __result = this.try_pull (has_event);
           out = $rh.createReply();
           out.write_any (__result);
           out.write_boolean (has_event.value);
         } catch (hoshen.xsm.lightsoft.corba.CosEventComm.Disconnected __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosEventComm.DisconnectedHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Disconnect a pull supplier.
       */
       case 3:  // CosEventComm/PullSupplier/disconnect_pull_supplier
       {
         this.disconnect_pull_supplier ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke


} // class _ProxyPullSupplierPOA
