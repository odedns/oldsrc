package hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin;


/**
* hoshen/xsm/lightsoft/corba/CosNotifyChannelAdmin/ProxyPullSupplierPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosNotifyChannelAdmin.idl
* 13:11:03 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * An interface for proxy pull suppliers.
    */
public abstract class ProxyPullSupplierPOA extends org.omg.PortableServer.Servant
                implements hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyPullSupplierOperations, org.omg.CORBA.portable.InvokeHandler
{

  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyPullSupplier _this() {
     return hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyPullSupplierHelper.narrow(
        super._this_object());
  }

  public hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyPullSupplier _this(org.omg.CORBA.ORB orb) {
     return hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyPullSupplierHelper.narrow(
        super._this_object(orb));
  }

  public String[] _all_interfaces(
     org.omg.PortableServer.POA poa,
     byte[] objectId) {
         return (String[])__ids.clone();
  }

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyChannelAdmin/ProxyPullSupplier:1.0", 
    "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0", 
    "IDL:omg.org/CosNotification/QoSAdmin:1.0", 
    "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0", 
    "IDL:omg.org/CosNotifyComm/PullSupplier:1.0", 
    "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0", 
    "IDL:omg.org/CosEventComm/PullSupplier:1.0"};

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("connect_any_pull_consumer", new java.lang.Integer (0));
    _methods.put ("_get_MyType", new java.lang.Integer (1));
    _methods.put ("_get_MyAdmin", new java.lang.Integer (2));
    _methods.put ("_get_priority_filter", new java.lang.Integer (3));
    _methods.put ("_set_priority_filter", new java.lang.Integer (4));
    _methods.put ("_get_lifetime_filter", new java.lang.Integer (5));
    _methods.put ("_set_lifetime_filter", new java.lang.Integer (6));
    _methods.put ("obtain_offered_types", new java.lang.Integer (7));
    _methods.put ("validate_event_qos", new java.lang.Integer (8));
    _methods.put ("get_qos", new java.lang.Integer (9));
    _methods.put ("set_qos", new java.lang.Integer (10));
    _methods.put ("validate_qos", new java.lang.Integer (11));
    _methods.put ("add_filter", new java.lang.Integer (12));
    _methods.put ("remove_filter", new java.lang.Integer (13));
    _methods.put ("get_filter", new java.lang.Integer (14));
    _methods.put ("get_all_filters", new java.lang.Integer (15));
    _methods.put ("remove_all_filters", new java.lang.Integer (16));
    _methods.put ("subscription_change", new java.lang.Integer (17));
    _methods.put ("pull", new java.lang.Integer (18));
    _methods.put ("try_pull", new java.lang.Integer (19));
    _methods.put ("disconnect_pull_supplier", new java.lang.Integer (20));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
       * Connect an any type pull consumer to this proxy.
       * @parm <code>pull_consumer</code> - The <code>PullConsumer</code>
       * object reference.
       * @raises AlreadyConnected If this consumer is already connected.
       */
       case 0:  // CosNotifyChannelAdmin/ProxyPullSupplier/connect_any_pull_consumer
       {
         try {
           hoshen.xsm.lightsoft.corba.CosEventComm.PullConsumer pull_consumer = hoshen.xsm.lightsoft.corba.CosEventComm.PullConsumerHelper.read (in);
           this.connect_any_pull_consumer (pull_consumer);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.AlreadyConnected __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosEventChannelAdmin.AlreadyConnectedHelper.write (out, __ex);
         }
         break;
       }


  /**
       * The type of this proxy.
       */
       case 1:  // CosNotifyChannelAdmin/ProxySupplier/_get_MyType
       {
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyType __result = null;
         __result = this.MyType ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ProxyTypeHelper.write (out, __result);
         break;
       }


  /**
       * The administration object that created this proxy.
       */
       case 2:  // CosNotifyChannelAdmin/ProxySupplier/_get_MyAdmin
       {
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdmin __result = null;
         __result = this.MyAdmin ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ConsumerAdminHelper.write (out, __result);
         break;
       }


  /**
       * A mapping filter which if a non-nil reference will be consulted 
       * for resolving the priority of the event.
       */
       case 3:  // CosNotifyChannelAdmin/ProxySupplier/_get_priority_filter
       {
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter __result = null;
         __result = this.priority_filter ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilterHelper.write (out, __result);
         break;
       }


  /**
       * A mapping filter which if a non-nil reference will be consulted 
       * for resolving the priority of the event.
       */
       case 4:  // CosNotifyChannelAdmin/ProxySupplier/_set_priority_filter
       {
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter newPriority_filter = hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilterHelper.read (in);
         this.priority_filter (newPriority_filter);
         out = $rh.createReply();
         break;
       }


  /**
       * A filter which if a non-nil reference will be consulted 
       * for resolving the priority of the event.
       */
       case 5:  // CosNotifyChannelAdmin/ProxySupplier/_get_lifetime_filter
       {
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter __result = null;
         __result = this.lifetime_filter ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilterHelper.write (out, __result);
         break;
       }


  /**
       * A filter which if a non-nil reference will be consulted 
       * for resolving the priority of the event.
       */
       case 6:  // CosNotifyChannelAdmin/ProxySupplier/_set_lifetime_filter
       {
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilter newLifetime_filter = hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingFilterHelper.read (in);
         this.lifetime_filter (newLifetime_filter);
         out = $rh.createReply();
         break;
       }


  /**
       * Get a list of event type names that this proxy can potentially
       * forward to its associated consumers.
       * @parm <code>mode</code> - The mode of type retrieval.
       * @returns A sequence of event type names.
       */
       case 7:  // CosNotifyChannelAdmin/ProxySupplier/obtain_offered_types
       {
         hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ObtainInfoMode mode = hoshen.xsm.lightsoft.corba.CosNotifyChannelAdmin.ObtainInfoModeHelper.read (in);
         hoshen.xsm.lightsoft.corba.CosNotification.EventType __result[] = null;
         __result = this.obtain_offered_types (mode);
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotification.EventTypeSeqHelper.write (out, __result);
         break;
       }


  /**
       * Validate whether or not this proxy can honour the specified 
       * quality of service requirements.
       * @parm <code>required_qos</code> - Quality of service name-value
       * pairs which a client is interested in validating.
       * @parm <code>available_qos</code> - Quality of service settings that
       * this proxy can support in addition to the ones in the input sequence.
       * @raises UnsupportedQoS If any of the quality of service settings
       * in the input sequence could not be honoured.
       */
       case 8:  // CosNotifyChannelAdmin/ProxySupplier/validate_event_qos
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotification.Property required_qos[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (in);
           hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder available_qos = new hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder ();
           this.validate_event_qos (required_qos, available_qos);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHelper.write (out, available_qos.value);
         } catch (hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Returns the current quality of service settings for this object.
       * @returns A sequence of name-value pairs defining the quality of 
       * service settings.
       */
       case 9:  // CosNotification/QoSAdmin/get_qos
       {
         hoshen.xsm.lightsoft.corba.CosNotification.Property __result[] = null;
         __result = this.get_qos ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.write (out, __result);
         break;
       }


  /**
       * Sets the quality of service settings for this object.
       * @parm <code>qos</code> - A sequence of name-value pairs defining
       * the desired quality of service settings.
       * @raises UnsupportedQoS If the requested settings are not supported.
       */
       case 10:  // CosNotification/QoSAdmin/set_qos
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotification.Property qos[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (in);
           this.set_qos (qos);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Validates a set of quality of service requirements.
       * @parm <code>qos</code> -  A sequence of name-value pairs defining
       * quality of service settings that are to be validated.
       * @parm <code>available_qos</code> - A sequence of all additional
       * quality of service setting supported by this object.
       * @raises UnsupportedQoS If any of the setting in the input argument
       * are not supported.
       */
       case 11:  // CosNotification/QoSAdmin/validate_qos
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotification.Property required_qos[] = hoshen.xsm.lightsoft.corba.CosNotification.PropertySeqHelper.read (in);
           hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder available_qos = new hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHolder ();
           this.validate_qos (required_qos, available_qos);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotification.NamedPropertyRangeSeqHelper.write (out, available_qos.value);
         } catch (hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoS __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotification.UnsupportedQoSHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Add a filter to this object's list of filters. All these filters
       * are tried upon reception of an event.
       * @parm <code>new_filter</code> - The filter to add.
       * @returns An unique ID that identifies the added filter.
       */
       case 12:  // CosNotifyFilter/FilterAdmin/add_filter
       {
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter new_filter = hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.read (in);
         int __result = (int)0;
         __result = this.add_filter (new_filter);
         out = $rh.createReply();
         out.write_long (__result);
         break;
       }


  /**
       * Remove a filter from this object's list of filters.
       * @parm <code>filter</code> - The filter ID.
       * @raises FilterNotFound If the ID does not correspond to any
       * filter that has been added to this object.
       */
       case 13:  // CosNotifyFilter/FilterAdmin/remove_filter
       {
         try {
           int filter = in.read_long ();
           this.remove_filter (filter);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFound __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Get a filter from the filter ID.
       * @parm <code>filter</code> - The filter ID.
       * @raises FilterNotFound If the ID does not correspond to any
       * filter that has been added to this object.
       */
       case 14:  // CosNotifyFilter/FilterAdmin/get_filter
       {
         try {
           int filter = in.read_long ();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.Filter __result = null;
           __result = this.get_filter (filter);
           out = $rh.createReply();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterHelper.write (out, __result);
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFound __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterNotFoundHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Get all filters added to this administration object.
       * @returns A sequence of filter IDs.
       */
       case 15:  // CosNotifyFilter/FilterAdmin/get_all_filters
       {
         int __result[] = null;
         __result = this.get_all_filters ();
         out = $rh.createReply();
         hoshen.xsm.lightsoft.corba.CosNotifyFilter.FilterIDSeqHelper.write (out, __result);
         break;
       }


  /**
       * Remove all filters added to this administration object.
       */
       case 16:  // CosNotifyFilter/FilterAdmin/remove_all_filters
       {
         this.remove_all_filters ();
         out = $rh.createReply();
         break;
       }


  /**
       * Indicates that a consumer is changing the names of the types of
       * events it is subscribed to.
       * @parm <code>added</code> - The event types added.
       * @parm <code>removed</code> - The event types removed.
       * @raises InvalidEventType If any of the event type names in either 
       * the of the input sequences are invalid.
       */
       case 17:  // CosNotifyComm/NotifySubscribe/subscription_change
       {
         try {
           hoshen.xsm.lightsoft.corba.CosNotification.EventType added[] = hoshen.xsm.lightsoft.corba.CosNotification.EventTypeSeqHelper.read (in);
           hoshen.xsm.lightsoft.corba.CosNotification.EventType removed[] = hoshen.xsm.lightsoft.corba.CosNotification.EventTypeSeqHelper.read (in);
           this.subscription_change (added, removed);
           out = $rh.createReply();
         } catch (hoshen.xsm.lightsoft.corba.CosNotifyComm.InvalidEventType __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosNotifyComm.InvalidEventTypeHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Pull an event from this supplier
       * @returns The event.
       * @raises Disconnected If this supplier is disconnected.
       */
       case 18:  // CosEventComm/PullSupplier/pull
       {
         try {
           org.omg.CORBA.Any __result = null;
           __result = this.pull ();
           out = $rh.createReply();
           out.write_any (__result);
         } catch (hoshen.xsm.lightsoft.corba.CosEventComm.Disconnected __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosEventComm.DisconnectedHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Try to pull an event from this supplier.
       * @parm <code>has_event</code> - boolean indicating if supplier
       * has an event.
       * @returns The event if <code>has_event</code> is true.
       * @raises Disconnected If this supplier is disconnected.
       */
       case 19:  // CosEventComm/PullSupplier/try_pull
       {
         try {
           org.omg.CORBA.BooleanHolder has_event = new org.omg.CORBA.BooleanHolder ();
           org.omg.CORBA.Any __result = null;
           __result = this.try_pull (has_event);
           out = $rh.createReply();
           out.write_any (__result);
           out.write_boolean (has_event.value);
         } catch (hoshen.xsm.lightsoft.corba.CosEventComm.Disconnected __ex) {
           out = $rh.createExceptionReply ();
           hoshen.xsm.lightsoft.corba.CosEventComm.DisconnectedHelper.write (out, __ex);
         }
         break;
       }


  /**
       * Disconnect a pull supplier.
       */
       case 20:  // CosEventComm/PullSupplier/disconnect_pull_supplier
       {
         this.disconnect_pull_supplier ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke


} // class _ProxyPullSupplierPOA
