package hoshen.xsm.lightsoft.corba.CosNotifyFilter;


/**
* hoshen/xsm/lightsoft/corba/CosNotifyFilter/MappingFilterOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from lightsoft/CosNotifyFilter.idl
* 13:11:16 GMT+02:00 יום חמישי 28 יוני 2007
*/


/**
    * Interface for a mapping filter.
    */
public interface MappingFilterOperations 
{

  /**
       * The constraint grammer used by this filter.
       */
  String constraint_grammar ();

  /**
       * The output value for any match operation that returns true.
       */
  org.omg.CORBA.Any default_value ();

  /**
       * Associates one or more mapping constraints with this filter object.
       * @parm <code>constraint_list</code> - List of mapping constraints to
       * be associated with filter.
       * @returns A list with ID for each of the added mapping constraints.
       * @raises InvalidConstraint If any of the mapping constraints
       * are invalid.
       * @raises InvalidValue If any of the constraints have a typecode
       * that is different from the <code>value_type</code> attribute.
       */
  hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingConstraintInfo[] add_mapping_constraints (hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingConstraintPair[] pair_list) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidConstraint, hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidValue;

  /**
       * Delete or modify mapping constraints on this filter object.
       * @parm <code>del_list</code> - List of mapping constraints to delete.
       * @parm <code>modify_list</code> - List of constraints to modify.
       * @raises InvalidConstraint If any of the constraints in the
       * modify_list input sequences are invalid.
       * @raises InvalidValue If any of the constraints have a typecode
       * that is different from the <code>value_type</code> attribute.
       * @raises ConstraintNotFound If a constraint in either
       * of the two input sequences was not found.
       */
  void modify_mapping_constraints (int[] del_list, hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingConstraintInfo[] modify_list) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidConstraint, hoshen.xsm.lightsoft.corba.CosNotifyFilter.InvalidValue, hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintNotFound;

  /**
       * Return a list of mapping constraints for this filter object
       * based on IDs.
       * @parm <code>id_list</code> - List of mapping constraint IDs.
       * @returns A list of mapping constraints for the IDs in the
       * input sequence.
       * @raises ConstraintNotFound If a mapping constraint was not found.
       */
  hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingConstraintInfo[] get_mapping_constraints (int[] id_list) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.ConstraintNotFound;

  /**
       * Return a list of all mapping constraints for this filter object.
       * @returns A list of all mapping constraints.
       */
  hoshen.xsm.lightsoft.corba.CosNotifyFilter.MappingConstraintInfo[] get_all_mapping_constraints ();

  /**
       * Removes all mapping constraints defined on this filter object.
       */
  void remove_all_mapping_constraints ();

  /**
       * Destroys this mapping filter object.
       */
  void destroy ();

  /**
       * Evaluates the input event against the filter constraints defined
       * on this filter object. If the event satisfies one of the filter
       * constraints TRUE is returned, otherwise FALSE is returned.
       * @parm <code>filterable_data</code> - The event to evaluate.
       * @parm <code>result_to_set</code> - Value of a constraint that
       * matches the event or <code>default_value</code> if the event
       * does not match any constraints.
       * @returns TRUE if event matches any constraint, FALSE otherwise.
       * raises UnsupportedFilterableData If the event specified by
       * <code>filterable_data</code> contains data that this filter is
       * not designed to handle.
       */
  boolean match (org.omg.CORBA.Any filterable_data, org.omg.CORBA.AnyHolder result_to_set) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableData;

  /**
       * Evaluates the input event against the filter constraints defined
       * on this filter object. If the event satisfies one of the filter
       * constraints TRUE is returned, otherwise FALSE is returned.
       * @parm <code>filterable_data</code> - The structured event to evaluate.
       * @parm <code>result_to_set</code> - Value of a constraint that
       * matches the event or <code>default_value</code> if the event
       * does not match any constraints.
       * @returns TRUE if event matches any constraint, FALSE otherwise.
       * raises UnsupportedFilterableData If the event specified by
       * <code>filterable_data</code> contains data that this filter is
       * not designed to handle.
       */
  boolean match_structured (hoshen.xsm.lightsoft.corba.CosNotification.StructuredEvent filterable_data, org.omg.CORBA.AnyHolder result_to_set) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableData;

  /**
       * Evaluates the input event against the filter constraints defined
       * on this filter object. If the event satisfies one of the filter
       * constraints TRUE is returned, otherwise FALSE is returned.
       * @parm <code>filterable_data</code> - The typed event to evaluate.
       * @parm <code>result_to_set</code> - Value of a constraint that
       * matches the event or default_value if the event does not match
       * any constraints.
       * @returns TRUE if event matches any constraint, FALSE otherwise.
       * raises UnsupportedFilterableData If the event specified by
       * <code>filterable_data</code> contains data that this filter is
       * not designed to handle.
       */
  boolean match_typed (hoshen.xsm.lightsoft.corba.CosNotification.Property[] filterable_data, org.omg.CORBA.AnyHolder result_to_set) throws hoshen.xsm.lightsoft.corba.CosNotifyFilter.UnsupportedFilterableData;
} // interface MappingFilterOperations
